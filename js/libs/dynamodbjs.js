(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

var DynamoDB = require('./lib/dynamodb')

window['@awspilot/dynamodb'] = DynamoDB
window['Buffer'] = AWS.util.Buffer

},{"./lib/dynamodb":3}],2:[function(require,module,exports){

	var util = require('@awspilot/dynamodb-util')

	//util.config.empty_string_replace_as = o.empty_string_replace_as;

	util.config.stringset_parse_as_set = true;
	util.config.numberset_parse_as_set = true;
	util.config.binaryset_parse_as_set = true;


	function Batch( $client, config ) {

		this.events = config.events // global events
		this.describeTables = config.describeTables
		this.return_explain = config.return_explain
		this.local_events = {}
		this.client = $client

		this.current_table = undefined;
		this.err = undefined;
		this.payload = {
			RequestItems: {}
		}
	}


	Batch.prototype.routeCall = function(method, params, reset ,callback ) {
		var $this = this
		this.events.beforeRequest.apply( this, [ method, params ])

		this.client[method]( params, function( err, data ) {

			if (err)
				$this.events.error.apply( $this, [ method, err , params ] )

		// 	if ((data || {}).hasOwnProperty('ConsumedCapacity') )
		// 		$this.ConsumedCapacity = data.ConsumedCapacity

		// 	if ( reset === true )
		// 		$this.reset()

			callback.apply( $this, [ err, data ] )
		})
	}




	Batch.prototype.resume = function() {}
	Batch.prototype.table = function( tbl_name ) {
		if (this.err)
			return this;

		this.current_table = tbl_name
		return this;
	}


	Batch.prototype.item = function() {}


	Batch.prototype.put = function( item ) {
		if (this.err)
			return this;

		if (!this.current_table) {
			this.err = { code: 'INVALID_TABLE', message: 'use .table( tbl_name ) before .put()'}
			return this;
		}

		if (typeof item !== 'object') {
			this.err = { code: 'INVALID_ITEM', message: '.put( item ) - must pass in an Object'}
			return this;
		}

		if (!this.payload.RequestItems.hasOwnProperty( this.current_table ))
			this.payload.RequestItems[ this.current_table ] = []

		this.payload.RequestItems[ this.current_table ].push({
			PutRequest: {
				Item: util.stringify( item ).M
			}
		})

		return this;
	}

	Batch.prototype.delete = function( item ) {
		if (this.err)
			return this;

		if (!this.current_table) {
			this.err = { code: 'INVALID_TABLE', message: 'use .table( tbl_name ) before .delete()'}
			return this;
		}

		if (typeof item !== 'object') {
			this.err = { code: 'INVALID_ITEM', message: '.del( item ) must pass in an Object'}
			return this;
		}

		if (!this.payload.RequestItems.hasOwnProperty( this.current_table ))
			this.payload.RequestItems[ this.current_table ] = []

		this.payload.RequestItems[ this.current_table ].push({
			DeleteRequest: {
				Key: util.stringify( item ).M
			}
		})

		return this;
	}
	Batch.prototype.del = Batch.prototype.delete;




	Batch.prototype.get = function( item ) {
		if (this.err)
			return this;

		if (!this.current_table) {
			this.err = { code: 'INVALID_TABLE', message: 'use .table( tbl_name ) before .get()'}
			return this;
		}

		if (typeof item !== 'object') {
			this.err = { code: 'INVALID_ITEM', message: '.get( item ) - must pass in an Object'}
			return this;
		}

		if (!this.payload.RequestItems.hasOwnProperty( this.current_table ))
			this.payload.RequestItems[ this.current_table ] = {
				Keys: [],
				// ExpressionAttributeNames
				// ProjectionExpression: ""
				// AttributesToGet: []
				ConsistentRead: false,
			}

		this.payload.RequestItems[ this.current_table ].Keys.push( util.stringify( item ).M )

		return this;
	}



	Batch.prototype.consistent_read = function( $value ) {
		if (this.err)
			return this;

		if (!this.current_table) {
			this.err = { code: 'INVALID_TABLE', message: 'use .table( tbl_name ) before .consistent_read()'}
			return this;
		}

		if ( value === undefined ) {
			value = true
		} else {
			var value = JSON.parse(JSON.stringify($value))
		}

		if (!this.payload.RequestItems.hasOwnProperty( this.current_table )) {
			this.payload.RequestItems[ this.current_table ] = {
				Keys: [],
				// ExpressionAttributeNames
				// ProjectionExpression: ""
				// AttributesToGet: []
				ConsistentRead: value,
			}
		} else {
			this.payload.RequestItems[ this.current_table ].ConsistentRead = value
		}

		return this
	}





	Batch.prototype.read = function( cb ) {
		if (this.err)
			return cb(this.err);

		var $this = this

		var $thisQuery = this.payload;

		if (typeof this.local_events['beforeRequest'] === "function" )
			this.local_events['beforeRequest']('batchWriteItem', $thisQuery)

		// @todo: implement promise

		this.routeCall('batchGetItem', $thisQuery , true , function(err,data) {
			if (err)
				return typeof cb !== "function" ? null : cb.apply( this, [ err, false ] )

			var ret = {}

			Object.keys(data.Responses).map(function( tbl_name ) {
				if (!ret.hasOwnProperty(tbl_name))
					ret[tbl_name] = []

				ret[tbl_name] = util.parse({ L :
					(data.Responses[tbl_name] || []).map(function(item) { return {'M': item } })
				})

			})

			this.rawUnprocessedKeys = data.UnprocessedKeys;

			typeof cb !== "function" ? null : cb.apply( this, [ err, ret, data ])

		})

	}
	Batch.prototype.write = function( cb ) {

		if (this.err)
			return cb(this.err);

		var $this = this

		var $thisQuery = this.payload;

		if (typeof this.local_events['beforeRequest'] === "function" )
			this.local_events['beforeRequest']('batchWriteItem', $thisQuery)

		// @todo: implement promise

		//console.log(JSON.stringify($thisQuery, null, "\t"))

		this.routeCall('batchWriteItem', $thisQuery , true , function(err,data) {
			if (err)
				return typeof cb !== "function" ? null : cb.apply( this, [ err, false ] )

			typeof cb !== "function" ? null : cb.apply( this, [ err, data, data ])

		})


	}



module.exports = Batch;

},{"@awspilot/dynamodb-util":5}],3:[function(require,module,exports){
(function (global){
'use strict';
	var Batch = require('./batch')
	var DynamodbFactory = function ( $config ) {
		return new DynamoDB($config)
	}
	DynamodbFactory.util = require('@awspilot/dynamodb-util')

	DynamodbFactory.config = function(o) {
		if (o.hasOwnProperty('empty_string_replace_as')) {
			//console.log("setting replace as to ", JSON.stringify(o.empty_string_replace_as) )
			DynamodbFactory.util.config.empty_string_replace_as = o.empty_string_replace_as;
		}

		if (o.hasOwnProperty('stringset_parse_as_set'))
			DynamodbFactory.util.config.stringset_parse_as_set = o.stringset_parse_as_set;

		if (o.hasOwnProperty('numberset_parse_as_set'))
			DynamodbFactory.util.config.numberset_parse_as_set = o.numberset_parse_as_set;

		if (o.hasOwnProperty('binaryset_parse_as_set'))
			DynamodbFactory.util.config.binaryset_parse_as_set = o.binaryset_parse_as_set;

	}


	var Promise = (typeof window !== "undefined" ? window['promise'] : typeof global !== "undefined" ? global['promise'] : null)
	var util = require('@awspilot/dynamodb-util')

	var Dynamo = require('aws-sdk/clients/dynamodb')
	var AWS = { DynamoDB: Dynamo };

	var sqlparser = require('./sqlparser.js');
	sqlparser.parser.yy.extend = function (a,b){
		if(typeof a == 'undefined') a = {};
		for(var key in b) {
			if(b.hasOwnProperty(key)) {
				a[key] = b[key]
			}
		}
		return a;
	}


	var filterOperators = {
		EQ: '=',
		NE: '<>',
		LT: '<',
		LE: '<=',
		GT: '>',
		GE: '>=',

		BETWEEN: 'BETWEEN',
		IN: 'IN',

		NOT_NULL: 'attribute_exists',
		NULL:     'attribute_not_exists',

		BEGINS_WITH: 'begins_with',
		CONTAINS: 'contains',
		NOT_CONTAINS: 'not_contains',

	 }

	function DynamoDB ( $config ) {
		this.events = {
			error: function() {},
			beforeRequest: function() {}
		}
		this.describeTables = {}
		this.return_explain = false

		// $config will not be an instance of DynamoDB becanse we have a different instance of AWS sdk loaded
		// aws had similar issues in the past: https://github.com/awslabs/dynamodb-document-js-sdk/issues/16

		// a way around to make sure it is an instance of AWS.DynamoDB
		if ((typeof $config === "object") && (($config.config || {}).hasOwnProperty('dynamoDbCrc32'))) {
		//if ($config instanceof AWS.DynamoDB) {
				this.client = $config
				return
		}


		// delay implementation of amazon-dax-client,
		// if node-gyp is not available during npm install,
		// amazon-dax-client will throw error when require('@awspilot/dynamodb')


		//if (process.version.match(/^v(\d+)/)[1] !== '0') {
		//	// amazon-dax-client does not work on node 0.x atm
		//	var AmazonDaxClient = require('amazon-dax-client')
		//	if ($config instanceof AmazonDaxClient) {
		//		this.client = $config
		//		$config = null
		//		return
		//	}
		//}


		if ($config && $config.hasOwnProperty('accessKeyId')) {
			$config.credentials = {
				accessKeyId: $config.accessKeyId,
				secretAccessKey: $config.secretAccessKey || null
			}
			delete $config.accessKeyId
			delete $config.secretAccessKey
		}

		if ($config)
			this.client = new AWS.DynamoDB($config)
		else
			this.client = new AWS.DynamoDB()


	}
	DynamoDB.prototype.SS = function(data) {
		if (Array.isArray(data))
			return new DynamodbFactory.util.Raw({'SS': data })
		throw new Error('SS: argument should be a array')
	}
	DynamoDB.prototype.stringSet = DynamoDB.prototype.SS

	DynamoDB.prototype.BS = function(data) {
		if (Array.isArray(data))
			return new DynamodbFactory.util.Raw({'BS': data })
		throw new Error('BS: argument should be a array')
	}
	DynamoDB.prototype.binarySet = DynamoDB.prototype.BS


	DynamoDB.prototype.N = function(data) {
		if (typeof data === "number" || typeof data === "string")
			return new DynamodbFactory.util.Raw({'N': data.toString() })
		throw new Error('N: argument should be a number or string that converts to a number')
	}
	DynamoDB.prototype.number = DynamoDB.prototype.N


	DynamoDB.prototype.S = function(data) {
		if (typeof data === "string")
			return new DynamodbFactory.util.Raw({'S': data })

		throw new Error('S: argument should be a string')
	}
	DynamoDB.prototype.string = DynamoDB.prototype.S

	DynamoDB.prototype.NS = function(data) {
		if (Array.isArray(data)) {
			var $to_ret = []
			return new DynamodbFactory.util.Raw({'NS': data.map(function(el,idx) { return el.toString() }) })
		}
		throw new Error('NS: argument should be an Array')
	}
	DynamoDB.prototype.numberSet = DynamoDB.prototype.NS


	DynamoDB.prototype.L = function(data) {
		if (Array.isArray(data)) {
			var $to_ret = []
			for (var i in data) {
				$to_ret[i] = DynamodbFactory.util.stringify( data[i] )
			}
			return new DynamodbFactory.util.Raw({'L': $to_ret })
		}
		throw new Error('L: argument should be an Array')
	}
	DynamoDB.prototype.list = DynamoDB.prototype.L



	DynamoDB.prototype.add = function(data, datatype ) {
		// if datatype is defined then force it
		if (typeof datatype == "string") {
			switch (datatype) {
				case 'N':  return this.add(this.N(data));break
				case 'NS': return this.add(this.NS(data));break
				case 'SS': return this.add(this.SS(data));break
				case 'L':  return this.add(this.L(data));break

				// unsupported by AWS
				case 'B':
				case 'BOOL':
				case 'NULL':
				case 'S':
					throw new Error('ADD action is not supported for the type: ' + datatype );
					break

				// unsupported by aws-dynamodb
				case 'BS':
				case 'M':
				default:
					 throw new Error('ADD action is not supported by aws-dynamodb for type: ' + datatype );
					 break
			}
			return
		}

		// check if it is instance of Raw
		if ((typeof data === "object") && (data instanceof DynamodbFactory.util.Raw )) {
			return new DynamoDB.Raw({
				Action: 'ADD',
				Value: data.data
			})
		}

		// autodetect

		// number or undefined: increment number, eg add(5), add()
		if ((typeof data === "number") || (typeof data === "undefined"))
			return this.add(this.N(data || 1));

		if (Array.isArray(data))
			return this.add(this.L(data));

		// add for M is not supported
		//if (typeof data === "object")
		//	return this.add(this.M(data))


		// further autodetection
		throw new Error('ADD action is not supported by aws-dynamodb for type: ' + typeof data );
	}

	DynamoDB.prototype.del = function(data, datatype) {
		// if datatype is defined then force it
		if (typeof datatype == "string") {
			switch (datatype) {
				case 'NS': return this.del(this.NS(data));break
				case 'SS': return this.del(this.SS(data));break

				// unsupported by AWS
				case 'S':
				case 'N':
				case 'L':
					throw new Error('DELETE action with value is not supported for the type: ' + datatype );
					break

				// unsupported by aws-dynamodb
				case 'B':
				case 'BOOL':
				case 'NULL':
				case 'BS':
				case 'M':
				default:
					 throw new Error('DELETE action is not supported by aws-dynamodb for type: ' + datatype );
					 break
			}
			return
		}

		// check if it is instance of Raw
		if ((typeof data === "object") && (data instanceof DynamodbFactory.util.Raw )) {
			return new DynamoDB.Raw({
				Action: 'DELETE',
				Value: data.data
			})
		}

		// autodetect

		if (!arguments.length)
			return new DynamoDB.Raw({ Action: 'DELETE'})

		throw new Error('DELETE action is not supported by aws-dynamodb for type: ' + typeof data );
	}

	DynamoDB.prototype.addTableSchema = function( $schema ) {

		if (typeof $schema !== "object")
			throw new Error("[AWSPILOT] Invalid parameter, schema must be Array of Objects or Object");

		if (! $schema.hasOwnProperty('TableName') )
			throw new Error("[AWSPILOT] Invalid parameter, missing $schema.TableName");

		if (! $schema.hasOwnProperty('KeySchema') )
			throw new Error("[AWSPILOT] Invalid parameter, missing $schema.KeySchema");


		this.describeTables[$schema.TableName] = $schema;
	}

	DynamoDB.prototype.schema = function( $schemas ) {
		var $this = this;
		if (typeof $schemas !== "object")
			throw new Error("[AWSPILOT] Invalid parameter, schema must be Array or Object");

		if (Array.isArray($schemas))
			$schemas.map(function(s) {
				$this.addTableSchema(s)
			})
		else
			this.addTableSchema($schemas)

		return this;
	}

	DynamoDB.prototype.explain = function() {
		this.return_explain = true
		return this
	}

	DynamoDB.prototype.table = function($tableName) {
		var re = this.return_explain; this.return_explain = false;
		return new Request( this.client, { events: this.events, describeTables: this.describeTables, return_explain: re, } ).table($tableName)
	}


	DynamoDB.prototype.query = function() {
		var re = this.return_explain; this.return_explain = false;
		var r = new Request( this.client, { events: this.events, describeTables: this.describeTables, return_explain: re, } )
		return r.sql(arguments[0],arguments[1]);
	}

	DynamoDB.prototype.batch = function( ) {
		var re = this.return_explain; this.return_explain = false;
		return new Batch( this.client, { events: this.events, describeTables: this.describeTables, return_explain: re, } )
	}

	DynamoDB.prototype.getClient = function() {
		return this.client
	}

	DynamoDB.prototype.on = function( event, handler ) {
		this.events[event] = handler
	}

	// select
	DynamoDB.prototype.ALL = 1
	DynamoDB.prototype.ALL_ATTRIBUTES = 1
	DynamoDB.prototype.PROJECTED = 2
	DynamoDB.prototype.ALL_PROJECTED_ATTRIBUTES = 2
	DynamoDB.prototype.COUNT = 3

	// ReturnValues
	DynamoDB.prototype.NONE = 'NONE'
	DynamoDB.prototype.ALL_OLD = 'ALL_OLD'
	DynamoDB.prototype.UPDATED_OLD = 'UPDATED_OLD'
	DynamoDB.prototype.ALL_NEW = 'ALL_NEW'
	DynamoDB.prototype.UPDATED_NEW = 'UPDATED_NEW'

	// ReturnConsumedCapacity
	//DynamoDB.prototype.NONE = 'NONE'
	DynamoDB.prototype.TOTAL = 'TOTAL'
	DynamoDB.prototype.INDEXES = 'INDEXES'

	function Request( $client, config ) {


		this.events = config.events // global events
		this.describeTables = config.describeTables
		this.return_explain = config.return_explain
		this.local_events = {}
		this.client = $client

		this.reset()
	}

	Request.prototype.reset = function() {
		//console.log("reseting")

		this.Select = null

		this.AttributesToGet = [] // deprecated in favor of ProjectionExpression
		this.ProjectionExpression = undefined
		this.ExpressionAttributeNames = undefined
		this.ExpressionAttributeValues = undefined

		this.FilterExpression = undefined

		this.pendingKey = null
		this.pendingFilter = null
		this.pendingIf = null

		this.whereKey = {}
		this.KeyConditionExpression = undefined

		this.whereOther = {}
		this.whereFilter = {}
		this.whereFilterExpression = []  // same as whereFilter, except we can support same attribute compared multiple times

		this.ifFilter = {}
		this.ifConditionExpression = []  // same as ifFilter, except we can support same attribute compared multiple times
		this.ConditionExpression = undefined

		this.limit_value = null
		this.IndexName = null
		this.ScanIndexForward = true
		this.LastEvaluatedKey = null
		this.ExclusiveStartKey = null
		this.ConsistentRead = false
		this.ReturnConsumedCapacity = 'TOTAL'
		this.ReturnValues = DynamoDB.NONE
		//this.ConsumedCapacity = null

	}

	Request.prototype.routeCall = function(method, params, reset ,callback ) {
		var $this = this
		this.events.beforeRequest.apply( this, [ method, params ])

		if ( this.return_explain ) {
			if ( reset === true )
				$this.reset()

			switch (method) {
				case 'putItem':
				case 'updateItem':
				case 'deleteItem':
					var explain = {
						Attributes: DynamodbFactory.util.anormalizeItem({
							method: method,
							payload: params,
						})
					}
					break;
				case 'getItem':
					var explain = {
						Item: DynamodbFactory.util.anormalizeItem({
							method: method,
							payload: params,
						})
					}
					break;
				case 'query':
				case 'scan':
					var explain = {
						Explain: {
							method: method,
							payload: params,
						}
					}
					break;
				case 'listTables':
					var explain = {
						TableNames: {
							method: method,
							payload: params,
						}
					}
					break;
				case 'describeTable':
					var explain = {
						Table: {
							method: method,
							payload: params,
						}
					}
					break;
			}


			callback.apply( $this, [ null, explain ] )
			return
		}


		this.client[method]( params, function( err, data ) {

			if (err)
				$this.events.error.apply( $this, [ method, err , params ] )

			if ((data || {}).hasOwnProperty('ConsumedCapacity') )
				$this.ConsumedCapacity = data.ConsumedCapacity

			if ( reset === true )
				$this.reset()

			callback.apply( $this, [ err, data ] )
		})
	}
	Request.prototype.describeTable = function( table, callback ) {
		if (this.describeTables.hasOwnProperty(table)) {
			return callback.apply( this, [ null, { Table: this.describeTables[table] } ] )
		}

		this.routeCall('describeTable', { TableName: table }, false, function(err,data) {
			return callback.apply( this, [ err, data ] )
		})
	}

	Request.prototype.describe = function( callback ) {
		this.routeCall('describeTable', { TableName: this.tableName }, true,function(err,raw) {
			if (err)
				return callback.apply( this, [ err ] )

			if (!raw.hasOwnProperty('Table'))
				return callback.apply( this, [ { errorMessage: "Invalid data. No Table Property in describeTable"} ] )

			var info = raw.Table
			delete info.TableStatus
			delete info.TableArn
			delete info.TableSizeBytes
			delete info.ItemCount
			delete info.CreationDateTime
			delete info.ProvisionedThroughput.NumberOfDecreasesToday
			delete info.ProvisionedThroughput.LastIncreaseDateTime
			delete info.ProvisionedThroughput.LastDecreaseDateTime
			if (info.hasOwnProperty('BillingModeSummary')) {
				info.BillingMode = info.BillingModeSummary.BillingMode
				delete info.BillingModeSummary
			}
			if (info.hasOwnProperty('GlobalSecondaryIndexes')) {
				for (var i in info.GlobalSecondaryIndexes) {
					delete info.GlobalSecondaryIndexes[i].IndexSizeBytes
					delete info.GlobalSecondaryIndexes[i].IndexStatus
					delete info.GlobalSecondaryIndexes[i].ItemCount
					delete info.GlobalSecondaryIndexes[i].IndexArn
					delete info.GlobalSecondaryIndexes[i].ProvisionedThroughput.NumberOfDecreasesToday
				}
			}
			if (info.hasOwnProperty('LocalSecondaryIndexes')) {
				for (var i in info.LocalSecondaryIndexes) {
					delete info.LocalSecondaryIndexes[i].IndexSizeBytes
					delete info.LocalSecondaryIndexes[i].ItemCount
					delete info.LocalSecondaryIndexes[i].IndexArn
				}
			}
			return callback.apply( this, [ err, info, raw ] )
		})
	}

	Request.prototype.table = function($tableName) {
		this.tableName = $tableName;
		return this;
	}
	Request.prototype.on = function(eventName, callback ) {
		this.local_events[eventName] = callback
		return this
	}
	Request.prototype.select = function() {

		if (arguments.length === 1 && arguments[0] === DynamoDB.prototype.ALL_ATTRIBUTES ) {
			this.Select = 'ALL_ATTRIBUTES'
			return this
		}

		if (arguments.length === 1 && arguments[0] === DynamoDB.prototype.ALL_PROJECTED_ATTRIBUTES ) {
			this.Select = 'ALL_PROJECTED_ATTRIBUTES'
			return this
		}

		if (arguments.length === 1 && arguments[0] === DynamoDB.prototype.COUNT ) {
			this.Select = 'COUNT'
			return this
		}

		this.AttributesToGet = []

		if (arguments.length === 1 && (arguments[0] instanceof Array) ) {
			this.AttributesToGet = arguments[0]
			return this
		}

		for (var i = 0; i < arguments.length; i++)
			this.AttributesToGet.push(arguments[i])

		return this;
	}
	Request.prototype.return = function(rv) {
		this.ReturnValues = rv
		return this
	}
	Request.prototype.addSelect = function($field) {
		this.AttributesToGet.push($field)
		return this
	}

	Request.prototype.consistentRead = function( $value ) {
		if ($value === undefined ) {
			this.ConsistentRead = true
			return this
		}

		if ($value)
			this.ConsistentRead = true
		else
			this.ConsistentRead = false

		return this
	}
	Request.prototype.consistent_read = Request.prototype.consistentRead

	Request.prototype.return_consumed_capacity = function( $value ) { this.ReturnConsumedCapacity = $value; return this }
	Request.prototype.ReturnConsumedCapacity = Request.prototype.return_consumed_capacity

	Request.prototype.descending = function( ) {
		this.ScanIndexForward = false
		return this
	}
	Request.prototype.desc = Request.prototype.descending
	Request.prototype.index = function( $IndexName ) {
		this.IndexName = $IndexName
		return this
	}
	Request.prototype.order_by = Request.prototype.index

	Request.prototype.where = function($key,$value1,$value2) {
		if ($value1 === undefined ) {
			this.pendingKey = $key
			return this
		}

		if ($value2 === undefined) {
			this.whereKey[$key] = {'S' : $value1};

			if (typeof $value1 == "number")
				this.whereKey[$key] = {'N' : ($value1).toString() };

		} else {
			this.whereOther[$key] = {
				type: 'S',
				value: $value2,
				operator: $value1
			};
		}

		return this;
	}

	Request.prototype.insert = function(item, callback) {
		var $this = this

		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {
				$this.describeTable($this.tableName, function(err,data) {
					if (err)
						return reject(err)

					for (var i in data.Table.KeySchema ) {
						$this.if(data.Table.KeySchema[i].AttributeName).not_exists()
					}

					var $thisQuery = {
						TableName: $this.tableName,
						Item: DynamodbFactory.util.anormalizeItem(item),
						Expected: DynamodbFactory.util.buildExpected( $this.ifFilter ),
						ReturnConsumedCapacity: $this.ReturnConsumedCapacity,
						ReturnValues: $this.ReturnValues
					}

				if (typeof $this.local_events['beforeRequest'] === "function" )
						$this.local_events['beforeRequest']('putItem', $thisQuery)

					$this.routeCall('putItem', $thisQuery ,true, function(err,data) {
						if (err)
							return reject(err)

						fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
					})
				})
			})
		}

		this.describeTable(this.tableName, function(err,data) {
			if (err)
				return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

			for (var i in data.Table.KeySchema ) {
				this.if(data.Table.KeySchema[i].AttributeName).not_exists()
			}

			var $thisQuery = {
				TableName: this.tableName,
				Item: DynamodbFactory.util.anormalizeItem(item),
				Expected: DynamodbFactory.util.buildExpected( this.ifFilter ),
				ReturnConsumedCapacity: this.ReturnConsumedCapacity,
				ReturnValues: this.ReturnValues
			}

			if (typeof this.local_events['beforeRequest'] === "function" )
				this.local_events['beforeRequest']('putItem', $thisQuery)

			this.routeCall('putItem', $thisQuery ,true, function(err,data) {
				if (err)
					return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

				typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
			})
		})
	}

	// remember that replace should fail if item does not exist
	Request.prototype.replace = function(item, callback) {
		var $this = this
		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {
				$this.describeTable($this.tableName, function(err,data) {
					if (err)
						return reject(err)

					for (var i in data.Table.KeySchema ) {
						$this.if(data.Table.KeySchema[i].AttributeName).eq(item[ data.Table.KeySchema[i].AttributeName ])
					}

					var $thisQuery = {
						TableName: $this.tableName,
						Item: DynamodbFactory.util.anormalizeItem(item),
						Expected: DynamodbFactory.util.buildExpected( $this.ifFilter ),
						ReturnConsumedCapacity: $this.ReturnConsumedCapacity,
						ReturnValues: $this.ReturnValues
					}

					$this.routeCall('putItem', $thisQuery, true , function(err,data) {
						if (err)
							return reject(err)

						fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
					})
				})
			})
		}

		this.describeTable(this.tableName, function(err,data) {
			if (err)
				return callback(err, false)

			for (var i in data.Table.KeySchema ) {
				this.if(data.Table.KeySchema[i].AttributeName).eq(item[ data.Table.KeySchema[i].AttributeName ])
			}

			var $thisQuery = {
				TableName: this.tableName,
				Item: DynamodbFactory.util.anormalizeItem(item),
				Expected: DynamodbFactory.util.buildExpected( this.ifFilter ),
				ReturnConsumedCapacity: this.ReturnConsumedCapacity,
				ReturnValues: this.ReturnValues
			}

			this.routeCall('putItem', $thisQuery, true , function(err,data) {
				if (err)
					return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

				typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
			})
		})
	}

	Request.prototype.update = function($attrz, callback, $action ) {
		var $this = this

		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {

				$this.describeTable($this.tableName, function(err,data) {
					if (err)
						return reject(err)

					for (var i in data.Table.KeySchema ) {
						if (!$this.whereKey.hasOwnProperty(data.Table.KeySchema[i].AttributeName)) {
							// aws will throw: Uncaught ValidationException: The provided key element does not match the schema
							// we're throwing a more understandable error
							return reject({message: "Uncaught ValidationException: Missing value for Attribute '" + data.Table.KeySchema[i].AttributeName + "' in .where()" })
						} else {
							$this.if(data.Table.KeySchema[i].AttributeName).eq(DynamodbFactory.util.normalizeItem({key: $this.whereKey[ data.Table.KeySchema[i].AttributeName ]}).key )
						}
					}

					var $to_update = {}
					for (var $k in $attrz) {
						if ($attrz.hasOwnProperty($k)) {
							if ($attrz[$k] === undefined ) {
								$to_update[$k] = {
									Action: $action ? $action : 'DELETE',
								}
							} else if ($attrz[$k] instanceof DynamoDB.Raw) {
								$to_update[$k] = $attrz[$k].getRawData()
							} else {
								$to_update[$k] = {
									Action: $action ? $action : 'PUT',
									Value: DynamodbFactory.util.stringify($attrz[$k])
								}
							}
						}
					}
					//this.buildConditionExpression()
					var $thisQuery = {
						TableName: $this.tableName,
						Key: $this.whereKey,

						Expected: DynamodbFactory.util.buildExpected( $this.ifFilter ),

						//ConditionExpression: $this.ConditionExpression,
						//ExpressionAttributeNames: $this.ExpressionAttributeNames,
						//ExpressionAttributeValues: $this.ExpressionAttributeValues,

						//UpdateExpression
						AttributeUpdates : $to_update,

						ReturnConsumedCapacity: $this.ReturnConsumedCapacity,
						ReturnValues: $this.ReturnValues,

					}

					if (typeof $this.local_events['beforeRequest'] === "function" )
						$this.local_events['beforeRequest']('updateItem', $thisQuery)

					$this.routeCall('updateItem', $thisQuery, true , function(err,data) {
						if (err)
							return reject(err)

						fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
					})
				})
			})
		}

		this.describeTable(this.tableName, function(err,data) {
			if (err)
				return typeof callback !== "function" ? null : callback(err, false)

			for (var i in data.Table.KeySchema ) {
				if (!this.whereKey.hasOwnProperty(data.Table.KeySchema[i].AttributeName)) {
					// aws will throw: Uncaught ValidationException: The provided key element does not match the schema
					// we're throwing a more understandable error
					typeof callback !== "function" ? null : callback.apply( this, [{message: "Uncaught ValidationException: Missing value for Attribute '" + data.Table.KeySchema[i].AttributeName + "' in .where()" }])
				} else {
					this.if(data.Table.KeySchema[i].AttributeName).eq(DynamodbFactory.util.normalizeItem({key: this.whereKey[ data.Table.KeySchema[i].AttributeName ]}).key )
				}

			}

			var $to_update = {}
			for (var $k in $attrz) {
				if ($attrz.hasOwnProperty($k)) {
					if ($attrz[$k] === undefined ) {
						$to_update[$k] = {
							Action: $action ? $action : 'DELETE',
						}
					} else if ($attrz[$k] instanceof DynamoDB.Raw) {
						$to_update[$k] = $attrz[$k].getRawData()
					} else {
						$to_update[$k] = {
							Action: $action ? $action : 'PUT',
							Value: DynamodbFactory.util.stringify($attrz[$k])
						}
					}
				}
			}
			//this.buildConditionExpression()
			var $thisQuery = {
				TableName: this.tableName,
				Key: this.whereKey,


				Expected: DynamodbFactory.util.buildExpected( this.ifFilter ),

				//ConditionExpression: this.ConditionExpression,
				//ExpressionAttributeNames: this.ExpressionAttributeNames,
				//ExpressionAttributeValues: this.ExpressionAttributeValues,

				//UpdateExpression
				AttributeUpdates : $to_update,

				ReturnConsumedCapacity: this.ReturnConsumedCapacity,
				ReturnValues: this.ReturnValues,

			}

			if (typeof this.local_events['beforeRequest'] === "function" )
				this.local_events['beforeRequest']('updateItem', $thisQuery)

			this.routeCall('updateItem', $thisQuery, true , function(err,data) {
				if (err)
					return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

				typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
			})
		})
	}

	Request.prototype.insert_or_update = function( params, callback, $action ) {
		var $this = this
		var $attrz = DynamodbFactory.util.clone( params )

		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {

				$this.describeTable($this.tableName, function(err,data) {
					if (err)
						return reject(err)

					// extract the hash/range keys
					for (var i in data.Table.KeySchema ) {
						$this.where(data.Table.KeySchema[i].AttributeName).eq( $attrz[data.Table.KeySchema[i].AttributeName])
						delete $attrz[data.Table.KeySchema[i].AttributeName]
					}
					var $to_update = {}
					for (var $k in $attrz) {
						if ($attrz.hasOwnProperty($k)) {
							if ($attrz[$k] === undefined ) {
								$to_update[$k] = {
									Action: $action ? $action : 'DELETE',
								}
							} else if ($attrz[$k] instanceof DynamoDB.Raw) {
								$to_update[$k] = $attrz[$k].getRawData()
							} else {
								$to_update[$k] = {
									Action: $action ? $action : 'PUT',
									Value: DynamodbFactory.util.stringify($attrz[$k])
								}
							}
						}
					}
					var $thisQuery = {
						TableName: $this.tableName,
						Key: $this.whereKey,
						AttributeUpdates : $to_update,
						ReturnConsumedCapacity: $this.ReturnConsumedCapacity,
						ReturnValues: $this.ReturnValues
					}
					$this.routeCall('updateItem', $thisQuery, true , function(err,data) {
						if (err)
							return reject(err)

						fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
					})
				})
			})
		}



		this.describeTable(this.tableName, function(err,data) {
			if (err)
				return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

			// extract the hash/range keys
			for (var i in data.Table.KeySchema ) {
				this.where(data.Table.KeySchema[i].AttributeName).eq( $attrz[data.Table.KeySchema[i].AttributeName])
				delete $attrz[data.Table.KeySchema[i].AttributeName]
			}
			var $to_update = {}
			for (var $k in $attrz) {
				if ($attrz.hasOwnProperty($k)) {
					if ($attrz[$k] === undefined ) {
						$to_update[$k] = {
							Action: $action ? $action : 'DELETE',
						}
					} else if ($attrz[$k] instanceof DynamoDB.Raw) {
						$to_update[$k] = $attrz[$k].getRawData()
					} else {
						$to_update[$k] = {
							Action: $action ? $action : 'PUT',
							Value: DynamodbFactory.util.stringify($attrz[$k])
						}
					}
				}
			}
			var $thisQuery = {
				TableName: this.tableName,
				Key: this.whereKey,
				AttributeUpdates : $to_update,
				ReturnConsumedCapacity: this.ReturnConsumedCapacity,
				ReturnValues: this.ReturnValues
			}
			this.routeCall('updateItem', $thisQuery, true , function(err,data) {
				if (err)
					return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

				typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
			})
		})
	}

	Request.prototype.insert_or_replace = function( item, callback ) {
		var $this = this

		var $thisQuery = {
			TableName: this.tableName,
			Item: DynamodbFactory.util.anormalizeItem(item),
			ReturnConsumedCapacity: this.ReturnConsumedCapacity,
			ReturnValues: this.ReturnValues
		}

		if (typeof this.local_events['beforeRequest'] === "function" )
			this.local_events['beforeRequest']('putItem', $thisQuery)

		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {
				$this.routeCall('putItem', $thisQuery , true, function(err,data) {
					if (err)
						return reject(err)

					fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
				})
			})
		}

		this.routeCall('putItem', $thisQuery , true , function(err,data) {
			if (err)
				return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

			typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
		})
	}

	Request.prototype.delete = function($attrz, callback ) {
		var $this = this

		if ( arguments.length === 0) {
			var $thisQuery = {
				TableName: this.tableName,
				Key: this.whereKey,
				ReturnConsumedCapacity: this.ReturnConsumedCapacity,
				ReturnValues: this.ReturnValues
			}
			return new Promise(function(fullfill, reject) {
				$this.routeCall('deleteItem', $thisQuery , true, function(err,data) {
					if (err)
						return reject(err)

					fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
				})
			})
		} else if (typeof $attrz == 'function') {
			// delete entire item, $attrz is actually the callback

			var $thisQuery = {
				TableName: this.tableName,
				Key: this.whereKey,
				ReturnConsumedCapacity: this.ReturnConsumedCapacity,
				ReturnValues: this.ReturnValues
			}
			this.routeCall('deleteItem', $thisQuery, true , function(err,data) {
				if (err)
					return $attrz.apply( this, [ err, false ] )

				$attrz.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
			})
		} else {
			// delete attributes
			var $to_delete = {};
			for (var $i = 0; $i < $attrz.length;$i++) {
				$to_delete[$attrz[$i]] = {
					Action: 'DELETE'
				}
			}
			var $thisQuery = {
				TableName: this.tableName,
				Key: this.whereKey,
				AttributeUpdates : $to_delete,
				ReturnConsumedCapacity: this.ReturnConsumedCapacity,
				ReturnValues: this.ReturnValues
			}
			this.routeCall('updateItem', $thisQuery , true , function(err,data) {
				if (err)
					return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

				typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
			})
		}
	}

	Request.prototype.get = function(callback) {
		var $this = this
		this.buildProjectionExpression() // this will set ProjectionExpression and ExpressionAttributeNames
		var $thisQuery = {
			TableName: this.tableName,
			Key: this.whereKey,
			ConsistentRead: this.ConsistentRead,
			ReturnConsumedCapacity: this.ReturnConsumedCapacity,

			ProjectionExpression: this.ProjectionExpression,
			ExpressionAttributeNames: this.ExpressionAttributeNames,
		}

		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {
				$this.routeCall('getItem', $thisQuery , true, function(err,data) {
					if (err)
						return reject(err)

					fullfill(DynamodbFactory.util.parse({ M : data.Item || {} }))
				})
			})
		}


		this.routeCall('getItem', $thisQuery , true, function(err,data) {
			if (err)
				return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

			typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.parse({ M : data.Item || {} }) ,data ])
		})
	}

	Request.prototype.query = function(callback) {
		var $this = this

		if ( this.KeyConditionExpression === undefined )
			this.buildKeyConditionExpression() // will set KeyConditionExpression, ExpressionAttributeNames, ExpressionAttributeValues

		if ( this.ProjectionExpression === undefined )
			this.buildProjectionExpression() // will set ProjectionExpression, ExpressionAttributeNames

		if ( this.FilterExpression === undefined )
			this.buildFilterExpression() // will set FilterExpression, ExpressionAttributeNames, ExpressionAttributeValues

		var $thisQuery = {
			TableName: this.tableName,

			KeyConditionExpression: this.KeyConditionExpression,

			ConsistentRead: this.ConsistentRead,
			ReturnConsumedCapacity: this.ReturnConsumedCapacity,

			"Select": this.Select !== null ? this.Select : undefined,
			//AttributesToGet: this.AttributesToGet.length ? this.AttributesToGet : undefined

			ProjectionExpression: this.ProjectionExpression,
			ExpressionAttributeNames: this.ExpressionAttributeNames,

			FilterExpression: this.FilterExpression,

			ExpressionAttributeValues: this.ExpressionAttributeValues,
		}
		if (this.limit_value !== null)
			$thisQuery['Limit'] = this.limit_value;

		if (this.ScanIndexForward !== true) {
				$thisQuery['ScanIndexForward'] = false;
		}
		if ( this.IndexName !== null )
			$thisQuery['IndexName'] = this.IndexName;

		if ( this.ExclusiveStartKey !== null )
			$thisQuery['ExclusiveStartKey'] = this.ExclusiveStartKey;

		if (typeof this.local_events['beforeRequest'] === "function" )
			this.local_events['beforeRequest']('updateItem', $thisQuery)

		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {
				$this.routeCall('query', $thisQuery , true, function(err,data) {
					if (err)
						return reject(err)

					fullfill(
						DynamodbFactory.util.parse({ L:
							(data.Items || []).map(function(item) { return {'M': item } })
						} )
					)
				})
			})
		}

		this.routeCall('query', $thisQuery , true , function(err,data) {
			if (err)
				return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

			this.LastEvaluatedKey = data.LastEvaluatedKey === undefined ? null : data.LastEvaluatedKey

			typeof callback !== "function" ? null : callback.apply( this, [ err,

				DynamodbFactory.util.parse({ L:
					(data.Items || []).map(function(item) { return {'M': item } })
				} )
			, data ])
		})

		return this
	}

	Request.prototype.scan = function( callback ) {
		var $this = this

		if ( this.ProjectionExpression === undefined )
			this.buildProjectionExpression() // this will set ProjectionExpression and ExpressionAttributeNames

		this.buildFilterExpression()
		var $thisQuery = {
			TableName: this.tableName,
			"Select": this.Select !== null ? this.Select : undefined,

			ProjectionExpression: this.ProjectionExpression,
			ExpressionAttributeNames: this.ExpressionAttributeNames,

			FilterExpression: this.FilterExpression,

			ExpressionAttributeValues: this.ExpressionAttributeValues,

			ReturnConsumedCapacity: this.ReturnConsumedCapacity
		}

		if (this.limit_value !== null)
			$thisQuery['Limit'] = this.limit_value;


		if ( this.ExclusiveStartKey !== null )
			$thisQuery['ExclusiveStartKey'] = this.ExclusiveStartKey;

		if ( this.IndexName !== null )
			$thisQuery['IndexName'] = this.IndexName;

		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {
				$this.routeCall('scan', $thisQuery , true, function(err,data) {
					if (err)
						return reject(err)

					fullfill(
						DynamodbFactory.util.parse({ L:
							(data.Items || []).map(function(item) { return {'M': item } })
						} )
					)
				})
			})
		}

		this.routeCall('scan', $thisQuery, true , function(err,data) {
			if (err)
				return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

			this.LastEvaluatedKey = data.LastEvaluatedKey === undefined ? null : data.LastEvaluatedKey

			typeof callback !== "function" ? null : callback.apply( this, [ err,
				DynamodbFactory.util.parse({ L:
					(data.Items || []).map(function(item) { return {'M': item } })
				} )
			, data ])

		})
	}

	Request.prototype.sql = function( sql, callback ) {
		var $this = this;

		var sqp;
		try {
			sqp = sqlparser.parse( sql );
		} catch(err){
			return callback(err)
		}

		if (sqp.length > 1)
			return callback( { errorCode: 'UNSUPPORTED_MULTIQUERY', errorMessage: '[AWSPILOT] Multiple queries not supported, yet!' } )

		sqp = sqp[0];

		if (typeof callback !== "function") {
			return new Promise(function(fullfill, reject) {
				switch (sqp.statement) {

					case 'DESCRIBE_TABLE':

						if (typeof $this.local_events['beforeRequest'] === "function" )
							$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

						$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
							if (err)
								return reject(err)

							fullfill(DynamodbFactory.util.normalizeItem(data.Table || {}))
						})

						break;

					case 'CREATE_TABLE':

						if (typeof $this.local_events['beforeRequest'] === "function" )
							$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

						$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
							if (err)
								return reject(err)

							fullfill(data.TableDescription || [])
						})

						break;

					case 'SHOW_TABLES':

						if (typeof $this.local_events['beforeRequest'] === "function" )
							$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

						$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
							if (err)
								return reject(err)

							fullfill(data.TableNames || [])
						})

						break;

					case 'BATCHINSERT':

						if (typeof $this.local_events['beforeRequest'] === "function" )
							$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

						$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
							if (err)
								return reject(err)

							fullfill(data)
						})

						break;
					case 'INSERT':
						$this.describeTable(sqp.dynamodb.TableName, function(err,data) {
							if (err)
								return reject(err)

							for (var i in data.Table.KeySchema ) {
								$this.if(data.Table.KeySchema[i].AttributeName).not_exists()
							}

							sqp.dynamodb.Expected = DynamodbFactory.util.buildExpected( $this.ifFilter )

							if (typeof $this.local_events['beforeRequest'] === "function" )
								$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

							$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
								if (err)
									return reject(err)

								fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
							})
						})
						break;
					case 'UPDATE':
						$this.describeTable(sqp.dynamodb.TableName, function(err,data) {
							if (err)
								return reject(err)

							if (Object.keys(sqp.dynamodb.Expected).length !== Object.keys(data.Table.KeySchema).length)
								return reject( { errorCode: 'WHERE_SCHEMA_INVALID' } )

							for (var i in data.Table.KeySchema ) {
								if (! sqp.dynamodb.Expected.hasOwnProperty(data.Table.KeySchema[i].AttributeName))
									return reject( { errorCode: 'WHERE_SCHEMA_INVALID' } )
							}

							if (typeof $this.local_events['beforeRequest'] === "function" )
								$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

							$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
								if (err)
									return reject(err)

								fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
							})

						})
						break
					case 'REPLACE':
					case 'DELETE':

						if (typeof $this.local_events['beforeRequest'] === "function" )
							$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

						$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
							if (err)
								return reject(err)

							fullfill(DynamodbFactory.util.normalizeItem(data.Attributes || {}))
						})

						break;
					case 'SELECT':
					case 'SCAN':

						if (typeof $this.local_events['beforeRequest'] === "function" )
							$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

						$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
							if (err)
								return reject(err)

							this.LastEvaluatedKey = data.LastEvaluatedKey === undefined ? null : data.LastEvaluatedKey

							fullfill(
								DynamodbFactory.util.parse({ L:
									(data.Items || []).map(function(item) { return {'M': item } })
								} )
							)
						})
						break;
					case 'DROP_TABLE':
					case 'DROP_INDEX':

						if (typeof $this.local_events['beforeRequest'] === "function" )
							$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

						$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
							if (err)
								return reject(err)

							fullfill(data.TableDescription || [])
						})
						break;
					default:
						reject({ errorCode: 'UNSUPPORTED_QUERY_TYPE' })
				}

			})
		}


		switch (sqp.statement) {
			case 'DESCRIBE_TABLE':
				if (typeof this.local_events['beforeRequest'] === "function" )
					this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

				this.routeCall(sqp.operation, sqp.dynamodb ,true, function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					typeof callback !== "function" ? null : callback.apply( this, [ err, data.Table , data ])
				})
				break;

			case 'SHOW_TABLES':
				if (typeof this.local_events['beforeRequest'] === "function" )
					this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

				this.routeCall(sqp.operation, sqp.dynamodb ,true, function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					typeof callback !== "function" ? null : callback.apply( this, [ err, data.TableNames , data ])
				})
				break;

			case 'CREATE_TABLE':
				if (typeof this.local_events['beforeRequest'] === "function" )
					this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

				this.routeCall(sqp.operation, sqp.dynamodb ,true, function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					typeof callback !== "function" ? null : callback.apply( this, [ err, data.TableDescription , data ])
				})
				break;

			case 'BATCHINSERT':
				if (typeof this.local_events['beforeRequest'] === "function" )
					this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

				this.routeCall(sqp.operation, sqp.dynamodb ,true, function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					typeof callback !== "function" ? null : callback.apply( this, [ err, data, data ])
				})
				break;
			case 'INSERT':

				this.describeTable(sqp.dynamodb.TableName, function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					for (var i in data.Table.KeySchema ) {
						this.if(data.Table.KeySchema[i].AttributeName).not_exists()
					}

					sqp.dynamodb.Expected = DynamodbFactory.util.buildExpected( this.ifFilter )

					if (typeof this.local_events['beforeRequest'] === "function" )
						this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

					this.routeCall(sqp.operation, sqp.dynamodb ,true, function(err,data) {
						if (err)
							return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

						typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
					})

				})

				break;
			case 'UPDATE':

				this.describeTable(sqp.dynamodb.TableName, function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					if (Object.keys(sqp.dynamodb.Expected).length !== Object.keys(data.Table.KeySchema).length)
						return callback( { errorCode: 'WHERE_SCHEMA_INVALID' } )

					for (var i in data.Table.KeySchema ) {
						if (! sqp.dynamodb.Expected.hasOwnProperty(data.Table.KeySchema[i].AttributeName))
							return callback( { errorCode: 'WHERE_SCHEMA_INVALID' } )
					}

					if (typeof this.local_events['beforeRequest'] === "function" )
						this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

					this.routeCall(sqp.operation, sqp.dynamodb ,true, function(err,data) {
						if (err)
							return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

						typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
					})

				})
				break;
			case 'REPLACE':
			case 'DELETE':

				if (typeof this.local_events['beforeRequest'] === "function" )
					this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

				this.routeCall(sqp.operation, sqp.dynamodb ,true, function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					typeof callback !== "function" ? null : callback.apply( this, [ err, DynamodbFactory.util.normalizeItem(data.Attributes || {}), data ])
				})

				break;
			case 'SELECT':
			case 'SCAN':

				if (typeof this.local_events['beforeRequest'] === "function" )
					this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

				this.routeCall(sqp.operation, sqp.dynamodb, true , function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					this.LastEvaluatedKey = data.LastEvaluatedKey === undefined ? null : data.LastEvaluatedKey

					typeof callback !== "function" ? null : callback.apply( this, [ err,
						data.Explain ? data.Explain :
							DynamodbFactory.util.parse({ L:
								(data.Items || []).map(function(item) { return {'M': item } })
							} )
					, data ])

				})
				break;
			case 'DROP_TABLE':
			case 'DROP_INDEX':

				if (typeof $this.local_events['beforeRequest'] === "function" )
					$this.local_events['beforeRequest'](sqp.operation, sqp.dynamodb)

				$this.routeCall( sqp.operation, sqp.dynamodb ,true, function(err,data) {
					if (err)
						return typeof callback !== "function" ? null : callback.apply( this, [ err, false ] )

					typeof callback !== "function" ? null : callback.apply( this, [ err,
						data.TableDescription
					, data ])
				})
				break;
			case 'SCAN_DUMP_STREAM':

				const Readable = require('stream').Readable;
				const inStream = new Readable({
						//objectMode: true,
						read: function(size) {}
				});

				if (typeof callback === "function") {
					callback(null, inStream)
				} else {
					return inStream;
				}

				;(function recursive_call( $lastKey ) {
					sqp.dynamodb.ExclusiveStartKey = $lastKey;
					$this.routeCall('scan', sqp.dynamodb, true , function(err,data) {

						if (err) {
							inStream.emit('error', err)
							inStream.push(null)
							return;
						}

						data.Items.map(function(d) {
							inStream.push( "INSERT INTO `" + sqp.dynamodb.TableName + "` VALUES (" + DynamodbFactory.util.toSQLJSON(d) + ")\n")
						});

						if (!data.LastEvaluatedKey) {
							// reached end
							inStream.push(null)
							return;
						}

						var $this = this
						//setTimeout(function() {
							recursive_call(data.LastEvaluatedKey);
						//},100);

					})
				})(null);

				break;
			default:
				return callback({ errorCode: 'UNSUPPORTED_QUERY_TYPE' })
				break;
		}
	}

	Request.prototype.resume = function( from ) {
		this.ExclusiveStartKey = from
		return this
	}
	Request.prototype.compare = function( $comparison, $value , $value2 ) {
		if (this.pendingFilter !== null) {
			this.whereFilter[this.pendingFilter] = {
				operator: $comparison,
				type: DynamodbFactory.util.anormalizeType($value),
				value: $value,
				value2: $value2
			}
			this.whereFilterExpression.push({
				attribute: this.pendingFilter,
				operator: $comparison,
				type: DynamodbFactory.util.anormalizeType($value),
				value: $value,
				value2: $value2
			})
			this.pendingFilter = null
			return this
		}

		if (this.pendingIf !== null) {
			if ($comparison == 'EQ') {
				this.ifFilter[this.pendingIf] = new DynamodbFactory.util.Raw({ Exists: true, Value: DynamodbFactory.util.stringify($value) })
			} else {
				this.ifFilter[this.pendingIf] = { operator: $comparison, type: DynamodbFactory.util.anormalizeType($value), value: $value, value2: $value2 }
			}

			this.ifConditionExpression.push({
				attribute: this.pendingIf,
				operator: $comparison,
				type: DynamodbFactory.util.anormalizeType($value),
				value: $value,
				value2: $value2
			})

			this.pendingIf = null
			return this
		}

		this.whereOther[this.pendingKey] = { operator: $comparison, type: DynamodbFactory.util.anormalizeType($value), value: $value, value2: $value2 }
		this.pendingKey = null
		return this
	}

	Request.prototype.filter = function($key) {
		this.pendingFilter = $key
		return this
	}
	// alias
	Request.prototype.having = Request.prototype.filter

	Request.prototype.if = function($key) {
		this.pendingIf = $key
		return this
	}

	Request.prototype.limit = function($limit) {
		this.limit_value = $limit;
		return this;
	}

	// comparison functions
	Request.prototype.eq = function( $value ) {
		if (this.pendingFilter !== null)
			return this.compare( 'EQ', $value )

		if (this.pendingIf !== null)
			return this.compare( 'EQ', $value )

		this.whereKey[this.pendingKey] = DynamodbFactory.util.stringify( $value )

		this.pendingKey = null

		return this
	}
	Request.prototype.le = function( $value ) {
		return this.compare( 'LE', $value )
	}
	Request.prototype.lt = function( $value ) {
		return this.compare( 'LT', $value )
	}
	Request.prototype.ge = function( $value ) {
		return this.compare( 'GE', $value )
	}
	Request.prototype.gt = function( $value ) {
		return this.compare( 'GT', $value )
	}
	Request.prototype.begins_with = function( $value ) {
		return this.compare( 'BEGINS_WITH', $value )
	}
	Request.prototype.between = function( $value1, $value2 ) {
		return this.compare( 'BETWEEN', $value1, $value2 )
	}

	// QueryFilter only
	Request.prototype.ne = function( $value ) {
		return this.compare( 'NE', $value )
	}
	Request.prototype.not_null = function( ) {
		return this.compare( 'NOT_NULL' )
	}
	Request.prototype.defined = Request.prototype.not_null
	Request.prototype.null = function( $value ) {
		return this.compare( 'NULL' )
	}
	Request.prototype.undefined = Request.prototype.null
	Request.prototype.contains = function( $value ) {
		return this.compare( 'CONTAINS', $value )
	}
	Request.prototype.not_contains = function( $value ) {
		return this.compare( 'NOT_CONTAINS', $value )
	}
	Request.prototype.in = function( $value ) {
		return this.compare( 'IN', $value )
	}

	// Expected only
	Request.prototype.exists = function( ) {
		if (this.pendingIf !== null) {
			this.ifFilter[this.pendingIf] = new DynamodbFactory.util.Raw({ Exists: true })

			this.pendingIf = null
			return this
		}
		return this
	}
	Request.prototype.not_exists = function( ) {
		if (this.pendingIf !== null) {
			this.ifFilter[this.pendingIf] = new DynamodbFactory.util.Raw({ Exists: false })
			this.pendingIf = null
			return this
		}
		return this
	}

	// helper functions ...

	Request.prototype.registerExpressionAttributeName = function(item, ALLOW_DOT ) {
		var $this = this

		if ($this.ExpressionAttributeNames === undefined)
			$this.ExpressionAttributeNames = {}



		if (!ALLOW_DOT)
			return DynamodbFactory.util.expression_name_split(item).map(function(original_attName) {

				var attName =  original_attName.split('-').join('_minus_').split('.').join('_dot_') // "-","." not allowed
				var attSpecialName = '#' + attName


				if (attName.indexOf('[') !== -1) {
					attSpecialName = attName.split('[').map(function(v) {
						if (v[v.length-1] == ']')
							return v

						$this.ExpressionAttributeNames[ '#'+v ] = v
						return '#' + v
					}).join('[')
				} else {
					if (attSpecialName[0] === '#')
						$this.ExpressionAttributeNames[ attSpecialName ] = original_attName
				}

				return attSpecialName
			}).join('.')


		//if (ALLOW_DOT)
		var original_attName = item
		var attName =  original_attName.split('-').join('_minus_').split('.').join('_dot_') // "-","." not allowed

		var attSpecialName = '#' + attName


		if (attName.indexOf('[') !== -1) {
			attSpecialName = attName.split('[').map(function(v) {
				if (v[v.length-1] == ']')
					return v

				$this.ExpressionAttributeNames[ '#'+v ] = v
				return '#' + v
			}).join('[')
		} else {
			if (attSpecialName[0] === '#')
				$this.ExpressionAttributeNames[ attSpecialName ] = original_attName
		}

		return attSpecialName

	}
	Request.prototype.registerExpressionAttributeValue = function(original_attName, value) {
		if (this.ExpressionAttributeValues === undefined)
			this.ExpressionAttributeValues = {}

		var attName = original_attName.split('-').join('_minus_').split('"').join("_quote_") // "-" not allowed

		var attNameValue = ':' + attName.split('.').join('_').split('[').join('_idx_').split(']').join('')

		var attNameValueVersion = 1;
		while (this.ExpressionAttributeValues.hasOwnProperty(attNameValue+'_v'+attNameValueVersion)) attNameValueVersion++

		this.ExpressionAttributeValues[attNameValue+'_v'+attNameValueVersion] = DynamodbFactory.util.stringify( value )

		return attNameValue+'_v'+attNameValueVersion
	}

	Request.prototype.buildProjectionExpression = function() {
		if (!this.AttributesToGet.length)
			return

		var $this = this

		this.ProjectionExpression = this.AttributesToGet.map(function(item) {
			return $this.registerExpressionAttributeName(item)
		}).join(', ')
	}

	//
	Request.prototype.buildKeyConditionExpression = function(idx) {
		var $this = this
		var ret = []
		this.KeyConditionExpression = Object.keys(this.whereKey).map(function(key) {
			return $this.registerExpressionAttributeName(key, true ) + ' ' +
				'=' + ' ' +
				$this.registerExpressionAttributeValue(key, DynamodbFactory.util.normalizeItem({value: $this.whereKey[key] }).value, true )
		}).concat(
			Object.keys(this.whereOther).map(function(key) {
				var whereFilter = $this.whereOther[key]

				switch (filterOperators[whereFilter.operator]) {
					case '=':
					case '<':
					case '<=':
					case '>':
					case '>=':
						return $this.registerExpressionAttributeName(key, true ) + ' ' +
							filterOperators[whereFilter.operator] + ' ' +
							$this.registerExpressionAttributeValue(key, whereFilter.value, true )
						break

					case  'BETWEEN':
						return $this.registerExpressionAttributeName(key, true ) + ' BETWEEN ' +
							$this.registerExpressionAttributeValue(key+'_1', whereFilter.value, true ) +
							' AND ' +
							$this.registerExpressionAttributeValue(key+'_2', whereFilter.value2, true )
						break;

					case 'begins_with':
						return 'begins_with(' + $this.registerExpressionAttributeName(key, true ) + ', ' + $this.registerExpressionAttributeValue(key, whereFilter.value, true ) + ')'
						break;

				}
			})
		).map(function(v) { return '( ' + v + ' )'}).join(" AND \n")
	}

	Request.prototype.buildFilterExpression = function(idx) {
		var $this = this

		if (!this.whereFilterExpression.length)
			return

		var ret = []
		this.FilterExpression = this.whereFilterExpression.map(function(whereFilter) {
			var key = whereFilter.attribute

			switch (filterOperators[whereFilter.operator]) {
				case '=':
				case '<>':
				case '<':
				case '<=':
				case '>':
				case '>=':
					return $this.registerExpressionAttributeName(whereFilter.attribute) + ' ' +
						filterOperators[whereFilter.operator] + ' ' +
						$this.registerExpressionAttributeValue(whereFilter.attribute, whereFilter.value)
					break

				case  'BETWEEN':
					return $this.registerExpressionAttributeName(whereFilter.attribute) + ' BETWEEN ' +
						$this.registerExpressionAttributeValue(whereFilter.attribute+'_1', whereFilter.value) +
						' AND ' +
						$this.registerExpressionAttributeValue(whereFilter.attribute+'_2', whereFilter.value2)
					break;

				case 'IN':
					return $this.registerExpressionAttributeName(whereFilter.attribute) + ' IN (' +
							whereFilter.value.map(function(v, idx) {
								return $this.registerExpressionAttributeValue(whereFilter.attribute+'_' + idx, v)
							}).join(',')  +
						' )'
					break;


				case 'attribute_exists':
					return 'attribute_exists(' + $this.registerExpressionAttributeName(whereFilter.attribute) + ')'
					break;

				case 'attribute_not_exists':
					return 'attribute_not_exists(' + $this.registerExpressionAttributeName(whereFilter.attribute) + ')'
					break;

				case 'begins_with':
					return 'begins_with(' + $this.registerExpressionAttributeName(whereFilter.attribute) + ', ' + $this.registerExpressionAttributeValue(whereFilter.attribute, whereFilter.value) + ')'
					break;

				case 'contains':
					return 'contains(' + $this.registerExpressionAttributeName(whereFilter.attribute) + ', ' + $this.registerExpressionAttributeValue(whereFilter.attribute, whereFilter.value) + ')'
					break;

				case 'not_contains':
					return 'NOT contains(' + $this.registerExpressionAttributeName(whereFilter.attribute) + ', ' + $this.registerExpressionAttributeValue(whereFilter.attribute, whereFilter.value) + ')'
					break;
				//attribute_type (path, type)
				//size (path)
			}
		}).map(function(v) { return '( ' + v + ' )'}).join(" AND \n")
	}


	// RAW functions, used by dynamodb-sql
	Request.prototype.RawIndexName = function( value ) {
		this.IndexName = value
		return this
	}
	Request.prototype.RawScanIndexForward = function( value ) {
		this.ScanIndexForward = value
		return this
	}
	Request.prototype.RawLimit = function( value ) {
		this.limit_value = value
		return this
	}
	Request.prototype.RawConsistentRead = function( value ) {
		this.ConsistentRead = value
		return this
	}
	Request.prototype.RawKeyConditionExpression = function( value ) {
		this.KeyConditionExpression = value
		return this
	}
	Request.prototype.RawExpressionAttributeNames = function( value ) {
		this.ExpressionAttributeNames = value
		return this
	}
	Request.prototype.RawExpressionAttributeValues = function( value ) {
		this.ExpressionAttributeValues = value
		return this
	}
	Request.prototype.RawProjectionExpression = function( value ) {
		this.ProjectionExpression = value
		return this
	}
	Request.prototype.RawFilterExpression = function( value ) {
		this.FilterExpression = value
		return this
	}


DynamoDB.Raw = function(data) {
	this.data = data
}
DynamoDB.Raw.prototype.getRawData = function() {
	return this.data
}
module.exports = DynamodbFactory;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./batch":2,"./sqlparser.js":4,"@awspilot/dynamodb-util":5,"aws-sdk/clients/dynamodb":18,"stream":137}],4:[function(require,module,exports){
(function (process,Buffer){
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,21],$V2=[1,20],$V3=[1,24],$V4=[1,23],$V5=[1,17],$V6=[1,19],$V7=[1,28],$V8=[1,27],$V9=[1,22],$Va=[1,18],$Vb=[5,6],$Vc=[5,6,50,329],$Vd=[1,37],$Ve=[1,38],$Vf=[1,377],$Vg=[1,581],$Vh=[1,231],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,61],$VC=[1,62],$VD=[1,63],$VE=[1,64],$VF=[1,65],$VG=[1,66],$VH=[1,67],$VI=[1,68],$VJ=[1,69],$VK=[1,70],$VL=[1,71],$VM=[1,72],$VN=[1,73],$VO=[1,74],$VP=[1,75],$VQ=[1,76],$VR=[1,77],$VS=[1,78],$VT=[1,79],$VU=[1,80],$VV=[1,81],$VW=[1,82],$VX=[1,83],$VY=[1,84],$VZ=[1,85],$V_=[1,86],$V$=[1,87],$V01=[1,88],$V11=[1,89],$V21=[1,90],$V31=[1,91],$V41=[1,92],$V51=[1,93],$V61=[1,94],$V71=[1,95],$V81=[1,96],$V91=[1,97],$Va1=[1,98],$Vb1=[1,99],$Vc1=[1,100],$Vd1=[1,101],$Ve1=[1,102],$Vf1=[1,103],$Vg1=[1,104],$Vh1=[1,105],$Vi1=[1,106],$Vj1=[1,107],$Vk1=[1,108],$Vl1=[1,109],$Vm1=[1,110],$Vn1=[1,111],$Vo1=[1,112],$Vp1=[1,113],$Vq1=[1,114],$Vr1=[1,115],$Vs1=[1,116],$Vt1=[1,117],$Vu1=[1,118],$Vv1=[1,119],$Vw1=[1,120],$Vx1=[1,121],$Vy1=[1,122],$Vz1=[1,123],$VA1=[1,124],$VB1=[1,125],$VC1=[1,126],$VD1=[1,127],$VE1=[1,128],$VF1=[1,129],$VG1=[1,130],$VH1=[1,131],$VI1=[1,132],$VJ1=[1,133],$VK1=[1,134],$VL1=[1,135],$VM1=[1,136],$VN1=[1,137],$VO1=[1,138],$VP1=[1,139],$VQ1=[1,140],$VR1=[1,141],$VS1=[1,142],$VT1=[1,143],$VU1=[1,144],$VV1=[1,145],$VW1=[1,146],$VX1=[1,147],$VY1=[1,148],$VZ1=[1,149],$V_1=[1,150],$V$1=[1,151],$V02=[1,152],$V12=[1,153],$V22=[1,154],$V32=[1,155],$V42=[1,156],$V52=[1,157],$V62=[1,158],$V72=[1,159],$V82=[1,160],$V92=[1,161],$Va2=[1,162],$Vb2=[1,163],$Vc2=[1,164],$Vd2=[1,165],$Ve2=[1,166],$Vf2=[1,167],$Vg2=[1,168],$Vh2=[1,169],$Vi2=[1,170],$Vj2=[1,171],$Vk2=[1,172],$Vl2=[1,173],$Vm2=[1,174],$Vn2=[1,175],$Vo2=[1,176],$Vp2=[1,177],$Vq2=[1,178],$Vr2=[1,179],$Vs2=[1,180],$Vt2=[1,181],$Vu2=[1,182],$Vv2=[1,183],$Vw2=[1,184],$Vx2=[1,185],$Vy2=[1,186],$Vz2=[1,187],$VA2=[1,188],$VB2=[1,189],$VC2=[1,190],$VD2=[1,191],$VE2=[1,192],$VF2=[1,193],$VG2=[1,194],$VH2=[1,195],$VI2=[1,196],$VJ2=[1,197],$VK2=[1,198],$VL2=[1,199],$VM2=[1,200],$VN2=[1,201],$VO2=[1,202],$VP2=[1,203],$VQ2=[1,204],$VR2=[1,205],$VS2=[1,206],$VT2=[1,207],$VU2=[1,208],$VV2=[1,209],$VW2=[1,210],$VX2=[1,211],$VY2=[1,212],$VZ2=[1,213],$V_2=[1,214],$V$2=[1,215],$V03=[1,216],$V13=[1,217],$V23=[1,218],$V33=[1,219],$V43=[1,220],$V53=[1,221],$V63=[1,222],$V73=[1,223],$V83=[1,224],$V93=[1,225],$Va3=[1,226],$Vb3=[1,227],$Vc3=[1,228],$Vd3=[1,229],$Ve3=[1,230],$Vf3=[1,232],$Vg3=[1,233],$Vh3=[1,234],$Vi3=[1,235],$Vj3=[1,236],$Vk3=[1,237],$Vl3=[1,238],$Vm3=[1,239],$Vn3=[1,240],$Vo3=[1,241],$Vp3=[1,242],$Vq3=[1,243],$Vr3=[1,244],$Vs3=[1,245],$Vt3=[1,246],$Vu3=[1,247],$Vv3=[1,248],$Vw3=[1,249],$Vx3=[1,250],$Vy3=[1,251],$Vz3=[1,252],$VA3=[1,253],$VB3=[1,254],$VC3=[1,255],$VD3=[1,256],$VE3=[1,257],$VF3=[1,258],$VG3=[1,259],$VH3=[1,260],$VI3=[1,261],$VJ3=[1,262],$VK3=[1,263],$VL3=[1,264],$VM3=[1,265],$VN3=[1,266],$VO3=[1,267],$VP3=[1,268],$VQ3=[1,269],$VR3=[1,270],$VS3=[1,271],$VT3=[1,272],$VU3=[1,273],$VV3=[1,274],$VW3=[1,275],$VX3=[1,276],$VY3=[1,277],$VZ3=[1,278],$V_3=[1,279],$V$3=[1,280],$V04=[1,281],$V14=[1,282],$V24=[1,283],$V34=[1,284],$V44=[1,285],$V54=[1,286],$V64=[1,287],$V74=[1,288],$V84=[1,289],$V94=[1,290],$Va4=[1,291],$Vb4=[1,292],$Vc4=[1,293],$Vd4=[1,294],$Ve4=[1,295],$Vf4=[1,296],$Vg4=[1,297],$Vh4=[1,298],$Vi4=[1,299],$Vj4=[1,300],$Vk4=[1,301],$Vl4=[1,302],$Vm4=[1,303],$Vn4=[1,304],$Vo4=[1,305],$Vp4=[1,306],$Vq4=[1,307],$Vr4=[1,308],$Vs4=[1,309],$Vt4=[1,310],$Vu4=[1,311],$Vv4=[1,312],$Vw4=[1,313],$Vx4=[1,314],$Vy4=[1,315],$Vz4=[1,316],$VA4=[1,317],$VB4=[1,318],$VC4=[1,319],$VD4=[1,320],$VE4=[1,321],$VF4=[1,322],$VG4=[1,323],$VH4=[1,324],$VI4=[1,325],$VJ4=[1,326],$VK4=[1,327],$VL4=[1,328],$VM4=[1,329],$VN4=[1,330],$VO4=[1,331],$VP4=[1,332],$VQ4=[1,333],$VR4=[1,334],$VS4=[1,335],$VT4=[1,336],$VU4=[1,337],$VV4=[1,338],$VW4=[1,339],$VX4=[1,340],$VY4=[1,341],$VZ4=[1,342],$V_4=[1,343],$V$4=[1,344],$V05=[1,345],$V15=[1,346],$V25=[1,347],$V35=[1,348],$V45=[1,349],$V55=[1,350],$V65=[1,351],$V75=[1,352],$V85=[1,353],$V95=[1,354],$Va5=[1,355],$Vb5=[1,356],$Vc5=[1,357],$Vd5=[1,358],$Ve5=[1,359],$Vf5=[1,360],$Vg5=[1,361],$Vh5=[1,362],$Vi5=[1,363],$Vj5=[1,364],$Vk5=[1,365],$Vl5=[1,366],$Vm5=[1,367],$Vn5=[1,368],$Vo5=[1,369],$Vp5=[1,370],$Vq5=[1,371],$Vr5=[1,372],$Vs5=[1,373],$Vt5=[1,374],$Vu5=[1,375],$Vv5=[1,376],$Vw5=[1,378],$Vx5=[1,379],$Vy5=[1,380],$Vz5=[1,381],$VA5=[1,382],$VB5=[1,383],$VC5=[1,384],$VD5=[1,385],$VE5=[1,386],$VF5=[1,387],$VG5=[1,388],$VH5=[1,389],$VI5=[1,390],$VJ5=[1,391],$VK5=[1,392],$VL5=[1,393],$VM5=[1,394],$VN5=[1,395],$VO5=[1,396],$VP5=[1,397],$VQ5=[1,398],$VR5=[1,399],$VS5=[1,400],$VT5=[1,401],$VU5=[1,402],$VV5=[1,403],$VW5=[1,404],$VX5=[1,405],$VY5=[1,406],$VZ5=[1,407],$V_5=[1,408],$V$5=[1,409],$V06=[1,410],$V16=[1,411],$V26=[1,412],$V36=[1,413],$V46=[1,414],$V56=[1,415],$V66=[1,416],$V76=[1,417],$V86=[1,418],$V96=[1,419],$Va6=[1,420],$Vb6=[1,421],$Vc6=[1,422],$Vd6=[1,423],$Ve6=[1,424],$Vf6=[1,425],$Vg6=[1,426],$Vh6=[1,427],$Vi6=[1,428],$Vj6=[1,429],$Vk6=[1,430],$Vl6=[1,431],$Vm6=[1,432],$Vn6=[1,433],$Vo6=[1,434],$Vp6=[1,435],$Vq6=[1,436],$Vr6=[1,437],$Vs6=[1,438],$Vt6=[1,439],$Vu6=[1,440],$Vv6=[1,441],$Vw6=[1,442],$Vx6=[1,443],$Vy6=[1,444],$Vz6=[1,445],$VA6=[1,446],$VB6=[1,447],$VC6=[1,448],$VD6=[1,449],$VE6=[1,450],$VF6=[1,451],$VG6=[1,452],$VH6=[1,453],$VI6=[1,454],$VJ6=[1,455],$VK6=[1,456],$VL6=[1,457],$VM6=[1,458],$VN6=[1,459],$VO6=[1,460],$VP6=[1,461],$VQ6=[1,462],$VR6=[1,463],$VS6=[1,464],$VT6=[1,465],$VU6=[1,466],$VV6=[1,467],$VW6=[1,468],$VX6=[1,469],$VY6=[1,470],$VZ6=[1,471],$V_6=[1,472],$V$6=[1,473],$V07=[1,474],$V17=[1,475],$V27=[1,476],$V37=[1,477],$V47=[1,478],$V57=[1,479],$V67=[1,480],$V77=[1,481],$V87=[1,482],$V97=[1,483],$Va7=[1,484],$Vb7=[1,485],$Vc7=[1,486],$Vd7=[1,487],$Ve7=[1,488],$Vf7=[1,489],$Vg7=[1,490],$Vh7=[1,491],$Vi7=[1,492],$Vj7=[1,493],$Vk7=[1,494],$Vl7=[1,495],$Vm7=[1,496],$Vn7=[1,497],$Vo7=[1,498],$Vp7=[1,499],$Vq7=[1,500],$Vr7=[1,501],$Vs7=[1,502],$Vt7=[1,503],$Vu7=[1,504],$Vv7=[1,505],$Vw7=[1,506],$Vx7=[1,507],$Vy7=[1,508],$Vz7=[1,509],$VA7=[1,510],$VB7=[1,511],$VC7=[1,512],$VD7=[1,513],$VE7=[1,514],$VF7=[1,515],$VG7=[1,516],$VH7=[1,517],$VI7=[1,518],$VJ7=[1,519],$VK7=[1,520],$VL7=[1,521],$VM7=[1,522],$VN7=[1,523],$VO7=[1,524],$VP7=[1,525],$VQ7=[1,526],$VR7=[1,527],$VS7=[1,528],$VT7=[1,529],$VU7=[1,530],$VV7=[1,531],$VW7=[1,532],$VX7=[1,533],$VY7=[1,534],$VZ7=[1,535],$V_7=[1,536],$V$7=[1,537],$V08=[1,538],$V18=[1,539],$V28=[1,540],$V38=[1,541],$V48=[1,542],$V58=[1,543],$V68=[1,544],$V78=[1,545],$V88=[1,546],$V98=[1,547],$Va8=[1,548],$Vb8=[1,549],$Vc8=[1,550],$Vd8=[1,551],$Ve8=[1,552],$Vf8=[1,553],$Vg8=[1,554],$Vh8=[1,555],$Vi8=[1,556],$Vj8=[1,557],$Vk8=[1,558],$Vl8=[1,559],$Vm8=[1,560],$Vn8=[1,561],$Vo8=[1,562],$Vp8=[1,563],$Vq8=[1,564],$Vr8=[1,565],$Vs8=[1,566],$Vt8=[1,567],$Vu8=[1,568],$Vv8=[1,569],$Vw8=[1,570],$Vx8=[1,571],$Vy8=[1,572],$Vz8=[1,573],$VA8=[1,574],$VB8=[1,575],$VC8=[1,576],$VD8=[1,577],$VE8=[1,578],$VF8=[1,579],$VG8=[1,580],$VH8=[1,582],$VI8=[1,583],$VJ8=[1,584],$VK8=[1,585],$VL8=[1,586],$VM8=[1,587],$VN8=[1,588],$VO8=[1,589],$VP8=[1,590],$VQ8=[1,591],$VR8=[1,592],$VS8=[1,593],$VT8=[1,594],$VU8=[1,595],$VV8=[1,596],$VW8=[1,597],$VX8=[1,598],$VY8=[1,599],$VZ8=[1,600],$V_8=[1,601],$V$8=[1,602],$V09=[1,603],$V19=[1,604],$V29=[1,605],$V39=[1,606],$V49=[1,607],$V59=[1,608],$V69=[1,609],$V79=[1,610],$V89=[1,611],$V99=[1,612],$Va9=[1,613],$Vb9=[1,614],$Vc9=[1,615],$Vd9=[1,616],$Ve9=[1,617],$Vf9=[1,618],$Vg9=[1,619],$Vh9=[1,620],$Vi9=[1,621],$Vj9=[1,622],$Vk9=[1,623],$Vl9=[1,624],$Vm9=[1,625],$Vn9=[1,626],$Vo9=[1,627],$Vp9=[1,628],$Vq9=[1,629],$Vr9=[1,630],$Vs9=[1,631],$Vt9=[1,632],$Vu9=[5,6,50],$Vv9=[1,658],$Vw9=[1,659],$Vx9=[1,660],$Vy9=[1,655],$Vz9=[1,657],$VA9=[1,654],$VB9=[1,656],$VC9=[1,647],$VD9=[1,665],$VE9=[1,666],$VF9=[1,663],$VG9=[1,669],$VH9=[5,6,34,50,63,64,101,103,272,306,328,329,386,510,545,602,610,623,647,662,666,668,691,695,716,717,718,719],$VI9=[2,421],$VJ9=[1,686],$VK9=[1,688],$VL9=[1,687],$VM9=[1,689],$VN9=[1,690],$VO9=[5,6,50,76,186,272,329,356,623,646,647,660,668,683,684,685],$VP9=[1,692],$VQ9=[254,647],$VR9=[5,6,50,55,76,80,101,186,254,306,328,329,393,647,668,691,716,717,718,719],$VS9=[623,647],$VT9=[5,6,50,76,186,272,329,356,623,646,647,660,668,683],$VU9=[5,6,50,272,306,329],$VV9=[1,765],$VW9=[1,779],$VX9=[1,780],$VY9=[1,784],$VZ9=[1,781],$V_9=[1,783],$V$9=[1,782],$V0a=[5,6,647],$V1a=[5,6,50,186,329],$V2a=[5,6,50,306,329],$V3a=[5,6,623,646,647,660],$V4a=[647,660],$V5a=[2,693],$V6a=[1,815],$V7a=[1,816],$V8a=[646,647],$V9a=[2,656],$Vaa=[1,858],$Vba=[1,859],$Vca=[1,860],$Vda=[1,856],$Vea=[1,857],$Vfa=[1,852],$Vga=[5,6,50,186,272,329],$Vha=[1,868],$Via=[5,6,76],$Vja=[1,906],$Vka=[1,897],$Vla=[1,904],$Vma=[1,905],$Vna=[1,899],$Voa=[1,900],$Vpa=[1,901],$Vqa=[1,902],$Vra=[1,903],$Vsa=[5,6,50,55,76,101,186,328,329,393,691,716,717,718,719],$Vta=[5,6,50,55,76,101,186,306,328,329,393,691,716,717,718,719],$Vua=[1,921],$Vva=[1,912],$Vwa=[1,919],$Vxa=[1,920],$Vya=[1,914],$Vza=[1,915],$VAa=[1,916],$VBa=[1,917],$VCa=[1,918],$VDa=[5,6,50,55,76,101,306,328,329,393,691,716,717,718,719],$VEa=[5,6,50,76,186,272,329],$VFa=[1,982],$VGa=[1,996],$VHa=[1,997],$VIa=[1,998],$VJa=[647,668],$VKa=[2,866],$VLa=[1,1029],$VMa=[2,868],$VNa=[1,1042],$VOa=[566,647,668];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"sql_stmt_list":4,"EOF":5,"SEMICOLON":6,"sql_stmt":7,"select_stmt":8,"insert_stmt":9,"update_stmt":10,"replace_stmt":11,"delete_stmt":12,"create_table_stmt":13,"show_tables_stmt":14,"drop_table_stmt":15,"describe_table_stmt":16,"drop_index_stmt":17,"scan_stmt":18,"debug_stmt":19,"name":20,"LITERAL":21,"BRALITERAL":22,"name_or_keyword":23,"KEYWORD":24,"database_table_name":25,"DOT":26,"dynamodb_table_name":27,"dynamodb_table_name_or_keyword":28,"dynamodb_index_name_or_keyword":29,"dynamodb_attribute_name_or_keyword":30,"database_index_name":31,"dynamodb_index_name":32,"signed_number":33,"NUMBER":34,"string_literal":35,"SINGLE_QUOTED_STRING":36,"DOUBLE_QUOTED_STRING":37,"XSTRING":38,"literal_value":39,"boolean":40,"TRUE":41,"FALSE":42,"boolean_value":43,"SQLKEYWORD":44,"JSON":45,"MATH":46,"ABORT":47,"ADD":48,"AFTER":49,"CONSISTENT_READ":50,"CURRENT_DATE":51,"CURRENT_TIME":52,"CURRENT_TIMESTAMP":53,"ISNULL":54,"CONTAINS":55,"NOTNULL":56,"UNDEFINED":57,"PRAGMA":58,"TABLES":59,"STRINGSET":60,"NUMBERSET":61,"BINARYSET":62,"GSI":63,"LSI":64,"ALL":65,"KEYS_ONLY":66,"INCLUDE":67,"PROVISIONED":68,"PAY_PER_REQUEST":69,"BUFFER":70,"DEBUG":71,"DYNAMODBKEYWORD":72,"ALLOCATE":73,"ALTER":74,"ANALYZE":75,"AND":76,"ANY":77,"ARE":78,"ARRAY":79,"AS":80,"ASC":81,"ASCII":82,"ASENSITIVE":83,"ASSERTION":84,"ASYMMETRIC":85,"AT":86,"ATOMIC":87,"ATTACH":88,"ATTRIBUTE":89,"AUTH":90,"AUTHORIZATION":91,"AUTHORIZE":92,"AUTO":93,"AVG":94,"BACK":95,"BACKUP":96,"BASE":97,"BATCH":98,"BEFORE":99,"BEGIN":100,"BETWEEN":101,"BIGINT":102,"BINARY":103,"BIT":104,"BLOB":105,"BLOCK":106,"BOOLEAN":107,"BOTH":108,"BREADTH":109,"BUCKET":110,"BULK":111,"BY":112,"BYTE":113,"CALL":114,"CALLED":115,"CALLING":116,"CAPACITY":117,"CASCADE":118,"CASCADED":119,"CASE":120,"CAST":121,"CATALOG":122,"CHAR":123,"CHARACTER":124,"CHECK":125,"CLASS":126,"CLOB":127,"CLOSE":128,"CLUSTER":129,"CLUSTERED":130,"CLUSTERING":131,"CLUSTERS":132,"COALESCE":133,"COLLATE":134,"COLLATION":135,"COLLECTION":136,"COLUMN":137,"COLUMNS":138,"COMBINE":139,"COMMENT":140,"COMMIT":141,"COMPACT":142,"COMPILE":143,"COMPRESS":144,"CONDITION":145,"CONFLICT":146,"CONNECT":147,"CONNECTION":148,"CONSISTENCY":149,"CONSISTENT":150,"CONSTRAINT":151,"CONSTRAINTS":152,"CONSTRUCTOR":153,"CONSUMED":154,"CONTINUE":155,"CONVERT":156,"COPY":157,"CORRESPONDING":158,"COUNT":159,"COUNTER":160,"CREATE":161,"CROSS":162,"CUBE":163,"CURRENT":164,"CURSOR":165,"CYCLE":166,"DATA":167,"DATABASE":168,"DATE":169,"DATETIME":170,"DAY":171,"DEALLOCATE":172,"DEC":173,"DECIMAL":174,"DECLARE":175,"DEFAULT":176,"DEFERRABLE":177,"DEFERRED":178,"DEFINE":179,"DEFINED":180,"DEFINITION":181,"DELETE":182,"DELIMITED":183,"DEPTH":184,"DEREF":185,"DESC":186,"DESCRIBE":187,"DESCRIPTOR":188,"DETACH":189,"DETERMINISTIC":190,"DIAGNOSTICS":191,"DIRECTORIES":192,"DISABLE":193,"DISCONNECT":194,"DISTINCT":195,"DISTRIBUTE":196,"DO":197,"DOMAIN":198,"DOUBLE":199,"DROP":200,"DUMP":201,"DURATION":202,"DYNAMIC":203,"EACH":204,"ELEMENT":205,"ELSE":206,"ELSEIF":207,"EMPTY":208,"ENABLE":209,"END":210,"EQUAL":211,"EQUALS":212,"ERROR":213,"ESCAPE":214,"ESCAPED":215,"EVAL":216,"EVALUATE":217,"EXCEEDED":218,"EXCEPT":219,"EXCEPTION":220,"EXCEPTIONS":221,"EXCLUSIVE":222,"EXEC":223,"EXECUTE":224,"EXISTS":225,"EXIT":226,"EXPLAIN":227,"EXPLODE":228,"EXPORT":229,"EXPRESSION":230,"EXTENDED":231,"EXTERNAL":232,"EXTRACT":233,"FAIL":234,"FAMILY":235,"FETCH":236,"FIELDS":237,"FILE":238,"FILTER":239,"FILTERING":240,"FINAL":241,"FINISH":242,"FIRST":243,"FIXED":244,"FLATTERN":245,"FLOAT":246,"FOR":247,"FORCE":248,"FOREIGN":249,"FORMAT":250,"FORWARD":251,"FOUND":252,"FREE":253,"FROM":254,"FULL":255,"FUNCTION":256,"FUNCTIONS":257,"GENERAL":258,"GENERATE":259,"GET":260,"GLOB":261,"GLOBAL":262,"GO":263,"GOTO":264,"GRANT":265,"GREATER":266,"GROUP":267,"GROUPING":268,"HANDLER":269,"HASH":270,"HAVE":271,"HAVING":272,"HEAP":273,"HIDDEN":274,"HOLD":275,"HOUR":276,"IDENTIFIED":277,"IDENTITY":278,"IF":279,"IGNORE":280,"IMMEDIATE":281,"IMPORT":282,"IN":283,"INCLUDING":284,"INCLUSIVE":285,"INCREMENT":286,"INCREMENTAL":287,"INDEX":288,"INDEXED":289,"INDEXES":290,"INDICATOR":291,"INFINITE":292,"INITIALLY":293,"INLINE":294,"INNER":295,"INNTER":296,"INOUT":297,"INPUT":298,"INSENSITIVE":299,"INSERT":300,"INSTEAD":301,"INT":302,"INTEGER":303,"INTERSECT":304,"INTERVAL":305,"INTO":306,"INVALIDATE":307,"IS":308,"ISOLATION":309,"ITEM":310,"ITEMS":311,"ITERATE":312,"JOIN":313,"KEY":314,"KEYS":315,"LAG":316,"LANGUAGE":317,"LARGE":318,"LAST":319,"LATERAL":320,"LEAD":321,"LEADING":322,"LEAVE":323,"LEFT":324,"LENGTH":325,"LESS":326,"LEVEL":327,"LIKE":328,"LIMIT":329,"LIMITED":330,"LINES":331,"LIST":332,"LOAD":333,"LOCAL":334,"LOCALTIME":335,"LOCALTIMESTAMP":336,"LOCATION":337,"LOCATOR":338,"LOCK":339,"LOCKS":340,"LOG":341,"LOGED":342,"LONG":343,"LOOP":344,"LOWER":345,"MAP":346,"MATCH":347,"MATERIALIZED":348,"MAX":349,"MAXLEN":350,"MEMBER":351,"MERGE":352,"METHOD":353,"METRICS":354,"MIN":355,"MINUS":356,"MINUTE":357,"MISSING":358,"MOD":359,"MODE":360,"MODIFIES":361,"MODIFY":362,"MODULE":363,"MONTH":364,"MULTI":365,"MULTISET":366,"NAME":367,"NAMES":368,"NATIONAL":369,"NATURAL":370,"NCHAR":371,"NCLOB":372,"NEW":373,"NEXT":374,"NO":375,"NONE":376,"NOT":377,"NULL":378,"NULLIF":379,"NUMERIC":380,"OBJECT":381,"OF":382,"OFFLINE":383,"OFFSET":384,"OLD":385,"ON":386,"ONLINE":387,"ONLY":388,"OPAQUE":389,"OPEN":390,"OPERATOR":391,"OPTION":392,"OR":393,"ORDER":394,"ORDINALITY":395,"OTHER":396,"OTHERS":397,"OUT":398,"OUTER":399,"OUTPUT":400,"OVER":401,"OVERLAPS":402,"OVERRIDE":403,"OWNER":404,"PAD":405,"PARALLEL":406,"PARAMETER":407,"PARAMETERS":408,"PARTIAL":409,"PARTITION":410,"PARTITIONED":411,"PARTITIONS":412,"PATH":413,"PERCENT":414,"PERCENTILE":415,"PERMISSION":416,"PERMISSIONS":417,"PIPE":418,"PIPELINED":419,"PLAN":420,"POOL":421,"POSITION":422,"PRECISION":423,"PREPARE":424,"PRESERVE":425,"PRIMARY":426,"PRIOR":427,"PRIVATE":428,"PRIVILEGES":429,"PROCEDURE":430,"PROCESSED":431,"PROJECT":432,"PROJECTION":433,"PROPERTY":434,"PROVISIONING":435,"PUBLIC":436,"PUT":437,"QUERY":438,"QUIT":439,"QUORUM":440,"RAISE":441,"RANDOM":442,"RANGE":443,"RANK":444,"RAW":445,"READ":446,"READS":447,"REAL":448,"REBUILD":449,"RECORD":450,"RECURSIVE":451,"REDUCE":452,"REF":453,"REFERENCE":454,"REFERENCES":455,"REFERENCING":456,"REGEXP":457,"REGION":458,"REINDEX":459,"RELATIVE":460,"RELEASE":461,"REMAINDER":462,"RENAME":463,"REPEAT":464,"REPLACE":465,"REQUEST":466,"RESET":467,"RESIGNAL":468,"RESOURCE":469,"RESPONSE":470,"RESTORE":471,"RESTRICT":472,"RESULT":473,"RETURN":474,"RETURNING":475,"RETURNS":476,"REVERSE":477,"REVOKE":478,"RIGHT":479,"ROLE":480,"ROLES":481,"ROLLBACK":482,"ROLLUP":483,"ROUTINE":484,"ROW":485,"ROWS":486,"RULE":487,"RULES":488,"SAMPLE":489,"SATISFIES":490,"SAVE":491,"SAVEPOINT":492,"SCAN":493,"SCHEMA":494,"SCOPE":495,"SCROLL":496,"SEARCH":497,"SECOND":498,"SECTION":499,"SEGMENT":500,"SEGMENTS":501,"SELECT":502,"SELF":503,"SEMI":504,"SENSITIVE":505,"SEPARATE":506,"SEQUENCE":507,"SERIALIZABLE":508,"SESSION":509,"SET":510,"SETS":511,"SHARD":512,"SHARE":513,"SHARED":514,"SHORT":515,"SHOW":516,"SIGNAL":517,"SIMILAR":518,"SIZE":519,"SKEWED":520,"SMALLINT":521,"SNAPSHOT":522,"SOME":523,"SOURCE":524,"SPACE":525,"SPACES":526,"SPARSE":527,"SPECIFIC":528,"SPECIFICTYPE":529,"SPLIT":530,"SQL":531,"SQLCODE":532,"SQLERROR":533,"SQLEXCEPTION":534,"SQLSTATE":535,"SQLWARNING":536,"START":537,"STATE":538,"STATIC":539,"STATUS":540,"STORAGE":541,"STORE":542,"STORED":543,"STREAM":544,"STRING":545,"STRUCT":546,"STYLE":547,"SUB":548,"SUBMULTISET":549,"SUBPARTITION":550,"SUBSTRING":551,"SUBTYPE":552,"SUM":553,"SUPER":554,"SYMMETRIC":555,"SYNONYM":556,"SYSTEM":557,"TABLE":558,"TABLESAMPLE":559,"TEMP":560,"TEMPORARY":561,"TERMINATED":562,"TEXT":563,"THAN":564,"THEN":565,"THROUGHPUT":566,"TIME":567,"TIMESTAMP":568,"TIMEZONE":569,"TINYINT":570,"TO":571,"TOKEN":572,"TOTAL":573,"TOUCH":574,"TRAILING":575,"TRANSACTION":576,"TRANSFORM":577,"TRANSLATE":578,"TRANSLATION":579,"TREAT":580,"TRIGGER":581,"TRIM":582,"TRUNCATE":583,"TTL":584,"TUPLE":585,"TYPE":586,"UNDER":587,"UNDO":588,"UNION":589,"UNIQUE":590,"UNIT":591,"UNKNOWN":592,"UNLOGGED":593,"UNNEST":594,"UNPROCESSED":595,"UNSIGNED":596,"UNTIL":597,"UPDATE":598,"UPPER":599,"URL":600,"USAGE":601,"USE":602,"USER":603,"USERS":604,"USING":605,"UUID":606,"VACUUM":607,"VALUE":608,"VALUED":609,"VALUES":610,"VARCHAR":611,"VARIABLE":612,"VARIANCE":613,"VARINT":614,"VARYING":615,"VIEW":616,"VIEWS":617,"VIRTUAL":618,"VOID":619,"WAIT":620,"WHEN":621,"WHENEVER":622,"WHERE":623,"WHILE":624,"WINDOW":625,"WITH":626,"WITHIN":627,"WITHOUT":628,"WORK":629,"WRAPPED":630,"WRITE":631,"YEAR":632,"ZONE":633,"dynamodb_data_string":634,"dynamodb_raw_string":635,"dynamodb_data_number":636,"dynamodb_raw_number":637,"dynamodb_data_boolean":638,"dynamodb_raw_boolean":639,"dynamodb_data_null":640,"dynamodb_raw_null":641,"dynamodb_data_undefined":642,"dynamodb_data_array":643,"ARRAYLPAR":644,"array_list":645,"ARRAYRPAR":646,"COMMA":647,"array_value":648,"dynamodb_data_json":649,"dynamodb_raw_array":650,"array_list_raw":651,"array_value_raw":652,"javascript_raw_expr":653,"dynamodb_raw_json":654,"dynamodb_raw_numberset":655,"dynamodb_raw_stringset":656,"dynamodb_raw_binaryset":657,"JSONLPAR":658,"dynamodb_data_json_list":659,"JSONRPAR":660,"dynamodb_data_json_kv":661,"COLON":662,"dynamodb_data_json_list_raw":663,"dynamodb_raw_json_kv":664,"dynamodb_raw_json_kv_key":665,"LPAR":666,"stringset_list":667,"RPAR":668,"numberset_list":669,"binaryset_list":670,"javascript_data_func_buffer":671,"javascript_data_obj_date":672,"javascript_raw_date_parameter":673,"javascript_raw_obj_date":674,"def_resolvable_expr":675,"javascript_raw_obj_math":676,"javascript_data_obj_math":677,"javascript_raw_math_funcname":678,"javascript_raw_math_parameter":679,"javascript_data_func_uuid":680,"javascript_data_expr":681,"dev_resolvable_value":682,"PLUS":683,"STAR":684,"SLASH":685,"def_insert_ignore":686,"def_insert_columns":687,"def_insert_items":688,"def_insert_item":689,"def_insert_onecolumn":690,"EQ":691,"def_update_columns":692,"def_update_where":693,"def_update_onecolumn":694,"PLUSEQ":695,"def_update_where_cond":696,"def_replace_columns":697,"def_replace_onecolumn":698,"def_delete_where":699,"def_delete_where_cond":700,"def_select":701,"select_sort_clause":702,"limit_clause":703,"def_consistent_read":704,"def_select_columns":705,"def_select_onecolumn":706,"def_select_from":707,"def_select_use_index":708,"def_select_where":709,"select_where_hash":710,"select_where_range":711,"def_having":712,"having_expr":713,"where_expr":714,"bind_parameter":715,"GT":716,"GE":717,"LT":718,"LE":719,"where_between":720,"select_where_hash_value":721,"select_where_range_value":722,"select_where_between":723,"def_billing_mode":724,"def_ct_typedef_list":725,"def_ct_pk":726,"def_ct_indexes":727,"def_ct_index_list":728,"def_ct_index":729,"def_ct_projection":730,"def_ct_throughput":731,"def_ct_projection_list":732,"def_ct_typedef":733,"def_scan":734,"def_scan_limit_clause":735,"def_scan_consistent_read":736,"def_scan_columns":737,"def_scan_use_index":738,"def_scan_having":739,"def_scan_into":740,"def_scan_onecolumn":741,"def_scan_having_expr":742,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SEMICOLON",21:"LITERAL",22:"BRALITERAL",26:"DOT",34:"NUMBER",36:"SINGLE_QUOTED_STRING",37:"DOUBLE_QUOTED_STRING",38:"XSTRING",41:"TRUE",42:"FALSE",45:"JSON",46:"MATH",47:"ABORT",48:"ADD",49:"AFTER",50:"CONSISTENT_READ",51:"CURRENT_DATE",52:"CURRENT_TIME",53:"CURRENT_TIMESTAMP",54:"ISNULL",55:"CONTAINS",56:"NOTNULL",57:"UNDEFINED",58:"PRAGMA",59:"TABLES",60:"STRINGSET",61:"NUMBERSET",62:"BINARYSET",63:"GSI",64:"LSI",65:"ALL",66:"KEYS_ONLY",67:"INCLUDE",68:"PROVISIONED",69:"PAY_PER_REQUEST",70:"BUFFER",71:"DEBUG",73:"ALLOCATE",74:"ALTER",75:"ANALYZE",76:"AND",77:"ANY",78:"ARE",79:"ARRAY",80:"AS",81:"ASC",82:"ASCII",83:"ASENSITIVE",84:"ASSERTION",85:"ASYMMETRIC",86:"AT",87:"ATOMIC",88:"ATTACH",89:"ATTRIBUTE",90:"AUTH",91:"AUTHORIZATION",92:"AUTHORIZE",93:"AUTO",94:"AVG",95:"BACK",96:"BACKUP",97:"BASE",98:"BATCH",99:"BEFORE",100:"BEGIN",101:"BETWEEN",102:"BIGINT",103:"BINARY",104:"BIT",105:"BLOB",106:"BLOCK",107:"BOOLEAN",108:"BOTH",109:"BREADTH",110:"BUCKET",111:"BULK",112:"BY",113:"BYTE",114:"CALL",115:"CALLED",116:"CALLING",117:"CAPACITY",118:"CASCADE",119:"CASCADED",120:"CASE",121:"CAST",122:"CATALOG",123:"CHAR",124:"CHARACTER",125:"CHECK",126:"CLASS",127:"CLOB",128:"CLOSE",129:"CLUSTER",130:"CLUSTERED",131:"CLUSTERING",132:"CLUSTERS",133:"COALESCE",134:"COLLATE",135:"COLLATION",136:"COLLECTION",137:"COLUMN",138:"COLUMNS",139:"COMBINE",140:"COMMENT",141:"COMMIT",142:"COMPACT",143:"COMPILE",144:"COMPRESS",145:"CONDITION",146:"CONFLICT",147:"CONNECT",148:"CONNECTION",149:"CONSISTENCY",150:"CONSISTENT",151:"CONSTRAINT",152:"CONSTRAINTS",153:"CONSTRUCTOR",154:"CONSUMED",155:"CONTINUE",156:"CONVERT",157:"COPY",158:"CORRESPONDING",159:"COUNT",160:"COUNTER",161:"CREATE",162:"CROSS",163:"CUBE",164:"CURRENT",165:"CURSOR",166:"CYCLE",167:"DATA",168:"DATABASE",169:"DATE",170:"DATETIME",171:"DAY",172:"DEALLOCATE",173:"DEC",174:"DECIMAL",175:"DECLARE",176:"DEFAULT",177:"DEFERRABLE",178:"DEFERRED",179:"DEFINE",180:"DEFINED",181:"DEFINITION",182:"DELETE",183:"DELIMITED",184:"DEPTH",185:"DEREF",186:"DESC",187:"DESCRIBE",188:"DESCRIPTOR",189:"DETACH",190:"DETERMINISTIC",191:"DIAGNOSTICS",192:"DIRECTORIES",193:"DISABLE",194:"DISCONNECT",195:"DISTINCT",196:"DISTRIBUTE",197:"DO",198:"DOMAIN",199:"DOUBLE",200:"DROP",201:"DUMP",202:"DURATION",203:"DYNAMIC",204:"EACH",205:"ELEMENT",206:"ELSE",207:"ELSEIF",208:"EMPTY",209:"ENABLE",210:"END",211:"EQUAL",212:"EQUALS",213:"ERROR",214:"ESCAPE",215:"ESCAPED",216:"EVAL",217:"EVALUATE",218:"EXCEEDED",219:"EXCEPT",220:"EXCEPTION",221:"EXCEPTIONS",222:"EXCLUSIVE",223:"EXEC",224:"EXECUTE",225:"EXISTS",226:"EXIT",227:"EXPLAIN",228:"EXPLODE",229:"EXPORT",230:"EXPRESSION",231:"EXTENDED",232:"EXTERNAL",233:"EXTRACT",234:"FAIL",235:"FAMILY",236:"FETCH",237:"FIELDS",238:"FILE",239:"FILTER",240:"FILTERING",241:"FINAL",242:"FINISH",243:"FIRST",244:"FIXED",245:"FLATTERN",246:"FLOAT",247:"FOR",248:"FORCE",249:"FOREIGN",250:"FORMAT",251:"FORWARD",252:"FOUND",253:"FREE",254:"FROM",255:"FULL",256:"FUNCTION",257:"FUNCTIONS",258:"GENERAL",259:"GENERATE",260:"GET",261:"GLOB",262:"GLOBAL",263:"GO",264:"GOTO",265:"GRANT",266:"GREATER",267:"GROUP",268:"GROUPING",269:"HANDLER",270:"HASH",271:"HAVE",272:"HAVING",273:"HEAP",274:"HIDDEN",275:"HOLD",276:"HOUR",277:"IDENTIFIED",278:"IDENTITY",279:"IF",280:"IGNORE",281:"IMMEDIATE",282:"IMPORT",283:"IN",284:"INCLUDING",285:"INCLUSIVE",286:"INCREMENT",287:"INCREMENTAL",288:"INDEX",289:"INDEXED",290:"INDEXES",291:"INDICATOR",292:"INFINITE",293:"INITIALLY",294:"INLINE",295:"INNER",296:"INNTER",297:"INOUT",298:"INPUT",299:"INSENSITIVE",300:"INSERT",301:"INSTEAD",302:"INT",303:"INTEGER",304:"INTERSECT",305:"INTERVAL",306:"INTO",307:"INVALIDATE",308:"IS",309:"ISOLATION",310:"ITEM",311:"ITEMS",312:"ITERATE",313:"JOIN",314:"KEY",315:"KEYS",316:"LAG",317:"LANGUAGE",318:"LARGE",319:"LAST",320:"LATERAL",321:"LEAD",322:"LEADING",323:"LEAVE",324:"LEFT",325:"LENGTH",326:"LESS",327:"LEVEL",328:"LIKE",329:"LIMIT",330:"LIMITED",331:"LINES",332:"LIST",333:"LOAD",334:"LOCAL",335:"LOCALTIME",336:"LOCALTIMESTAMP",337:"LOCATION",338:"LOCATOR",339:"LOCK",340:"LOCKS",341:"LOG",342:"LOGED",343:"LONG",344:"LOOP",345:"LOWER",346:"MAP",347:"MATCH",348:"MATERIALIZED",349:"MAX",350:"MAXLEN",351:"MEMBER",352:"MERGE",353:"METHOD",354:"METRICS",355:"MIN",356:"MINUS",357:"MINUTE",358:"MISSING",359:"MOD",360:"MODE",361:"MODIFIES",362:"MODIFY",363:"MODULE",364:"MONTH",365:"MULTI",366:"MULTISET",367:"NAME",368:"NAMES",369:"NATIONAL",370:"NATURAL",371:"NCHAR",372:"NCLOB",373:"NEW",374:"NEXT",375:"NO",376:"NONE",377:"NOT",378:"NULL",379:"NULLIF",380:"NUMERIC",381:"OBJECT",382:"OF",383:"OFFLINE",384:"OFFSET",385:"OLD",386:"ON",387:"ONLINE",388:"ONLY",389:"OPAQUE",390:"OPEN",391:"OPERATOR",392:"OPTION",393:"OR",394:"ORDER",395:"ORDINALITY",396:"OTHER",397:"OTHERS",398:"OUT",399:"OUTER",400:"OUTPUT",401:"OVER",402:"OVERLAPS",403:"OVERRIDE",404:"OWNER",405:"PAD",406:"PARALLEL",407:"PARAMETER",408:"PARAMETERS",409:"PARTIAL",410:"PARTITION",411:"PARTITIONED",412:"PARTITIONS",413:"PATH",414:"PERCENT",415:"PERCENTILE",416:"PERMISSION",417:"PERMISSIONS",418:"PIPE",419:"PIPELINED",420:"PLAN",421:"POOL",422:"POSITION",423:"PRECISION",424:"PREPARE",425:"PRESERVE",426:"PRIMARY",427:"PRIOR",428:"PRIVATE",429:"PRIVILEGES",430:"PROCEDURE",431:"PROCESSED",432:"PROJECT",433:"PROJECTION",434:"PROPERTY",435:"PROVISIONING",436:"PUBLIC",437:"PUT",438:"QUERY",439:"QUIT",440:"QUORUM",441:"RAISE",442:"RANDOM",443:"RANGE",444:"RANK",445:"RAW",446:"READ",447:"READS",448:"REAL",449:"REBUILD",450:"RECORD",451:"RECURSIVE",452:"REDUCE",453:"REF",454:"REFERENCE",455:"REFERENCES",456:"REFERENCING",457:"REGEXP",458:"REGION",459:"REINDEX",460:"RELATIVE",461:"RELEASE",462:"REMAINDER",463:"RENAME",464:"REPEAT",465:"REPLACE",466:"REQUEST",467:"RESET",468:"RESIGNAL",469:"RESOURCE",470:"RESPONSE",471:"RESTORE",472:"RESTRICT",473:"RESULT",474:"RETURN",475:"RETURNING",476:"RETURNS",477:"REVERSE",478:"REVOKE",479:"RIGHT",480:"ROLE",481:"ROLES",482:"ROLLBACK",483:"ROLLUP",484:"ROUTINE",485:"ROW",486:"ROWS",487:"RULE",488:"RULES",489:"SAMPLE",490:"SATISFIES",491:"SAVE",492:"SAVEPOINT",493:"SCAN",494:"SCHEMA",495:"SCOPE",496:"SCROLL",497:"SEARCH",498:"SECOND",499:"SECTION",500:"SEGMENT",501:"SEGMENTS",502:"SELECT",503:"SELF",504:"SEMI",505:"SENSITIVE",506:"SEPARATE",507:"SEQUENCE",508:"SERIALIZABLE",509:"SESSION",510:"SET",511:"SETS",512:"SHARD",513:"SHARE",514:"SHARED",515:"SHORT",516:"SHOW",517:"SIGNAL",518:"SIMILAR",519:"SIZE",520:"SKEWED",521:"SMALLINT",522:"SNAPSHOT",523:"SOME",524:"SOURCE",525:"SPACE",526:"SPACES",527:"SPARSE",528:"SPECIFIC",529:"SPECIFICTYPE",530:"SPLIT",531:"SQL",532:"SQLCODE",533:"SQLERROR",534:"SQLEXCEPTION",535:"SQLSTATE",536:"SQLWARNING",537:"START",538:"STATE",539:"STATIC",540:"STATUS",541:"STORAGE",542:"STORE",543:"STORED",544:"STREAM",545:"STRING",546:"STRUCT",547:"STYLE",548:"SUB",549:"SUBMULTISET",550:"SUBPARTITION",551:"SUBSTRING",552:"SUBTYPE",553:"SUM",554:"SUPER",555:"SYMMETRIC",556:"SYNONYM",557:"SYSTEM",558:"TABLE",559:"TABLESAMPLE",560:"TEMP",561:"TEMPORARY",562:"TERMINATED",563:"TEXT",564:"THAN",565:"THEN",566:"THROUGHPUT",567:"TIME",568:"TIMESTAMP",569:"TIMEZONE",570:"TINYINT",571:"TO",572:"TOKEN",573:"TOTAL",574:"TOUCH",575:"TRAILING",576:"TRANSACTION",577:"TRANSFORM",578:"TRANSLATE",579:"TRANSLATION",580:"TREAT",581:"TRIGGER",582:"TRIM",583:"TRUNCATE",584:"TTL",585:"TUPLE",586:"TYPE",587:"UNDER",588:"UNDO",589:"UNION",590:"UNIQUE",591:"UNIT",592:"UNKNOWN",593:"UNLOGGED",594:"UNNEST",595:"UNPROCESSED",596:"UNSIGNED",597:"UNTIL",598:"UPDATE",599:"UPPER",600:"URL",601:"USAGE",602:"USE",603:"USER",604:"USERS",605:"USING",606:"UUID",607:"VACUUM",608:"VALUE",609:"VALUED",610:"VALUES",611:"VARCHAR",612:"VARIABLE",613:"VARIANCE",614:"VARINT",615:"VARYING",616:"VIEW",617:"VIEWS",618:"VIRTUAL",619:"VOID",620:"WAIT",621:"WHEN",622:"WHENEVER",623:"WHERE",624:"WHILE",625:"WINDOW",626:"WITH",627:"WITHIN",628:"WITHOUT",629:"WORK",630:"WRAPPED",631:"WRITE",632:"YEAR",633:"ZONE",644:"ARRAYLPAR",646:"ARRAYRPAR",647:"COMMA",658:"JSONLPAR",660:"JSONRPAR",662:"COLON",666:"LPAR",668:"RPAR",683:"PLUS",684:"STAR",685:"SLASH",691:"EQ",695:"PLUSEQ",715:"bind_parameter",716:"GT",717:"GE",718:"LT",719:"LE"},
productions_: [0,[3,2],[4,3],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[20,1],[20,1],[23,1],[23,1],[23,1],[25,3],[25,1],[27,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[35,1],[35,1],[35,1],[39,1],[39,1],[40,1],[40,1],[43,1],[43,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[634,1],[634,1],[635,1],[635,1],[636,1],[637,1],[638,1],[638,1],[639,1],[639,1],[640,1],[641,1],[642,1],[643,3],[645,3],[645,1],[648,0],[648,1],[648,1],[648,1],[648,1],[648,1],[648,1],[650,3],[651,3],[651,1],[652,0],[652,1],[652,1],[652,1],[652,1],[652,1],[652,1],[652,1],[652,1],[649,3],[659,3],[659,1],[661,0],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[661,3],[654,3],[663,3],[663,1],[665,1],[665,1],[665,1],[664,0],[664,3],[664,3],[664,3],[664,3],[664,3],[664,3],[664,3],[664,3],[656,7],[667,3],[667,1],[655,7],[669,3],[669,1],[657,7],[670,3],[670,1],[672,5],[672,9],[674,5],[674,9],[673,0],[673,1],[676,1],[677,6],[678,1],[678,1],[679,0],[679,1],[680,3],[680,4],[671,8],[653,1],[681,1],[675,1],[675,3],[675,3],[675,3],[675,3],[675,3],[682,1],[682,1],[682,1],[682,1],[682,1],[682,1],[24,1],[24,1],[9,6],[9,6],[686,0],[686,1],[688,3],[688,1],[689,3],[687,3],[687,1],[690,3],[690,3],[690,3],[690,3],[690,3],[690,3],[690,3],[690,3],[10,6],[692,3],[692,1],[694,3],[694,3],[694,3],[694,3],[694,3],[694,3],[694,3],[694,3],[694,3],[694,3],[693,1],[693,3],[696,3],[11,5],[697,3],[697,1],[698,3],[698,3],[698,3],[698,3],[698,3],[698,3],[698,3],[698,3],[12,5],[699,1],[699,3],[700,3],[8,4],[703,0],[703,2],[702,0],[702,1],[704,0],[704,1],[705,3],[705,1],[706,1],[706,1],[706,3],[707,2],[708,0],[708,3],[709,2],[709,4],[712,2],[712,0],[701,6],[714,1],[714,1],[714,1],[714,3],[714,3],[714,3],[714,3],[714,3],[714,3],[714,3],[714,3],[714,3],[710,3],[721,1],[711,3],[711,3],[711,3],[711,3],[711,3],[711,3],[711,3],[722,1],[723,3],[723,3],[720,3],[720,3],[713,1],[713,1],[713,1],[713,1],[713,3],[713,3],[713,3],[713,3],[713,3],[713,3],[713,3],[713,3],[713,3],[713,3],[713,3],[713,3],[13,10],[724,0],[724,1],[724,1],[727,0],[727,2],[728,3],[728,1],[729,7],[729,8],[729,9],[729,10],[726,6],[726,8],[731,0],[731,3],[730,0],[730,2],[730,2],[730,5],[732,3],[732,1],[725,3],[725,1],[733,2],[733,2],[733,2],[14,2],[15,3],[16,3],[17,5],[18,3],[734,7],[735,0],[735,2],[736,0],[736,1],[737,3],[737,1],[741,1],[741,1],[741,3],[738,0],[738,3],[739,2],[739,0],[742,1],[742,1],[742,1],[742,1],[742,3],[742,3],[742,3],[742,3],[742,3],[742,3],[742,3],[742,3],[742,3],[742,3],[742,3],[742,3],[740,2],[740,0],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			this.$ = $$[$0-1];
			return this.$;

break;
case 2:
 this.$ = $$[$0-2]; if($$[$0]) this.$.push($$[$0]);
break;
case 3: case 645: case 655: case 667: case 689: case 704: case 747: case 750: case 761: case 777: case 798: case 873: case 890:
 this.$ = [$$[$0]];
break;
case 16: case 18: case 23: case 24: case 25: case 26: case 28: case 29: case 30: case 31: case 32: case 740: case 741: case 802: case 804: case 810: case 836: case 837: case 854: case 855: case 895: case 898: case 899:
 this.$ = $$[$0];
break;
case 17: case 19:
 this.$ = $$[$0].substr(1,$$[$0].length-2);
break;
case 20: case 647: case 648: case 649: case 650: case 651: case 652: case 657: case 658: case 659: case 660: case 661: case 662: case 663: case 664: case 692: case 716: case 719: case 722: case 727: case 728: case 734: case 735: case 736: case 737: case 738: case 739: case 823: case 831:
 this.$ = $$[$0]
break;
case 21:
 this.$ = {database:$$[$0-2], table:$$[$0]};
break;
case 22:
 this.$ = {table:$$[$0]};
break;
case 27:
 this.$ = {index:$$[$0]};
break;
case 33:
 this.$ = {type:'number', number:$$[$0]};
break;
case 34:
 this.$ = {type:'string', string: $$[$0]}
break;
case 35: case 636:
 this.$ = true;
break;
case 36: case 637:
 this.$ = false;
break;
case 37:
 this.$ = {type:'boolean', value: true };
break;
case 38:
 this.$ = {type:'boolean', value: false };
break;
case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 203: case 204: case 205: case 206: case 207: case 208: case 209: case 210: case 211: case 212: case 213: case 214: case 215: case 216: case 217: case 218: case 219: case 220: case 221: case 222: case 223: case 224: case 225: case 226: case 227: case 228: case 229: case 230: case 231: case 232: case 233: case 234: case 235: case 236: case 237: case 238: case 239: case 240: case 241: case 242: case 243: case 244: case 245: case 246: case 247: case 248: case 249: case 250: case 251: case 252: case 253: case 254: case 255: case 256: case 257: case 258: case 259: case 260: case 261: case 262: case 263: case 264: case 265: case 266: case 267: case 268: case 269: case 270: case 271: case 272: case 273: case 274: case 275: case 276: case 277: case 278: case 279: case 280: case 281: case 282: case 283: case 284: case 285: case 286: case 287: case 288: case 289: case 290: case 291: case 292: case 293: case 294: case 295: case 296: case 297: case 298: case 299: case 300: case 301: case 302: case 303: case 304: case 305: case 306: case 307: case 308: case 309: case 310: case 311: case 312: case 313: case 314: case 315: case 316: case 317: case 318: case 319: case 320: case 321: case 322: case 323: case 324: case 325: case 326: case 327: case 328: case 329: case 330: case 331: case 332: case 333: case 334: case 335: case 336: case 337: case 338: case 339: case 340: case 341: case 342: case 343: case 344: case 345: case 346: case 347: case 348: case 349: case 350: case 351: case 352: case 353: case 354: case 355: case 356: case 357: case 358: case 359: case 360: case 361: case 362: case 363: case 364: case 365: case 366: case 367: case 368: case 369: case 370: case 371: case 372: case 373: case 374: case 375: case 376: case 377: case 378: case 379: case 380: case 381: case 382: case 383: case 384: case 385: case 386: case 387: case 388: case 389: case 390: case 391: case 392: case 393: case 394: case 395: case 396: case 397: case 398: case 399: case 400: case 401: case 402: case 403: case 404: case 405: case 406: case 407: case 408: case 409: case 410: case 411: case 412: case 413: case 414: case 415: case 416: case 417: case 418: case 419: case 420: case 421: case 422: case 423: case 424: case 425: case 426: case 427: case 428: case 429: case 430: case 431: case 432: case 433: case 434: case 435: case 436: case 437: case 438: case 439: case 440: case 441: case 442: case 443: case 444: case 445: case 446: case 447: case 448: case 449: case 450: case 451: case 452: case 453: case 454: case 455: case 456: case 457: case 458: case 459: case 460: case 461: case 462: case 463: case 464: case 465: case 466: case 467: case 468: case 469: case 470: case 471: case 472: case 473: case 474: case 475: case 476: case 477: case 478: case 479: case 480: case 481: case 482: case 483: case 484: case 485: case 486: case 487: case 488: case 489: case 490: case 491: case 492: case 493: case 494: case 495: case 496: case 497: case 498: case 499: case 500: case 501: case 502: case 503: case 504: case 505: case 506: case 507: case 508: case 509: case 510: case 511: case 512: case 513: case 514: case 515: case 516: case 517: case 518: case 519: case 520: case 521: case 522: case 523: case 524: case 525: case 526: case 527: case 528: case 529: case 530: case 531: case 532: case 533: case 534: case 535: case 536: case 537: case 538: case 539: case 540: case 541: case 542: case 543: case 544: case 545: case 546: case 547: case 548: case 549: case 550: case 551: case 552: case 553: case 554: case 555: case 556: case 557: case 558: case 559: case 560: case 561: case 562: case 563: case 564: case 565: case 566: case 567: case 568: case 569: case 570: case 571: case 572: case 573: case 574: case 575: case 576: case 577: case 578: case 579: case 580: case 581: case 582: case 583: case 584: case 585: case 586: case 587: case 588: case 589: case 590: case 591: case 592: case 593: case 594: case 595: case 596: case 597: case 598: case 599: case 600: case 601: case 602: case 603: case 604: case 605: case 606: case 607: case 608: case 609: case 610: case 611: case 612: case 613: case 614: case 615: case 616: case 617: case 618: case 619: case 620: case 621: case 622: case 623: case 624: case 625: case 626: case 627: case 628: case 629:
 this.$ = yytext;
break;
case 630: case 631:
 this.$ = eval($$[$0].split("\n").join("\\n"));
break;
case 632: case 633:
 this.$ = { 'S': eval($$[$0].split("\n").join("\\n")).toString() }
break;
case 634:
 this.$ = eval($$[$0]);
break;
case 635:
 this.$ = { 'N': eval($$[$0]).toString() }
break;
case 638:
 this.$ = { 'BOOL': true  }
break;
case 639:
 this.$ = { 'BOOL': false }
break;
case 640:
 this.$ = null;
break;
case 641:
 this.$ = { 'NULL': true }
break;
case 642:
 this.$ = "\0";
break;
case 643:

			if ($$[$0-1].slice(-1) == "\0") {
				this.$ = $$[$0-1].slice(0,-1)
			} else
				this.$ = $$[$0-1];

break;
case 644: case 654:

			this.$ = $$[$0-2]
			this.$.push($$[$0]);

break;
case 646: case 656:
 this.$ = "\0"
break;
case 653:

			if ($$[$0-1].slice(-1) == "\0") {
				$$[$0-1] = $$[$0-1].slice(0,-1)
			}
			this.$ = { 'L': $$[$0-1] }

break;
case 665:

			var $kv = {}
			if ($$[$0-1]) {
				$$[$0-1].map(function(v) {
					if (v)
						$kv[v[0]] = v[1]
				})
			}
			this.$ = $kv

break;
case 666: case 688: case 746: case 749: case 760: case 776: case 797: case 858: case 872: case 889:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 668: case 693: case 791: case 803: case 853: case 856: case 885: case 894:
 this.$ = undefined;
break;
case 669: case 670: case 671: case 672: case 673: case 674: case 675: case 676: case 677: case 678: case 679: case 680: case 681: case 682: case 683: case 684: case 685: case 686: case 694: case 695: case 696: case 697: case 698: case 699: case 700: case 701:
 this.$ = [$$[$0-2], $$[$0] ]
break;
case 687:

			var $kv = {}
			if ($$[$0-1]) {
				$$[$0-1].map(function(v) {
					if (v)
						$kv[v[0]] = v[1]
				})
			}
			this.$ = { 'M': $kv }

break;
case 690: case 691:
 this.$ = eval($$[$0])
break;
case 702:

			if ($$[$0-2].slice(-1) == "\0") {
				$$[$0-2] = $$[$0-2].slice(0,-1)
			}
			this.$ = { 'SS': $$[$0-2] }

break;
case 703: case 709:

			this.$ = $$[$0-2]
			this.$.push($$[$0]);

break;
case 705:

			if ($$[$0-2].slice(-1) == "\0") {
				$$[$0-2] = $$[$0-2].slice(0,-1)
			}
			this.$ = { 'NS': $$[$0-2] }

break;
case 706:

			this.$ = $$[$0-2]
			this.$.push( ($$[$0]).toString() );

break;
case 707:
 this.$ = [ ($$[$0]).toString() ];
break;
case 708:

			this.$ = { 'BS': $$[$0-2] }

break;
case 710: case 772: case 787: case 859: case 875:
 this.$ = [ $$[$0] ];
break;
case 711:

			var date;
			if ($$[$0-1])
				date = new Date($$[$0-1]);
			else
				date = new Date()

			if (typeof date === "object") {
				this.$ = date.toString()
			}
			if (typeof date === "string") {
				this.$ = date
			}
			if (typeof date === "number") {
				this.$ = date
			}

break;
case 712:

			var date;
			if ($$[$0-5])
				date = new Date($$[$0-5]);
			else
				date = new Date()


			if (typeof date[$$[$0-2]] === "function" ) {
				date = date[$$[$0-2]]();
				if (typeof date === "object") {
					this.$ = date.toString()
				}
				if (typeof date === "string") {
					this.$ = date
				}
				if (typeof date === "number") {
					this.$ = date
				}
			} else {
				throw $$[$0-2] + " not a function"
			}

break;
case 713:

			var date;
			if ($$[$0-1])
				date = new Date($$[$0-1]);
			else
				date = new Date()

			if (typeof date === "object") {
				this.$ = { S: date.toString() }
			}
			if (typeof date === "string") {
				this.$ = { S: date }
			}
			if (typeof date === "number") {
				this.$ = { N: date.toString() }
			}

break;
case 714:

			var date;
			if ($$[$0-5])
				date = new Date($$[$0-5]);
			else
				date = new Date()


			if (typeof date[$$[$0-2]] === "function" ) {
				date = date[$$[$0-2]]();
				if (typeof date === "object") {
					this.$ = { S: date.toString() }
				}
				if (typeof date === "string") {
					this.$ = { S: date }
				}
				if (typeof date === "number") {
					this.$ = { N: date.toString() }
				}
			} else {
				throw $$[$0-2] + " not a function"
			}

break;
case 715: case 721:
 this.$ = undefined
break;
case 717:

			if (typeof $$[$0] === "object") {
				this.$ = { S: $$[$0].toString() }
			}
			if (typeof $$[$0] === "string") {
				this.$ = { S: $$[$0] }
			}
			if (typeof $$[$0] === "number") {
				this.$ = { N: $$[$0].toString() }
			}

break;
case 718:

			if (typeof Math[$$[$0-3]] === "function" ) {
				this.$ = Math[$$[$0-3]]($$[$0-1]);
			} else {
				throw 'Math.' + $$[$0-3] + " not a function"
			}

break;
case 720:
 this.$ = 'random'
break;
case 723:

			this.$ =  '########-####-####-####-############'.replace(/[#]/g, function(c) { var r = Math.random()*16|0, v = c == '#' ? r : (r&0x3|0x8); return v.toString(16); })

break;
case 724:

			this.$ =  '########-####-####-####-############'.replace(/[#]/g, function(c) { var r = Math.random()*16|0, v = c == '#' ? r : (r&0x3|0x8); return v.toString(16); })
			if ( typeof $$[$0-1] === 'string')
				this.$ =  $$[$0-1].replace(/[#]/g, function(c) { var r = Math.random()*16|0, v = c == '#' ? r : (r&0x3|0x8); return v.toString(16); })

			if ( typeof $$[$0-1] === 'number')
				this.$ = '#'.repeat(
					Math.max(
						1,
						Math.min(36, $$[$0-1])
					)
				).replace(/[#]/g, function(c) { var r = Math.random()*16|0, v = c == '#' ? r : (r&0x3|0x8); return v.toString(16); })

break;
case 725:

			if ( $$[$0-7] !== 'Buffer')
				throw ('ReferenceError: ' + $$[$0-7] + ' is not defined')

			if ( $$[$0-5] !== 'from')
				throw ('TypeError: Buffer.' + $$[$0-5] + ' is not a function')

			if ( $$[$0-1] !== 'base64')
				throw ('TypeError: Buffer.from - only base64 supported')

			var buf;
			if (typeof Buffer.from === "function") { // Node 5.10+
				buf = Buffer.from( $$[$0-3], $$[$0-1] );
			} else { // older Node versions, now deprecated
				buf = new Buffer( $$[$0-3], $$[$0-1] );
			}
			this.$ = buf;

break;
case 726:

			if (Buffer.isBuffer($$[$0]) ) {
				this.$ = { B: $$[$0] }
				return;
			}
			if (typeof $$[$0] === "object") {
				this.$ = { S: $$[$0].toString() }
			}
			if (typeof $$[$0] === "string") {
				this.$ = { S: $$[$0] }
			}
			if (typeof $$[$0] === "number") {
				this.$ = { N: $$[$0].toString() }
			}

break;
case 729: case 748:
 this.$ = $$[$0-1]
break;
case 730:
 this.$ = $$[$0-2] + $$[$0]
break;
case 731:
 this.$ = $$[$0-2] - $$[$0]
break;
case 732:
 this.$ = $$[$0-2] * $$[$0]
break;
case 733:

			if ($$[$0] === 0 )
				throw 'Division by 0';

			this.$ = $$[$0-2] / $$[$0]

break;
case 742:

			var $kv = {}
			$$[$0].map(function(v) { $kv[v[0]] = v[1] })

			this.$ = {
				statement: 'INSERT',
				operation: 'putItem',
				ignore: $$[$0-4],
				dynamodb: {
					TableName: $$[$0-2],
					Item: $kv,

				},

			};


break;
case 743:

			if ($$[$0].length == 1) {
				this.$ = {
					statement: 'INSERT',
					operation: 'putItem',
					ignore: $$[$0-4],
					dynamodb: {
						TableName: $$[$0-2],
						Item: $$[$0][0].M,
					},

				};
			} else {
				// batch insert
				this.$ = {
					statement: 'BATCHINSERT',
					operation: 'batchWriteItem',
					dynamodb: {
						RequestItems: {}
					}

				}

				var RequestItems = {}

				RequestItems[$$[$0-2]] = []

				$$[$0].map(function(v) {
					RequestItems[$$[$0-2]].push({
						PutRequest: {
							Item: v.M
						}
					})
				})
				this.$.dynamodb.RequestItems = RequestItems;
			}

break;
case 744:
 this.$ = false
break;
case 745:
 this.$ = true
break;
case 751: case 752: case 753: case 754: case 755: case 756: case 757: case 758: case 762: case 763: case 764: case 765: case 766: case 767: case 768: case 769: case 778: case 779: case 780: case 781: case 782: case 783: case 784: case 785: case 832: case 833:
 this.$ = [ $$[$0-2], $$[$0] ];
break;
case 759:


			var Key = {}
			$$[$0].map(function(k) {
				Key[k.k] = k.v
			})
			var Expected = {}
			$$[$0].map(function(k) {
				Expected[k.k] = {
					ComparisonOperator: 'EQ',
					Value: k.v,

				}
			})

			var AttributeUpdates = {}
			$$[$0-2].map(function(k) {
				var Value = k[1]
				var Action = 'PUT' // default

				if (k[2] === '+=')
					Action = 'ADD'

				if (k[2] === 'delete') {
					Action = 'DELETE'

				}

				AttributeUpdates[k[0]] = {
					Action: Action,
					Value: Value,
				}
			})

			this.$ = {
				statement: 'UPDATE',
				operation: 'updateItem',
				dynamodb: {
					TableName: $$[$0-4],
					Key: Key,
					Expected: Expected,
					AttributeUpdates: AttributeUpdates,
				},
			}

break;
case 770:
 this.$ = [ $$[$0-2], $$[$0], '+=' ];
break;
case 771:
 this.$ = [ $$[$0-2], undefined, 'delete' ];
break;
case 773: case 788:
 this.$ = [$$[$0-2], $$[$0]];
break;
case 774: case 789:
 this.$ = {k: $$[$0-2], v: $$[$0] };
break;
case 775:

			var $kv = {}
			$$[$0].map(function(v) {
				$kv[v[0]] = v[1]
			})
			this.$ = {
				statement: 'REPLACE',
				operation: 'putItem',
				dynamodb: {
					TableName: $$[$0-2],
					Item: $kv
				},
			}

break;
case 786:

			var $kv = {}
			$$[$0].map(function(v) { $kv[v.k] = v.v })

			this.$ = {
				statement: 'DELETE',
				operation: 'deleteItem',
				dynamodb: {
					TableName: $$[$0-2],
					Key: $kv,
				}
			}

break;
case 790:

			this.$ = {
				statement: 'SELECT',
				operation: 'query',
				dynamodb: $$[$0-3].dynamodb,
			};
			yy.extend(this.$.dynamodb,$$[$0-2]);
			yy.extend(this.$.dynamodb,$$[$0-1]);
			yy.extend(this.$.dynamodb,$$[$0]);

break;
case 792:
 this.$ = { Limit: $$[$0] };
break;
case 793:
 this.$ = { ScanIndexForward: true };
break;
case 794:
 this.$ = { ScanIndexForward: false };
break;
case 795: case 887:
 this.$ = { ConsistentRead: false };
break;
case 796:
 this.$ = { ConsistentRead: true };
break;
case 799: case 891:
 this.$ = {type: 'star', star:true};
break;
case 800: case 892:
 this.$ = {type: 'column', column: $$[$0]};
break;
case 801: case 893:
 this.$ = {type: 'column', column: $$[$0-2], alias: $$[$0] };
break;
case 805:

			this.$ = {
				//KeyConditionExpression: $$[$0],
				ExpressionAttributeNames: {},
				ExpressionAttributeValues: {},
			};

			this.$.ExpressionAttributeNames[ '#partitionKeyName' ] = $$[$0].partition.partitionKeyName
			this.$.ExpressionAttributeValues[ ':partitionKeyValue' ] = $$[$0].partition.partitionKeyValue
			this.$.KeyConditionExpression = ' #partitionKeyName =  :partitionKeyValue '


break;
case 806:

			this.$ = {
				//KeyConditionExpression: $$[$0-2],
				ExpressionAttributeNames: {},
				ExpressionAttributeValues: {},
			};

			this.$.ExpressionAttributeNames[ '#partitionKeyName' ] = $$[$0-2].partition.partitionKeyName
			this.$.ExpressionAttributeValues[ ':partitionKeyValue' ] = $$[$0-2].partition.partitionKeyValue
			this.$.KeyConditionExpression = ' #partitionKeyName =  :partitionKeyValue '


			if ($$[$0].sort) {
				this.$.ExpressionAttributeNames[ '#sortKeyName' ] = $$[$0].sort.sortKeyName

				switch ($$[$0].sort.op) {
					case '=':
					case '>':
					case '>=':
					case '<':
					case '<=':
						this.$.ExpressionAttributeValues[ ':sortKeyValue' ] = $$[$0].sort.sortKeyValue
						this.$.KeyConditionExpression += ' AND #sortKeyName ' + $$[$0].sort.op + ' :sortKeyValue '

						break;
					case 'BETWEEN':
						this.$.ExpressionAttributeValues[ ':sortKeyValue1' ] = $$[$0].sort.sortKeyValue1
						this.$.ExpressionAttributeValues[ ':sortKeyValue2' ] = $$[$0].sort.sortKeyValue2
						this.$.KeyConditionExpression += ' AND #sortKeyName BETWEEN :sortKeyValue1 AND :sortKeyValue2'
						break;
					case 'BEGINS_WITH':

						if ($$[$0].sort.sortKeyValue.S.slice(-1) !== '%' )
							throw "LIKE '%string' must end with a % for sort key "


						$$[$0].sort.sortKeyValue.S = $$[$0].sort.sortKeyValue.S.slice(0,-1)

						this.$.ExpressionAttributeValues[ ':sortKeyValue' ] = $$[$0].sort.sortKeyValue
						this.$.KeyConditionExpression += ' AND begins_with ( #sortKeyName, :sortKeyValue ) '

						break;
				}

			}



break;
case 807: case 896:
 this.$ = {having: $$[$0]};
break;
case 809:

			this.$ = {
				dynamodb: {
					TableName: $$[$0-3],
					IndexName: $$[$0-2],
				},
				columns:$$[$0-4]
			};

			yy.extend(this.$.dynamodb,$$[$0-1]);
			yy.extend(this.$.dynamodb,$$[$0]);

			// if we have star, then the rest does not matter
			if (this.$.columns.filter(function(c) { return c.type === 'star'}).length === 0) {
				if (!this.$.dynamodb.hasOwnProperty('ExpressionAttributeNames'))
					this.$.dynamodb.ExpressionAttributeNames = {}

				var ExpressionAttributeNames_from_projection = { }
				var ProjectionExpression = []
				this.$.columns.map(function(c) {
					if (c.type === "column") {
						var replaced_name = '#projection_' + c.column.split('-').join('_minus_').split('.').join('_dot_')
						ExpressionAttributeNames_from_projection[replaced_name] = c.column;
						ProjectionExpression.push(replaced_name)
					}

				})

				yy.extend(this.$.dynamodb.ExpressionAttributeNames,ExpressionAttributeNames_from_projection);

				if (ProjectionExpression.length)
					this.$.dynamodb.ProjectionExpression = ProjectionExpression.join(' , ')

			}



break;
case 811: case 838: case 900:
 this.$ = {bind_parameter: $$[$0]};
break;
case 812: case 839: case 901:
 this.$ = {column: $$[$0]};
break;
case 813: case 840: case 902:
 this.$ = {op: 'AND', left: $$[$0-2], right: $$[$0]};
break;
case 814: case 841: case 903:
 this.$ = {op: 'OR', left: $$[$0-2], right: $$[$0]};
break;
case 815: case 842: case 904:
 this.$ = {op: '=', left: $$[$0-2], right: $$[$0]};
break;
case 816: case 843: case 905:
 this.$ = {op: '>', left: $$[$0-2], right: $$[$0]};
break;
case 817: case 844: case 906:
 this.$ = {op: '>=', left: $$[$0-2], right: $$[$0]};
break;
case 818: case 845: case 907:
 this.$ = {op: '<', left: $$[$0-2], right: $$[$0]};
break;
case 819: case 846: case 908:
 this.$ = {op: '<=', left: $$[$0-2], right: $$[$0]};
break;
case 820: case 847: case 909:
 this.$ = {op: 'BETWEEN', left: $$[$0-2], right:$$[$0] };
break;
case 821: case 848: case 910:
 this.$ = {op: 'LIKE', left:$$[$0-2], right: { type: 'string', string: $$[$0] } };
break;
case 822:

			this.$ = {
				partition: {
					partitionKeyName: $$[$0-2],
					partitionKeyValue: $$[$0]
				}
			}

break;
case 824:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '='
				}
			}

break;
case 825:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '>'
				}
			}

break;
case 826:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '>='
				}
			}

break;
case 827:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '<'
				}
			}

break;
case 828:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '<='
				}
			}

break;
case 829:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue1: $$[$0][0],
					sortKeyValue2: $$[$0][1],
					op: 'BETWEEN'
				}
			}

break;
case 830:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: 'BEGINS_WITH'
				}
			}

break;
case 834:
 this.$ = {left: { type: 'number', number: $$[$0-2]}, right: {type: 'number', number: $$[$0] } };
break;
case 835:
 this.$ = {left: { type: 'string', string: $$[$0-2]}, right: {type: 'string', string: $$[$0] } };
break;
case 849: case 911:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'string', string: $$[$0] } };
break;
case 850: case 912:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'number', number: $$[$0] } };
break;
case 851: case 913:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'boolean', value: $$[$0] } };
break;
case 852:

			this.$ = {
				statement: 'CREATE_TABLE',
				operation: 'createTable',
				dynamodb: {
					TableName: $$[$0-6],
					BillingMode: $$[$0-8],
					AttributeDefinitions: $$[$0-4],
				}

			};
			yy.extend(this.$.dynamodb,$$[$0-2]); // extend with pk
			yy.extend(this.$.dynamodb,$$[$0-1]); // extend with indexes

break;
case 857:

			var indexes = {
				LocalSecondaryIndexes: [],
				GlobalSecondaryIndexes: []
			}

			$$[$0].map(function(idx) {
				if (idx.hasOwnProperty('LSI'))
					indexes.LocalSecondaryIndexes.push(idx.LSI)
				if (idx.hasOwnProperty('GSI'))
					indexes.GlobalSecondaryIndexes.push(idx.GSI)
			})
			this.$ = indexes

break;
case 860:

			this.$ = {}
			this.$[$$[$0-4]] = {
				IndexName: $$[$0-5],
				KeySchema: [ { AttributeName: $$[$0-2], KeyType: 'HASH' } ],
				Projection: $$[$0],
			}

break;
case 861:

			this.$ = {}
			this.$[$$[$0-5]] = {
				IndexName: $$[$0-6],
				KeySchema: [ { AttributeName: $$[$0-3], KeyType: 'HASH' } ],
				Projection: $$[$0-1],
				ProvisionedThroughput: $$[$0]
			}

break;
case 862:

			this.$ = {}
			this.$[$$[$0-6]] = {
				IndexName: $$[$0-7],
				KeySchema: [ { AttributeName: $$[$0-4], KeyType: 'HASH' }, { AttributeName: $$[$0-2], KeyType: 'RANGE' } ],
				Projection: $$[$0],
			}

break;
case 863:

			this.$ = {}
			this.$[$$[$0-7]] = {
				IndexName: $$[$0-8],
				KeySchema: [ { AttributeName: $$[$0-5], KeyType: 'HASH' }, { AttributeName: $$[$0-3], KeyType: 'RANGE' } ],
				Projection: $$[$0-1],
				ProvisionedThroughput: $$[$0]
			}

break;
case 864:
 this.$ = { KeySchema: [ { AttributeName: $$[$0-2], KeyType: 'HASH' }], ProvisionedThroughput: $$[$0] }
break;
case 865:
 this.$ = { KeySchema: [ { AttributeName: $$[$0-4], KeyType: 'HASH' } , { AttributeName: $$[$0-2], KeyType: 'RANGE' } ], ProvisionedThroughput: $$[$0] }
break;
case 866:
 this.$ = { ReadCapacityUnits: 1, WriteCapacityUnits: 1 };
break;
case 867:
 this.$ = { ReadCapacityUnits: eval($$[$0-1]), WriteCapacityUnits: eval($$[$0]) }
break;
case 868: case 869:
 this.$ = { ProjectionType: 'ALL' };
break;
case 870:
 this.$ = { ProjectionType: 'KEYS_ONLY' }
break;
case 871:
 this.$ = { ProjectionType: 'INCLUDE', NonKeyAttributes: $$[$0-1] }
break;
case 874:
 this.$ = $$[$0-2]; this.$.push($$[$0])
break;
case 876:
 this.$ = { AttributeName: $$[$0-1], AttributeType: 'S'};
break;
case 877:
 this.$ = { AttributeName: $$[$0-1], AttributeType: 'N'};
break;
case 878:
 this.$ = { AttributeName: $$[$0-1], AttributeType: 'B'};
break;
case 879:

			this.$ = {
				statement: 'SHOW_TABLES',
				operation: 'listTables',
				dynamodb: {}
			}

break;
case 880:

			this.$ = {
				statement: 'DROP_TABLE',
				operation: 'deleteTable',
				dynamodb: {
					TableName: $$[$0]
				}
			};

break;
case 881:

			this.$ = {
				statement: 'DESCRIBE_TABLE',
				operation: 'describeTable',
				dynamodb: {
					TableName: $$[$0]
				}
			};

break;
case 882:

			this.$ = {
				statement: 'DROP_INDEX',
				operation: 'updateTable',
				dynamodb: {
					TableName: $$[$0],
					GlobalSecondaryIndexUpdates: [
						{
							Delete: {
								IndexName: $$[$0-2]
							}
						}
					]
				}
			};

break;
case 883:

			this.$ = {
				statement: $$[$0-2].statement,
				operation: 'scan',
				dynamodb: $$[$0-2].dynamodb,
			};

			this.$.columns = $$[$0-2].columns
			this.$.having  = Object.keys($$[$0-2].having).length ? $$[$0-2].having : undefined;

			yy.extend(this.$.dynamodb, $$[$0-1]);
			yy.extend(this.$.dynamodb, $$[$0]);

break;
case 884:

			this.$ = {
				dynamodb: {
					TableName: $$[$0-3],
					IndexName: $$[$0-2],
				},
				statement: 'SCAN',
				columns:$$[$0-5],
				having: {},
			};
			yy.extend(this.$,$$[$0-1]); // filter

			if ($$[$0] && $$[$0].type === 'stream')
				this.$.statement = 'SCAN_DUMP_STREAM'

			// if we have star, then the rest does not matter
			if (this.$.columns.filter(function(c) { return c.type === 'star'}).length === 0) {
				if (!this.$.dynamodb.hasOwnProperty('ExpressionAttributeNames'))
					this.$.dynamodb.ExpressionAttributeNames = {}

				var ExpressionAttributeNames_from_projection = { }
				var ProjectionExpression = []
				this.$.columns.map(function(c) {
					if (c.type === "column") {
						var replaced_name = '#projection_' + c.column.split('-').join('_minus_').split('.').join('_dot_')
						ExpressionAttributeNames_from_projection[replaced_name] = c.column;
						ProjectionExpression.push(replaced_name)
					}
				})

				yy.extend(this.$.dynamodb.ExpressionAttributeNames,ExpressionAttributeNames_from_projection);

				if (ProjectionExpression.length)
					this.$.dynamodb.ProjectionExpression = ProjectionExpression.join(' , ')

			}



break;
case 886:
 this.$ = {Limit: $$[$0]};
break;
case 888:
 this.$ = { ConsistentRead: true  };
break;
case 914:

			this.$ = { type: 'stream' };

break;
case 916:

			this.$ = $$[$0]

break;
}
},
table: [{3:1,4:2,7:3,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,71:$V0,161:$V1,182:$V2,187:$V3,200:$V4,300:$V5,465:$V6,493:$V7,502:$V8,516:$V9,598:$Va,701:16,734:25},{1:[3]},{5:[1,29],6:[1,30]},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),o($Vc,[2,793],{702:31,186:[1,32]}),{280:[1,34],306:[2,744],686:33},{21:$Vd,22:$Ve,23:36,24:39,28:35,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{306:[1,633]},{254:[1,634]},{68:[1,636],69:[1,637],558:[2,853],724:635},{59:[1,638]},{288:[1,640],558:[1,639]},{558:[1,641]},o($Vu9,[2,885],{735:642,329:[1,643]}),{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:644,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646},{20:664,21:$VD9,22:$VE9,684:$VF9,705:661,706:662},{20:670,21:$VD9,22:$VE9,684:$VG9,737:667,741:668},{1:[2,1]},{7:671,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,71:$V0,161:$V1,182:$V2,187:$V3,200:$V4,300:$V5,465:$V6,493:$V7,502:$V8,516:$V9,598:$Va,701:16,734:25},o($Vu9,[2,791],{703:672,329:[1,673]}),o($Vc,[2,794]),{306:[1,674]},{306:[2,745]},{510:[1,675]},o([5,6,50,272,306,329,510,602,610,623,666],[2,24]),o($VH9,[2,18]),o($VH9,[2,19]),o($VH9,[2,20]),o($VH9,[2,740]),o($VH9,[2,741]),o($VH9,[2,39]),o($VH9,[2,40]),o($VH9,[2,41]),o($VH9,[2,42]),o($VH9,[2,43]),o($VH9,[2,44]),o($VH9,[2,45]),o($VH9,[2,46]),o($VH9,[2,47]),o($VH9,[2,48]),o($VH9,[2,49]),o($VH9,[2,50]),o($VH9,[2,51]),o($VH9,[2,52]),o($VH9,[2,53]),o($VH9,[2,54]),o($VH9,[2,55]),o($VH9,[2,56]),o($VH9,[2,57]),o($VH9,[2,58]),o($VH9,[2,59]),o($VH9,[2,60]),o($VH9,[2,61]),o($VH9,[2,62]),o($VH9,[2,63]),o($VH9,[2,64]),o($VH9,[2,65]),o($VH9,[2,66]),o($VH9,[2,67]),o($VH9,[2,68]),o($VH9,[2,69]),o($VH9,[2,70]),o($VH9,[2,71]),o($VH9,[2,72]),o($VH9,[2,73]),o($VH9,[2,74]),o($VH9,[2,75]),o($VH9,[2,76]),o($VH9,[2,77]),o($VH9,[2,78]),o($VH9,[2,79]),o($VH9,[2,80]),o($VH9,[2,81]),o($VH9,[2,82]),o($VH9,[2,83]),o($VH9,[2,84]),o($VH9,[2,85]),o($VH9,[2,86]),o($VH9,[2,87]),o($VH9,[2,88]),o($VH9,[2,89]),o($VH9,[2,90]),o($VH9,[2,91]),o($VH9,[2,92]),o($VH9,[2,93]),o($VH9,[2,94]),o($VH9,[2,95]),o($VH9,[2,96]),o($VH9,[2,97]),o($VH9,[2,98]),o($VH9,[2,99]),o($VH9,[2,100]),o($VH9,[2,101]),o($VH9,[2,102]),o($VH9,[2,103]),o($VH9,[2,104]),o($VH9,[2,105]),o($VH9,[2,106]),o($VH9,[2,107]),o($VH9,[2,108]),o($VH9,[2,109]),o($VH9,[2,110]),o($VH9,[2,111]),o($VH9,[2,112]),o($VH9,[2,113]),o($VH9,[2,114]),o($VH9,[2,115]),o($VH9,[2,116]),o($VH9,[2,117]),o($VH9,[2,118]),o($VH9,[2,119]),o($VH9,[2,120]),o($VH9,[2,121]),o($VH9,[2,122]),o($VH9,[2,123]),o($VH9,[2,124]),o($VH9,[2,125]),o($VH9,[2,126]),o($VH9,[2,127]),o($VH9,[2,128]),o($VH9,[2,129]),o($VH9,[2,130]),o($VH9,[2,131]),o($VH9,[2,132]),o($VH9,[2,133]),o($VH9,[2,134]),o($VH9,[2,135]),o($VH9,[2,136]),o($VH9,[2,137]),o($VH9,[2,138]),o($VH9,[2,139]),o($VH9,[2,140]),o($VH9,[2,141]),o($VH9,[2,142]),o($VH9,[2,143]),o($VH9,[2,144]),o($VH9,[2,145]),o($VH9,[2,146]),o($VH9,[2,147]),o($VH9,[2,148]),o($VH9,[2,149]),o($VH9,[2,150]),o($VH9,[2,151]),o($VH9,[2,152]),o($VH9,[2,153]),o($VH9,[2,154]),o($VH9,[2,155]),o($VH9,[2,156]),o($VH9,[2,157]),o($VH9,[2,158]),o($VH9,[2,159]),o($VH9,[2,160]),o($VH9,[2,161]),o($VH9,[2,162]),o($VH9,[2,163]),o($VH9,[2,164]),o($VH9,[2,165]),o($VH9,[2,166]),o($VH9,[2,167]),o($VH9,[2,168]),o($VH9,[2,169]),o($VH9,[2,170]),o($VH9,[2,171]),o($VH9,[2,172]),o($VH9,[2,173]),o($VH9,[2,174]),o($VH9,[2,175]),o($VH9,[2,176]),o($VH9,[2,177]),o($VH9,[2,178]),o($VH9,[2,179]),o($VH9,[2,180]),o($VH9,[2,181]),o($VH9,[2,182]),o($VH9,[2,183]),o($VH9,[2,184]),o($VH9,[2,185]),o($VH9,[2,186]),o($VH9,[2,187]),o($VH9,[2,188]),o($VH9,[2,189]),o($VH9,[2,190]),o($VH9,[2,191]),o($VH9,[2,192]),o($VH9,[2,193]),o($VH9,[2,194]),o($VH9,[2,195]),o($VH9,[2,196]),o($VH9,[2,197]),o($VH9,[2,198]),o($VH9,[2,199]),o($VH9,[2,200]),o($VH9,[2,201]),o($VH9,[2,202]),o($VH9,[2,203]),o($VH9,[2,204]),o($VH9,[2,205]),o($VH9,[2,206]),o($VH9,[2,207]),o($VH9,[2,208]),o($VH9,[2,209]),o($VH9,[2,210]),o($VH9,[2,211]),o($VH9,[2,212]),o($VH9,[2,213]),o($VH9,[2,214]),o($VH9,[2,215]),o($VH9,[2,216]),o($VH9,[2,217]),o($VH9,[2,218]),o($VH9,[2,219]),o($VH9,[2,220]),o($VH9,[2,221]),o($VH9,[2,222]),o($VH9,[2,223]),o($VH9,[2,224]),o($VH9,[2,225]),o($VH9,[2,226]),o($VH9,[2,227]),o($VH9,[2,228]),o($VH9,[2,229]),o($VH9,[2,230]),o($VH9,[2,231]),o($VH9,[2,232]),o($VH9,[2,233]),o($VH9,[2,234]),o($VH9,[2,235]),o($VH9,[2,236]),o($VH9,[2,237]),o($VH9,[2,238]),o($VH9,[2,239]),o($VH9,[2,240]),o($VH9,[2,241]),o($VH9,[2,242]),o($VH9,[2,243]),o($VH9,[2,244]),o($VH9,[2,245]),o($VH9,[2,246]),o($VH9,[2,247]),o($VH9,[2,248]),o($VH9,[2,249]),o($VH9,[2,250]),o($VH9,[2,251]),o($VH9,[2,252]),o($VH9,[2,253]),o($VH9,[2,254]),o($VH9,[2,255]),o($VH9,[2,256]),o($VH9,[2,257]),o($VH9,[2,258]),o($VH9,[2,259]),o($VH9,[2,260]),o($VH9,[2,261]),o($VH9,[2,262]),o($VH9,[2,263]),o($VH9,[2,264]),o($VH9,[2,265]),o($VH9,[2,266]),o($VH9,[2,267]),o($VH9,[2,268]),o($VH9,[2,269]),o($VH9,[2,270]),o($VH9,[2,271]),o($VH9,[2,272]),o($VH9,[2,273]),o($VH9,[2,274]),o($VH9,[2,275]),o($VH9,[2,276]),o($VH9,[2,277]),o($VH9,[2,278]),o($VH9,[2,279]),o($VH9,[2,280]),o($VH9,[2,281]),o($VH9,[2,282]),o($VH9,[2,283]),o($VH9,[2,284]),o($VH9,[2,285]),o($VH9,[2,286]),o($VH9,[2,287]),o($VH9,[2,288]),o($VH9,[2,289]),o($VH9,[2,290]),o($VH9,[2,291]),o($VH9,[2,292]),o($VH9,[2,293]),o($VH9,[2,294]),o($VH9,[2,295]),o($VH9,[2,296]),o($VH9,[2,297]),o($VH9,[2,298]),o($VH9,[2,299]),o($VH9,[2,300]),o($VH9,[2,301]),o($VH9,[2,302]),o($VH9,[2,303]),o($VH9,[2,304]),o($VH9,[2,305]),o($VH9,[2,306]),o($VH9,[2,307]),o($VH9,[2,308]),o($VH9,[2,309]),o($VH9,[2,310]),o($VH9,[2,311]),o($VH9,[2,312]),o($VH9,[2,313]),o($VH9,[2,314]),o($VH9,[2,315]),o($VH9,[2,316]),o($VH9,[2,317]),o($VH9,[2,318]),o($VH9,[2,319]),o($VH9,[2,320]),o($VH9,[2,321]),o($VH9,[2,322]),o($VH9,[2,323]),o($VH9,[2,324]),o($VH9,[2,325]),o($VH9,[2,326]),o($VH9,[2,327]),o($VH9,[2,328]),o($VH9,[2,329]),o($VH9,[2,330]),o($VH9,[2,331]),o($VH9,[2,332]),o($VH9,[2,333]),o($VH9,[2,334]),o($VH9,[2,335]),o($VH9,[2,336]),o($VH9,[2,337]),o($VH9,[2,338]),o($VH9,[2,339]),o($VH9,[2,340]),o($VH9,[2,341]),o($VH9,[2,342]),o($VH9,[2,343]),o($VH9,[2,344]),o($VH9,[2,345]),o($VH9,[2,346]),o($VH9,[2,347]),o($VH9,[2,348]),o($VH9,[2,349]),o($VH9,[2,350]),o($VH9,[2,351]),o($VH9,[2,352]),o($VH9,[2,353]),o($VH9,[2,354]),o($VH9,[2,355]),o($VH9,[2,356]),o($VH9,[2,357]),o($VH9,[2,358]),o($VH9,[2,359]),o($VH9,[2,360]),o($VH9,[2,361]),o($VH9,[2,362]),o($VH9,[2,363]),o($VH9,[2,364]),o($VH9,[2,365]),o($VH9,[2,366]),o($VH9,[2,367]),o($VH9,[2,368]),o($VH9,[2,369]),o($VH9,[2,370]),o($VH9,[2,371]),o($VH9,[2,372]),o($VH9,[2,373]),o($VH9,[2,374]),o($VH9,[2,375]),o($VH9,[2,376]),o($VH9,[2,377]),o($VH9,[2,378]),o($VH9,[2,379]),o($VH9,[2,380]),o($VH9,[2,381]),o($VH9,[2,382]),o($VH9,[2,383]),o($VH9,[2,384]),o($VH9,[2,385]),o($VH9,[2,386]),o($VH9,[2,387]),o($VH9,[2,388]),o($VH9,[2,389]),o($VH9,[2,390]),o($VH9,[2,391]),o($VH9,[2,392]),o($VH9,[2,393]),o($VH9,[2,394]),o($VH9,[2,395]),o($VH9,[2,396]),o($VH9,[2,397]),o($VH9,[2,398]),o($VH9,[2,399]),o($VH9,[2,400]),o($VH9,[2,401]),o($VH9,[2,402]),o($VH9,[2,403]),o($VH9,[2,404]),o($VH9,[2,405]),o($VH9,[2,406]),o($VH9,[2,407]),o($VH9,[2,408]),o($VH9,[2,409]),o($VH9,[2,410]),o($VH9,[2,411]),o($VH9,[2,412]),o($VH9,[2,413]),o($VH9,[2,414]),o($VH9,[2,415]),o($VH9,[2,416]),o($VH9,[2,417]),o($VH9,[2,418]),o($VH9,[2,419]),o($VH9,[2,420]),o($VH9,$VI9),o($VH9,[2,422]),o($VH9,[2,423]),o($VH9,[2,424]),o($VH9,[2,425]),o($VH9,[2,426]),o($VH9,[2,427]),o($VH9,[2,428]),o($VH9,[2,429]),o($VH9,[2,430]),o($VH9,[2,431]),o($VH9,[2,432]),o($VH9,[2,433]),o($VH9,[2,434]),o($VH9,[2,435]),o($VH9,[2,436]),o($VH9,[2,437]),o($VH9,[2,438]),o($VH9,[2,439]),o($VH9,[2,440]),o($VH9,[2,441]),o($VH9,[2,442]),o($VH9,[2,443]),o($VH9,[2,444]),o($VH9,[2,445]),o($VH9,[2,446]),o($VH9,[2,447]),o($VH9,[2,448]),o($VH9,[2,449]),o($VH9,[2,450]),o($VH9,[2,451]),o($VH9,[2,452]),o($VH9,[2,453]),o($VH9,[2,454]),o($VH9,[2,455]),o($VH9,[2,456]),o($VH9,[2,457]),o($VH9,[2,458]),o($VH9,[2,459]),o($VH9,[2,460]),o($VH9,[2,461]),o($VH9,[2,462]),o($VH9,[2,463]),o($VH9,[2,464]),o($VH9,[2,465]),o($VH9,[2,466]),o($VH9,[2,467]),o($VH9,[2,468]),o($VH9,[2,469]),o($VH9,[2,470]),o($VH9,[2,471]),o($VH9,[2,472]),o($VH9,[2,473]),o($VH9,[2,474]),o($VH9,[2,475]),o($VH9,[2,476]),o($VH9,[2,477]),o($VH9,[2,478]),o($VH9,[2,479]),o($VH9,[2,480]),o($VH9,[2,481]),o($VH9,[2,482]),o($VH9,[2,483]),o($VH9,[2,484]),o($VH9,[2,485]),o($VH9,[2,486]),o($VH9,[2,487]),o($VH9,[2,488]),o($VH9,[2,489]),o($VH9,[2,490]),o($VH9,[2,491]),o($VH9,[2,492]),o($VH9,[2,493]),o($VH9,[2,494]),o($VH9,[2,495]),o($VH9,[2,496]),o($VH9,[2,497]),o($VH9,[2,498]),o($VH9,[2,499]),o($VH9,[2,500]),o($VH9,[2,501]),o($VH9,[2,502]),o($VH9,[2,503]),o($VH9,[2,504]),o($VH9,[2,505]),o($VH9,[2,506]),o($VH9,[2,507]),o($VH9,[2,508]),o($VH9,[2,509]),o($VH9,[2,510]),o($VH9,[2,511]),o($VH9,[2,512]),o($VH9,[2,513]),o($VH9,[2,514]),o($VH9,[2,515]),o($VH9,[2,516]),o($VH9,[2,517]),o($VH9,[2,518]),o($VH9,[2,519]),o($VH9,[2,520]),o($VH9,[2,521]),o($VH9,[2,522]),o($VH9,[2,523]),o($VH9,[2,524]),o($VH9,[2,525]),o($VH9,[2,526]),o($VH9,[2,527]),o($VH9,[2,528]),o($VH9,[2,529]),o($VH9,[2,530]),o($VH9,[2,531]),o($VH9,[2,532]),o($VH9,[2,533]),o($VH9,[2,534]),o($VH9,[2,535]),o($VH9,[2,536]),o($VH9,[2,537]),o($VH9,[2,538]),o($VH9,[2,539]),o($VH9,[2,540]),o($VH9,[2,541]),o($VH9,[2,542]),o($VH9,[2,543]),o($VH9,[2,544]),o($VH9,[2,545]),o($VH9,[2,546]),o($VH9,[2,547]),o($VH9,[2,548]),o($VH9,[2,549]),o($VH9,[2,550]),o($VH9,[2,551]),o($VH9,[2,552]),o($VH9,[2,553]),o($VH9,[2,554]),o($VH9,[2,555]),o($VH9,[2,556]),o($VH9,[2,557]),o($VH9,[2,558]),o($VH9,[2,559]),o($VH9,[2,560]),o($VH9,[2,561]),o($VH9,[2,562]),o($VH9,[2,563]),o($VH9,[2,564]),o($VH9,[2,565]),o($VH9,[2,566]),o($VH9,[2,567]),o($VH9,[2,568]),o($VH9,[2,569]),o($VH9,[2,570]),o($VH9,[2,571]),o($VH9,[2,572]),o($VH9,[2,573]),o($VH9,[2,574]),o($VH9,[2,575]),o($VH9,[2,576]),o($VH9,[2,577]),o($VH9,[2,578]),o($VH9,[2,579]),o($VH9,[2,580]),o($VH9,[2,581]),o($VH9,[2,582]),o($VH9,[2,583]),o($VH9,[2,584]),o($VH9,[2,585]),o($VH9,[2,586]),o($VH9,[2,587]),o($VH9,[2,588]),o($VH9,[2,589]),o($VH9,[2,590]),o($VH9,[2,591]),o($VH9,[2,592]),o($VH9,[2,593]),o($VH9,[2,594]),o($VH9,[2,595]),o($VH9,[2,596]),o($VH9,[2,597]),o($VH9,[2,598]),o($VH9,[2,599]),o($VH9,[2,600]),o($VH9,[2,601]),o($VH9,[2,602]),o($VH9,[2,603]),o($VH9,[2,604]),o($VH9,[2,605]),o($VH9,[2,606]),o($VH9,[2,607]),o($VH9,[2,608]),o($VH9,[2,609]),o($VH9,[2,610]),o($VH9,[2,611]),o($VH9,[2,612]),o($VH9,[2,613]),o($VH9,[2,614]),o($VH9,[2,615]),o($VH9,[2,616]),o($VH9,[2,617]),o($VH9,[2,618]),o($VH9,[2,619]),o($VH9,[2,620]),o($VH9,[2,621]),o($VH9,[2,622]),o($VH9,[2,623]),o($VH9,[2,624]),o($VH9,[2,625]),o($VH9,[2,626]),o($VH9,[2,627]),o($VH9,[2,628]),o($VH9,[2,629]),{21:$Vd,22:$Ve,23:36,24:39,28:676,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{21:$Vd,22:$Ve,23:36,24:39,28:677,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{558:[1,678]},{558:[2,854]},{558:[2,855]},o($Vb,[2,879]),{21:$Vd,22:$Ve,23:36,24:39,28:679,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{21:$Vd,22:$Ve,23:681,24:39,29:680,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{21:$Vd,22:$Ve,23:36,24:39,28:682,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},o($Vb,[2,887],{736:683,50:[1,684]}),{33:685,34:$VJ9},o($Vb,[2,916]),o([5,6,50,76,186,272,329,623,646,647,660],[2,726],{356:$VK9,683:$VL9,684:$VM9,685:$VN9}),o($VO9,[2,728]),{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,666:$VC9,671:651,672:648,675:691,677:649,680:650,682:646},o($VO9,[2,734]),o($VO9,[2,735]),o($VO9,[2,736]),o($VO9,[2,737]),o($VO9,[2,738]),o($VO9,[2,739]),{169:$VP9},{26:[1,693]},{666:[1,694]},{26:[1,695]},o($VO9,[2,634]),o($VO9,[2,630]),o($VO9,[2,631]),{254:[1,698],647:[1,697],707:696},o($VQ9,[2,798]),o($VQ9,[2,799]),o($VQ9,[2,800],{80:[1,699]}),o($VR9,[2,16]),o($VR9,[2,17]),{254:[1,700],647:[1,701]},o($VQ9,[2,890]),o($VQ9,[2,891]),o($VQ9,[2,892],{80:[1,702]}),o($Vb,[2,2]),o($Vb,[2,795],{704:703,50:[1,704]}),{33:705,34:$VJ9},{21:$Vd,22:$Ve,23:36,24:39,28:706,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{21:$Vd,22:$Ve,23:710,24:39,30:709,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,692:707,694:708},{510:[1,711]},{623:[1,712]},{21:$Vd,22:$Ve,23:36,24:39,28:713,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},o($Vb,[2,880]),{386:[1,714]},o([5,6,50,63,64,272,306,329,386,623],[2,25]),o($Vb,[2,881]),o($Vb,[2,883]),o($Vb,[2,888]),o($Vu9,[2,886]),o([5,6,34,50,55,76,101,186,306,328,329,393,647,668,691,716,717,718,719],[2,29]),{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,666:$VC9,671:651,672:648,675:715,677:649,680:650,682:646},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,666:$VC9,671:651,672:648,675:716,677:649,680:650,682:646},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,666:$VC9,671:651,672:648,675:717,677:649,680:650,682:646},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,666:$VC9,671:651,672:648,675:718,677:649,680:650,682:646},{356:$VK9,668:[1,719],683:$VL9,684:$VM9,685:$VN9},{666:[1,720]},{21:[1,722],442:[1,723],678:721},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,666:$VC9,668:[1,724],671:651,672:648,675:726,677:649,680:650,681:725,682:646},{254:[1,727]},{602:[1,729],623:[2,803],708:728},{20:664,21:$VD9,22:$VE9,684:$VF9,706:730},{21:$Vd,22:$Ve,23:36,24:39,28:731,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{20:732,21:$VD9,22:$VE9},{21:$Vd,22:$Ve,23:36,24:39,28:733,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{20:670,21:$VD9,22:$VE9,684:$VG9,741:734},{20:735,21:$VD9,22:$VE9},o($Vb,[2,790]),o($Vb,[2,796]),o($Vu9,[2,792]),{510:[1,736],610:[1,737]},{623:[1,738],647:[1,739]},o($VS9,[2,761]),{691:[1,740],695:[1,741]},o([34,101,103,328,545,647,662,668,691,695,716,717,718,719],[2,26]),{21:$Vd,22:$Ve,23:710,24:39,30:744,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,697:742,698:743},{21:$Vd,22:$Ve,23:710,24:39,30:747,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,699:745,700:746},{666:[1,748]},{21:$Vd,22:$Ve,23:36,24:39,28:749,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},o($VT9,[2,730],{684:$VM9,685:$VN9}),o($VT9,[2,731],{684:$VM9,685:$VN9}),o($VO9,[2,732]),o($VO9,[2,733]),o($VO9,[2,729]),{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,666:$VC9,668:[2,715],671:651,672:648,673:750,675:751,677:649,680:650,682:646},{666:[1,752]},{666:[2,719]},{666:[2,720]},o($VO9,[2,723]),{668:[1,753]},{356:$VK9,668:[2,727],683:$VL9,684:$VM9,685:$VN9},{666:[1,754]},{623:[1,756],709:755},{288:[1,757]},o($VQ9,[2,797]),o([602,623],[2,802]),o($VQ9,[2,801]),o($VU9,[2,894],{738:758,602:[1,759]}),o($VQ9,[2,889]),o($VQ9,[2,893]),{21:$Vd,22:$Ve,23:710,24:39,30:762,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,687:760,690:761},{666:$VV9,688:763,689:764},{20:768,21:$VD9,22:$VE9,693:766,696:767},{21:$Vd,22:$Ve,23:710,24:39,30:709,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,694:769},{34:$Vv9,36:$Vw9,37:$Vx9,41:$VW9,42:$VX9,46:$Vy9,57:[1,785],70:$Vz9,373:$VY9,378:$VZ9,606:$VB9,634:653,636:652,639:771,641:772,642:778,644:$V_9,650:774,653:770,654:773,655:776,656:775,657:777,658:$V$9,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:786,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646},o($Vb,[2,775],{647:[1,787]}),o($V0a,[2,777]),{691:[1,788]},o($Vb,[2,786]),o($Vb,[2,787],{76:[1,789]}),{691:[1,790]},{21:$Vd,22:$Ve,23:710,24:39,30:793,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,725:791,733:792},o($Vb,[2,882]),{668:[1,794]},{356:$VK9,668:[2,716],683:$VL9,684:$VM9,685:$VN9},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,666:$VC9,668:[2,721],671:651,672:648,675:796,677:649,679:795,680:650,682:646},o($VO9,[2,724]),{36:$Vw9,37:$Vx9,634:797},o($V1a,[2,808],{712:798,272:[1,799]}),{21:$Vd,22:$Ve,23:710,24:39,30:801,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,710:800},{21:$Vd,22:$Ve,23:681,24:39,29:802,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},o($V2a,[2,897],{739:803,272:[1,804]}),{288:[1,805]},o($Vb,[2,742],{647:[1,806]}),o($V0a,[2,750]),{691:[1,807]},o($Vb,[2,743],{647:[1,808]}),o($V0a,[2,747]),{654:809,658:$V$9},o($Vb,[2,759]),o($Vb,[2,772],{76:[1,810]}),{691:[1,811]},o($VS9,[2,760]),o($VS9,[2,762]),o($VS9,[2,763]),o($VS9,[2,764]),o($VS9,[2,765]),o($VS9,[2,766]),o($VS9,[2,767]),o($VS9,[2,768]),o($VS9,[2,769]),o($VS9,[2,771]),o($V3a,[2,638]),o($V3a,[2,639]),o($V3a,[2,641]),o($V4a,$V5a,{24:39,44:40,72:41,23:710,663:812,664:813,665:814,30:817,21:$Vd,22:$Ve,34:$Vf,36:$V6a,37:$V7a,41:$Vg,42:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9}),o($V8a,$V9a,{675:645,682:646,672:648,677:649,680:650,671:651,636:652,634:653,651:818,652:819,653:820,639:821,641:822,650:823,654:824,655:825,656:826,657:827,34:$Vv9,36:$Vw9,37:$Vx9,41:$VW9,42:$VX9,46:$Vy9,70:$Vz9,373:$VY9,378:$VZ9,606:$VB9,644:$V_9,658:$V$9,666:$VC9}),{60:[1,828],61:[1,829],62:[1,830],169:$VP9},o($VS9,[2,642]),o($VS9,[2,770]),{21:$Vd,22:$Ve,23:710,24:39,30:744,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,698:831},{34:$Vv9,36:$Vw9,37:$Vx9,41:$VW9,42:$VX9,46:$Vy9,70:$Vz9,373:$VY9,378:$VZ9,606:$VB9,634:653,636:652,639:833,641:834,644:$V_9,650:836,653:832,654:835,655:838,656:837,657:839,658:$V$9,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646},{21:$Vd,22:$Ve,23:710,24:39,30:747,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,700:840},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:841,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646},{647:[1,842]},{647:[2,875]},{34:[1,844],103:[1,845],545:[1,843]},o($VO9,[2,711],{26:[1,846]}),{668:[1,847]},{356:$VK9,668:[2,722],683:$VL9,684:$VM9,685:$VN9},{647:[1,848]},o($V1a,[2,809]),{20:853,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:850,41:$Vda,42:$Vea,43:851,713:849,715:$Vfa},o($Vga,[2,805],{76:[1,861]}),{691:[1,862]},{623:[2,804]},o($Vc,[2,915],{740:863,306:[1,864]}),{20:869,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:866,41:$Vda,42:$Vea,43:867,715:$Vha,742:865},{21:$Vd,22:$Ve,23:681,24:39,29:870,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{21:$Vd,22:$Ve,23:710,24:39,30:762,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,690:871},{34:$Vv9,36:$Vw9,37:$Vx9,41:$VW9,42:$VX9,46:$Vy9,70:$Vz9,373:$VY9,378:$VZ9,606:$VB9,634:653,636:652,639:873,641:874,644:$V_9,650:876,653:872,654:875,655:878,656:877,657:879,658:$V$9,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646},{666:$VV9,689:880},{668:[1,881]},{20:768,21:$VD9,22:$VE9,696:882},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:883,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646},{647:[1,885],660:[1,884]},o($V4a,[2,689]),{662:[1,886]},{662:[2,690]},{662:[2,691]},{662:[2,692]},{646:[1,887],647:[1,888]},o($V8a,[2,655]),o($V8a,[2,657]),o($V8a,[2,658]),o($V8a,[2,659]),o($V8a,[2,660]),o($V8a,[2,661]),o($V8a,[2,662]),o($V8a,[2,663]),o($V8a,[2,664]),{666:[1,889]},{666:[1,890]},{666:[1,891]},o($V0a,[2,776]),o($V0a,[2,778]),o($V0a,[2,779]),o($V0a,[2,780]),o($V0a,[2,781]),o($V0a,[2,782]),o($V0a,[2,783]),o($V0a,[2,784]),o($V0a,[2,785]),o($Vb,[2,788]),o($Via,[2,789]),{21:$Vd,22:$Ve,23:710,24:39,30:793,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:[1,894],427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,726:892,733:893},{647:[2,876]},{647:[2,877]},{647:[2,878]},{21:[1,895]},o($VO9,[2,718]),{36:$Vw9,37:$Vx9,634:896},o($V1a,[2,807],{55:$Vja,76:$Vka,101:$Vla,328:$Vma,393:[1,898],691:$Vna,716:$Voa,717:$Vpa,718:$Vqa,719:$Vra}),o($Vsa,[2,836]),o($Vsa,[2,837]),o($Vsa,[2,838]),o($Vsa,[2,839]),o($Vta,[2,33]),o($Vta,[2,34]),o($Vta,[2,37]),o($Vta,[2,38]),o($Vta,[2,30]),o($Vta,[2,31]),o($Vta,[2,32]),{21:$Vd,22:$Ve,23:710,24:39,30:908,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,711:907},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:910,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646,721:909},o($Vc,[2,884]),{544:[1,911]},o($V2a,[2,896],{55:$Vua,76:$Vva,101:$Vwa,328:$Vxa,393:[1,913],691:$Vya,716:$Vza,717:$VAa,718:$VBa,719:$VCa}),o($VDa,[2,898]),o($VDa,[2,899]),o($VDa,[2,900]),o($VDa,[2,901]),o($VU9,[2,895]),o($V0a,[2,749]),o($V0a,[2,751]),o($V0a,[2,752]),o($V0a,[2,753]),o($V0a,[2,754]),o($V0a,[2,755]),o($V0a,[2,756]),o($V0a,[2,757]),o($V0a,[2,758]),o($V0a,[2,746]),o($V0a,[2,748]),o($Vb,[2,773]),o($Via,[2,774]),o([5,6,623,646,647,660,668],[2,687]),o($V4a,$V5a,{24:39,44:40,72:41,23:710,665:814,30:817,664:922,21:$Vd,22:$Ve,34:$Vf,36:$V6a,37:$V7a,41:$Vg,42:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9}),{34:$Vv9,36:$Vw9,37:$Vx9,41:$VW9,42:$VX9,46:$Vy9,70:$Vz9,373:$VY9,378:$VZ9,606:$VB9,634:653,636:652,639:924,641:925,644:$V_9,650:926,653:923,654:927,655:928,656:929,657:930,658:$V$9,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646},o($V3a,[2,653]),o($V8a,$V9a,{675:645,682:646,672:648,677:649,680:650,671:651,636:652,634:653,653:820,639:821,641:822,650:823,654:824,655:825,656:826,657:827,652:931,34:$Vv9,36:$Vw9,37:$Vx9,41:$VW9,42:$VX9,46:$Vy9,70:$Vz9,373:$VY9,378:$VZ9,606:$VB9,644:$V_9,658:$V$9,666:$VC9}),{644:[1,932]},{644:[1,933]},{644:[1,934]},{647:[1,936],668:[2,856],727:935},{647:[2,874]},o([34,103,545],$VI9,{314:[1,937]}),{666:[1,938]},{668:[1,939]},{20:853,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:850,41:$Vda,42:$Vea,43:851,713:940,715:$Vfa},{20:853,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:850,41:$Vda,42:$Vea,43:851,713:941,715:$Vfa},{20:853,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:850,41:$Vda,42:$Vea,43:851,713:942,715:$Vfa},{20:853,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:850,41:$Vda,42:$Vea,43:851,713:943,715:$Vfa},{20:853,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:850,41:$Vda,42:$Vea,43:851,713:944,715:$Vfa},{20:853,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:850,41:$Vda,42:$Vea,43:851,713:945,715:$Vfa},{20:853,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:850,41:$Vda,42:$Vea,43:851,713:946,715:$Vfa},{33:948,34:$VJ9,35:949,36:$Vaa,37:$Vba,38:$Vca,720:947},{35:950,36:$Vaa,37:$Vba,38:$Vca},{33:952,34:$VJ9,35:951,36:$Vaa,37:$Vba,38:$Vca,41:$Vda,42:$Vea,43:953},o($Vga,[2,806]),{101:[1,959],328:[1,960],691:[1,954],716:[1,955],717:[1,956],718:[1,957],719:[1,958]},o($VEa,[2,822]),o($VEa,[2,823]),o($Vc,[2,914]),{20:869,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:866,41:$Vda,42:$Vea,43:867,715:$Vha,742:961},{20:869,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:866,41:$Vda,42:$Vea,43:867,715:$Vha,742:962},{20:869,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:866,41:$Vda,42:$Vea,43:867,715:$Vha,742:963},{20:869,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:866,41:$Vda,42:$Vea,43:867,715:$Vha,742:964},{20:869,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:866,41:$Vda,42:$Vea,43:867,715:$Vha,742:965},{20:869,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:866,41:$Vda,42:$Vea,43:867,715:$Vha,742:966},{20:869,21:$VD9,22:$VE9,33:854,34:$VJ9,35:855,36:$Vaa,37:$Vba,38:$Vca,39:866,41:$Vda,42:$Vea,43:867,715:$Vha,742:967},{33:948,34:$VJ9,35:949,36:$Vaa,37:$Vba,38:$Vca,720:968},{35:969,36:$Vaa,37:$Vba,38:$Vca},{33:971,34:$VJ9,35:970,36:$Vaa,37:$Vba,38:$Vca,41:$Vda,42:$Vea,43:972},o($V4a,[2,688]),o($V4a,[2,694]),o($V4a,[2,695]),o($V4a,[2,696]),o($V4a,[2,697]),o($V4a,[2,698]),o($V4a,[2,699]),o($V4a,[2,700]),o($V4a,[2,701]),o($V8a,[2,654]),{36:$Vw9,37:$Vx9,634:974,667:973},{34:$Vv9,636:976,669:975},{70:$Vz9,670:977,671:978},{668:[1,979]},{288:$VFa,728:980,729:981},{666:[1,983]},{668:[1,984]},o($VO9,[2,725]),o([5,6,50,76,186,329,393],[2,840],{55:$Vja,101:$Vla,328:$Vma,691:$Vna,716:$Voa,717:$Vpa,718:$Vqa,719:$Vra}),o([5,6,50,186,329,393],[2,841],{55:$Vja,76:$Vka,101:$Vla,328:$Vma,691:$Vna,716:$Voa,717:$Vpa,718:$Vqa,719:$Vra}),o([5,6,50,55,76,101,186,328,329,393,691],[2,842],{716:$Voa,717:$Vpa,718:$Vqa,719:$Vra}),o($Vsa,[2,843]),o($Vsa,[2,844]),o($Vsa,[2,845]),o($Vsa,[2,846]),o($Vsa,[2,847]),{76:[1,985]},{76:[1,986]},o($Vsa,[2,848]),o($Vsa,[2,849]),o($Vsa,[2,850]),o($Vsa,[2,851]),{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:988,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646,722:987},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:988,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646,722:989},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:988,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646,722:990},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:988,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646,722:991},{34:$Vv9,36:$Vw9,37:$Vx9,46:$Vy9,70:$Vz9,373:$VA9,606:$VB9,634:653,636:652,653:988,666:$VC9,671:651,672:648,675:645,677:649,680:650,682:646,722:992},{34:$VGa,36:$VHa,37:$VIa,635:995,637:994,723:993},{36:$VHa,37:$VIa,635:999},o([5,6,50,76,306,329,393],[2,902],{55:$Vua,101:$Vwa,328:$Vxa,691:$Vya,716:$Vza,717:$VAa,718:$VBa,719:$VCa}),o([5,6,50,306,329,393],[2,903],{55:$Vua,76:$Vva,101:$Vwa,328:$Vxa,691:$Vya,716:$Vza,717:$VAa,718:$VBa,719:$VCa}),o([5,6,50,55,76,101,306,328,329,393,691],[2,904],{716:$Vza,717:$VAa,718:$VBa,719:$VCa}),o($VDa,[2,905]),o($VDa,[2,906]),o($VDa,[2,907]),o($VDa,[2,908]),o($VDa,[2,909]),o($VDa,[2,910]),o($VDa,[2,911]),o($VDa,[2,912]),o($VDa,[2,913]),{646:[1,1000],647:[1,1001]},o($V8a,[2,704]),{646:[1,1002],647:[1,1003]},o($V8a,[2,707]),{646:[1,1004],647:[1,1005]},o($V8a,[2,710]),o($Vb,[2,852]),{647:[1,1006],668:[2,857]},o($VJa,[2,859]),{21:$Vd,22:$Ve,23:681,24:39,29:1007,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},{20:1008,21:$VD9,22:$VE9},o($VO9,[2,712]),{33:1009,34:$VJ9},{35:1010,36:$Vaa,37:$Vba,38:$Vca},o($Vga,[2,824]),o($Vga,[2,831]),o($Vga,[2,825]),o($Vga,[2,826]),o($Vga,[2,827]),o($Vga,[2,828]),o($Vga,[2,829]),{76:[1,1011]},{76:[1,1012]},o($VEa,[2,635]),o($VEa,[2,632]),o($VEa,[2,633]),o($Vga,[2,830]),{668:[1,1013]},{36:$Vw9,37:$Vx9,634:1014},{668:[1,1015]},{34:$Vv9,636:1016},{668:[1,1017]},{70:$Vz9,671:1018},{288:$VFa,729:1019},{63:[1,1021],64:[1,1020]},{647:[1,1023],668:[1,1022]},o($Vta,[2,834]),o($Vta,[2,835]),{34:$VGa,637:1024},{36:$VHa,37:$VIa,635:1025},o($V3a,[2,702]),o($V8a,[2,703]),o($V3a,[2,705]),o($V8a,[2,706]),o($V3a,[2,708]),o($V8a,[2,709]),o($VJa,[2,858]),{666:[1,1026]},{666:[1,1027]},o($VJa,$VKa,{731:1028,566:$VLa}),{20:1030,21:$VD9,22:$VE9},o($Vga,[2,832]),o($Vga,[2,833]),{20:1031,21:$VD9,22:$VE9},{20:1032,21:$VD9,22:$VE9},o($VJa,[2,864]),{33:1033,34:$VJ9},{668:[1,1034]},{647:[1,1036],668:[1,1035]},{647:[1,1038],668:[1,1037]},{33:1039,34:$VJ9},o($VJa,$VKa,{731:1040,566:$VLa}),o($VJa,$VMa,{730:1041,433:$VNa}),{20:1043,21:$VD9,22:$VE9},o($VOa,$VMa,{730:1044,433:$VNa}),{20:1045,21:$VD9,22:$VE9},o($VJa,[2,867]),o($VJa,[2,865]),o($VJa,[2,860]),{65:[1,1046],66:[1,1047],67:[1,1048]},{668:[1,1049]},o($VJa,$VKa,{731:1050,566:$VLa}),{668:[1,1051]},o($VOa,[2,869]),o($VOa,[2,870]),{666:[1,1052]},o($VJa,$VMa,{730:1053,433:$VNa}),o($VJa,[2,861]),o($VOa,$VMa,{730:1054,433:$VNa}),{21:$Vd,22:$Ve,23:710,24:39,30:1056,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9,732:1055},o($VJa,[2,862]),o($VJa,$VKa,{731:1057,566:$VLa}),{647:[1,1059],668:[1,1058]},o($VJa,[2,873]),o($VJa,[2,863]),o($VOa,[2,871]),{21:$Vd,22:$Ve,23:710,24:39,30:1060,34:$Vf,41:$Vg,42:$Vh,44:40,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:41,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,99:$V71,100:$V81,101:$V91,102:$Va1,103:$Vb1,104:$Vc1,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,110:$Vi1,111:$Vj1,112:$Vk1,113:$Vl1,114:$Vm1,115:$Vn1,116:$Vo1,117:$Vp1,118:$Vq1,119:$Vr1,120:$Vs1,121:$Vt1,122:$Vu1,123:$Vv1,124:$Vw1,125:$Vx1,126:$Vy1,127:$Vz1,128:$VA1,129:$VB1,130:$VC1,131:$VD1,132:$VE1,133:$VF1,134:$VG1,135:$VH1,136:$VI1,137:$VJ1,138:$VK1,139:$VL1,140:$VM1,141:$VN1,142:$VO1,143:$VP1,144:$VQ1,145:$VR1,146:$VS1,147:$VT1,148:$VU1,149:$VV1,150:$VW1,151:$VX1,152:$VY1,153:$VZ1,154:$V_1,155:$V$1,156:$V02,157:$V12,158:$V22,159:$V32,160:$V42,161:$V52,162:$V62,163:$V72,164:$V82,165:$V92,166:$Va2,167:$Vb2,168:$Vc2,169:$Vd2,170:$Ve2,171:$Vf2,172:$Vg2,173:$Vh2,174:$Vi2,175:$Vj2,176:$Vk2,177:$Vl2,178:$Vm2,179:$Vn2,180:$Vo2,181:$Vp2,182:$Vq2,183:$Vr2,184:$Vs2,185:$Vt2,186:$Vu2,187:$Vv2,188:$Vw2,189:$Vx2,190:$Vy2,191:$Vz2,192:$VA2,193:$VB2,194:$VC2,195:$VD2,196:$VE2,197:$VF2,198:$VG2,199:$VH2,200:$VI2,201:$VJ2,202:$VK2,203:$VL2,204:$VM2,205:$VN2,206:$VO2,207:$VP2,208:$VQ2,209:$VR2,210:$VS2,211:$VT2,212:$VU2,213:$VV2,214:$VW2,215:$VX2,216:$VY2,217:$VZ2,218:$V_2,219:$V$2,220:$V03,221:$V13,222:$V23,223:$V33,224:$V43,225:$V53,226:$V63,227:$V73,228:$V83,229:$V93,230:$Va3,231:$Vb3,232:$Vc3,233:$Vd3,234:$Ve3,235:$Vf3,236:$Vg3,237:$Vh3,238:$Vi3,239:$Vj3,240:$Vk3,241:$Vl3,242:$Vm3,243:$Vn3,244:$Vo3,245:$Vp3,246:$Vq3,247:$Vr3,248:$Vs3,249:$Vt3,250:$Vu3,251:$Vv3,252:$Vw3,253:$Vx3,254:$Vy3,255:$Vz3,256:$VA3,257:$VB3,258:$VC3,259:$VD3,260:$VE3,261:$VF3,262:$VG3,263:$VH3,264:$VI3,265:$VJ3,266:$VK3,267:$VL3,268:$VM3,269:$VN3,270:$VO3,271:$VP3,272:$VQ3,273:$VR3,274:$VS3,275:$VT3,276:$VU3,277:$VV3,278:$VW3,279:$VX3,280:$VY3,281:$VZ3,282:$V_3,283:$V$3,284:$V04,285:$V14,286:$V24,287:$V34,288:$V44,289:$V54,290:$V64,291:$V74,292:$V84,293:$V94,294:$Va4,295:$Vb4,296:$Vc4,297:$Vd4,298:$Ve4,299:$Vf4,300:$Vg4,301:$Vh4,302:$Vi4,303:$Vj4,304:$Vk4,305:$Vl4,306:$Vm4,307:$Vn4,308:$Vo4,309:$Vp4,310:$Vq4,311:$Vr4,312:$Vs4,313:$Vt4,314:$Vu4,315:$Vv4,316:$Vw4,317:$Vx4,318:$Vy4,319:$Vz4,320:$VA4,321:$VB4,322:$VC4,323:$VD4,324:$VE4,325:$VF4,326:$VG4,327:$VH4,328:$VI4,329:$VJ4,330:$VK4,331:$VL4,332:$VM4,333:$VN4,334:$VO4,335:$VP4,336:$VQ4,337:$VR4,338:$VS4,339:$VT4,340:$VU4,341:$VV4,342:$VW4,343:$VX4,344:$VY4,345:$VZ4,346:$V_4,347:$V$4,348:$V05,349:$V15,350:$V25,351:$V35,352:$V45,353:$V55,354:$V65,355:$V75,356:$V85,357:$V95,358:$Va5,359:$Vb5,360:$Vc5,361:$Vd5,362:$Ve5,363:$Vf5,364:$Vg5,365:$Vh5,366:$Vi5,367:$Vj5,368:$Vk5,369:$Vl5,370:$Vm5,371:$Vn5,372:$Vo5,373:$Vp5,374:$Vq5,375:$Vr5,376:$Vs5,377:$Vt5,378:$Vu5,379:$Vv5,380:$Vw5,381:$Vx5,382:$Vy5,383:$Vz5,384:$VA5,385:$VB5,386:$VC5,387:$VD5,388:$VE5,389:$VF5,390:$VG5,391:$VH5,392:$VI5,393:$VJ5,394:$VK5,395:$VL5,396:$VM5,397:$VN5,398:$VO5,399:$VP5,400:$VQ5,401:$VR5,402:$VS5,403:$VT5,404:$VU5,405:$VV5,406:$VW5,407:$VX5,408:$VY5,409:$VZ5,410:$V_5,411:$V$5,412:$V06,413:$V16,414:$V26,415:$V36,416:$V46,417:$V56,418:$V66,419:$V76,420:$V86,421:$V96,422:$Va6,423:$Vb6,424:$Vc6,425:$Vd6,426:$Ve6,427:$Vf6,428:$Vg6,429:$Vh6,430:$Vi6,431:$Vj6,432:$Vk6,433:$Vl6,434:$Vm6,435:$Vn6,436:$Vo6,437:$Vp6,438:$Vq6,439:$Vr6,440:$Vs6,441:$Vt6,442:$Vu6,443:$Vv6,444:$Vw6,445:$Vx6,446:$Vy6,447:$Vz6,448:$VA6,449:$VB6,450:$VC6,451:$VD6,452:$VE6,453:$VF6,454:$VG6,455:$VH6,456:$VI6,457:$VJ6,458:$VK6,459:$VL6,460:$VM6,461:$VN6,462:$VO6,463:$VP6,464:$VQ6,465:$VR6,466:$VS6,467:$VT6,468:$VU6,469:$VV6,470:$VW6,471:$VX6,472:$VY6,473:$VZ6,474:$V_6,475:$V$6,476:$V07,477:$V17,478:$V27,479:$V37,480:$V47,481:$V57,482:$V67,483:$V77,484:$V87,485:$V97,486:$Va7,487:$Vb7,488:$Vc7,489:$Vd7,490:$Ve7,491:$Vf7,492:$Vg7,493:$Vh7,494:$Vi7,495:$Vj7,496:$Vk7,497:$Vl7,498:$Vm7,499:$Vn7,500:$Vo7,501:$Vp7,502:$Vq7,503:$Vr7,504:$Vs7,505:$Vt7,506:$Vu7,507:$Vv7,508:$Vw7,509:$Vx7,510:$Vy7,511:$Vz7,512:$VA7,513:$VB7,514:$VC7,515:$VD7,516:$VE7,517:$VF7,518:$VG7,519:$VH7,520:$VI7,521:$VJ7,522:$VK7,523:$VL7,524:$VM7,525:$VN7,526:$VO7,527:$VP7,528:$VQ7,529:$VR7,530:$VS7,531:$VT7,532:$VU7,533:$VV7,534:$VW7,535:$VX7,536:$VY7,537:$VZ7,538:$V_7,539:$V$7,540:$V08,541:$V18,542:$V28,543:$V38,544:$V48,545:$V58,546:$V68,547:$V78,548:$V88,549:$V98,550:$Va8,551:$Vb8,552:$Vc8,553:$Vd8,554:$Ve8,555:$Vf8,556:$Vg8,557:$Vh8,558:$Vi8,559:$Vj8,560:$Vk8,561:$Vl8,562:$Vm8,563:$Vn8,564:$Vo8,565:$Vp8,566:$Vq8,567:$Vr8,568:$Vs8,569:$Vt8,570:$Vu8,571:$Vv8,572:$Vw8,573:$Vx8,574:$Vy8,575:$Vz8,576:$VA8,577:$VB8,578:$VC8,579:$VD8,580:$VE8,581:$VF8,582:$VG8,583:$VH8,584:$VI8,585:$VJ8,586:$VK8,587:$VL8,588:$VM8,589:$VN8,590:$VO8,591:$VP8,592:$VQ8,593:$VR8,594:$VS8,595:$VT8,596:$VU8,597:$VV8,598:$VW8,599:$VX8,600:$VY8,601:$VZ8,602:$V_8,603:$V$8,604:$V09,605:$V19,606:$V29,607:$V39,608:$V49,609:$V59,610:$V69,611:$V79,612:$V89,613:$V99,614:$Va9,615:$Vb9,616:$Vc9,617:$Vd9,618:$Ve9,619:$Vf9,620:$Vg9,621:$Vh9,622:$Vi9,623:$Vj9,624:$Vk9,625:$Vl9,626:$Vm9,627:$Vn9,628:$Vo9,629:$Vp9,630:$Vq9,631:$Vr9,632:$Vs9,633:$Vt9},o($VJa,[2,872])],
defaultActions: {29:[2,1],34:[2,745],636:[2,854],637:[2,855],722:[2,719],723:[2,720],792:[2,875],802:[2,804],815:[2,690],816:[2,691],817:[2,692],843:[2,876],844:[2,877],845:[2,878],893:[2,874]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 22
break;
case 1:return 36
break;
case 2:return 37
break;
case 3:/* skip -- comments */
break;
case 4:/* skip whitespace */
break;
case 5:return 47
break;
case 6:return 48
break;
case 7:return 49
break;
case 8:return 74
break;
case 9:return 75
break;
case 10:return 76
break;
case 11:return 80
break;
case 12:return 81
break;
case 13:return 88
break;
case 14:return 99
break;
case 15:return 100
break;
case 16:return 101
break;
case 17:return 112
break;
case 18:return 118
break;
case 19:return 120
break;
case 20:return 121
break;
case 21:return 125
break;
case 22:return 134
break;
case 23:return 137
break;
case 24:return 146
break;
case 25:return 50
break;
case 26:return 151
break;
case 27:return 161
break;
case 28:return 162
break;
case 29:return 'CURRENT DATE'
break;
case 30:return 'CURRENT TIME'
break;
case 31:return 'CURRENT TIMESTAMP'
break;
case 32:return 168
break;
case 33:return 176
break;
case 34:return 177
break;
case 35:return 178
break;
case 36:return 182
break;
case 37:return 186
break;
case 38:return 189
break;
case 39:return 195
break;
case 40:return 200
break;
case 41:return 187
break;
case 42:return 204
break;
case 43:return 206
break;
case 44:return 210
break;
case 45:return 214
break;
case 46:return 219
break;
case 47:return 222
break;
case 48:return 225
break;
case 49:return 227
break;
case 50:return 234
break;
case 51:return 247
break;
case 52:return 249
break;
case 53:return 254
break;
case 54:return 255
break;
case 55:return 261
break;
case 56:return 267
break;
case 57:return 272
break;
case 58:return 279
break;
case 59:return 280
break;
case 60:return 281
break;
case 61:return 283
break;
case 62:return 602
break;
case 63:return 288
break;
case 64:return 289
break;
case 65:return 293
break;
case 66:return 295
break;
case 67:return 300
break;
case 68:return 301
break;
case 69:return 304
break;
case 70:return 306
break;
case 71:return 308
break;
case 72:return 54
break;
case 73:return 313
break;
case 74:return 314
break;
case 75:return 324
break;
case 76:return 328
break;
case 77:return 55
break;
case 78:return 329
break;
case 79:return 347
break;
case 80:return 370
break;
case 81:return 375
break;
case 82:return 377
break;
case 83:return 56
break;
case 84:return 378
break;
case 85:return 57
break;
case 86:return 382
break;
case 87:return 384
break;
case 88:return 386
break;
case 89:return 393
break;
case 90:return 394
break;
case 91:return 399
break;
case 92:return 420
break;
case 93:return 58
break;
case 94:return 426
break;
case 95:return 438
break;
case 96:return 441
break;
case 97:return 451
break;
case 98:return 455
break;
case 99:return 457
break;
case 100:return 459
break;
case 101:return 461
break;
case 102:return 463
break;
case 103:return 465
break;
case 104:return 472
break;
case 105:return 479
break;
case 106:return 482
break;
case 107:return 485
break;
case 108:return 502
break;
case 109:return 493
break;
case 110:return 510
break;
case 111:return 558
break;
case 112:return 560
break;
case 113:return 565
break;
case 114:return 571
break;
case 115:return 581
break;
case 116:return 589
break;
case 117:return 590
break;
case 118:return 598
break;
case 119:return 605
break;
case 120:return 607
break;
case 121:return 610
break;
case 122:return 616
break;
case 123:return 621
break;
case 124:return 623
break;
case 125:return 626
break;
case 126:return 41
break;
case 127:return 42
break;
case 128:return 516
break;
case 129:return 59
break;
case 130:return 545
break;
case 131:return 34
break;
case 132:return 60
break;
case 133:return 61
break;
case 134:return 62
break;
case 135:return 566
break;
case 136:return 63
break;
case 137:return 64
break;
case 138:return 433
break;
case 139:return 65
break;
case 140:return 66
break;
case 141:return 67
break;
case 142:return 373
break;
case 143:return 68
break;
case 144:return 69
break;
case 145:return 70
break;
case 146:return 71
break;
case 147:return 73
break;
case 148:return 74
break;
case 149:return 75
break;
case 150:return 76
break;
case 151:return 77
break;
case 152:return 'ARCHIVE'
break;
case 153:return 78
break;
case 154:return 79
break;
case 155:return 80
break;
case 156:return 81
break;
case 157:return 82
break;
case 158:return 83
break;
case 159:return 84
break;
case 160:return 85
break;
case 161:return 86
break;
case 162:return 87
break;
case 163:return 88
break;
case 164:return 89
break;
case 165:return 90
break;
case 166:return 91
break;
case 167:return 92
break;
case 168:return 93
break;
case 169:return 94
break;
case 170:return 95
break;
case 171:return 96
break;
case 172:return 97
break;
case 173:return 98
break;
case 174:return 99
break;
case 175:return 100
break;
case 176:return 101
break;
case 177:return 102
break;
case 178:return 103
break;
case 179:return 104
break;
case 180:return 105
break;
case 181:return 106
break;
case 182:return 107
break;
case 183:return 108
break;
case 184:return 109
break;
case 185:return 110
break;
case 186:return 111
break;
case 187:return 112
break;
case 188:return 113
break;
case 189:return 114
break;
case 190:return 115
break;
case 191:return 116
break;
case 192:return 117
break;
case 193:return 118
break;
case 194:return 119
break;
case 195:return 120
break;
case 196:return 121
break;
case 197:return 122
break;
case 198:return 123
break;
case 199:return 124
break;
case 200:return 125
break;
case 201:return 126
break;
case 202:return 127
break;
case 203:return 128
break;
case 204:return 129
break;
case 205:return 130
break;
case 206:return 131
break;
case 207:return 132
break;
case 208:return 133
break;
case 209:return 134
break;
case 210:return 135
break;
case 211:return 136
break;
case 212:return 137
break;
case 213:return 138
break;
case 214:return 139
break;
case 215:return 140
break;
case 216:return 141
break;
case 217:return 142
break;
case 218:return 143
break;
case 219:return 144
break;
case 220:return 145
break;
case 221:return 146
break;
case 222:return 147
break;
case 223:return 148
break;
case 224:return 149
break;
case 225:return 150
break;
case 226:return 151
break;
case 227:return 152
break;
case 228:return 153
break;
case 229:return 154
break;
case 230:return 155
break;
case 231:return 156
break;
case 232:return 157
break;
case 233:return 158
break;
case 234:return 159
break;
case 235:return 160
break;
case 236:return 161
break;
case 237:return 162
break;
case 238:return 163
break;
case 239:return 164
break;
case 240:return 165
break;
case 241:return 166
break;
case 242:return 167
break;
case 243:return 168
break;
case 244:return 169
break;
case 245:return 170
break;
case 246:return 171
break;
case 247:return 172
break;
case 248:return 173
break;
case 249:return 174
break;
case 250:return 175
break;
case 251:return 176
break;
case 252:return 177
break;
case 253:return 178
break;
case 254:return 179
break;
case 255:return 180
break;
case 256:return 181
break;
case 257:return 182
break;
case 258:return 183
break;
case 259:return 184
break;
case 260:return 185
break;
case 261:return 186
break;
case 262:return 187
break;
case 263:return 188
break;
case 264:return 189
break;
case 265:return 190
break;
case 266:return 191
break;
case 267:return 192
break;
case 268:return 193
break;
case 269:return 194
break;
case 270:return 195
break;
case 271:return 196
break;
case 272:return 197
break;
case 273:return 198
break;
case 274:return 199
break;
case 275:return 200
break;
case 276:return 201
break;
case 277:return 202
break;
case 278:return 203
break;
case 279:return 204
break;
case 280:return 205
break;
case 281:return 206
break;
case 282:return 207
break;
case 283:return 208
break;
case 284:return 209
break;
case 285:return 210
break;
case 286:return 211
break;
case 287:return 212
break;
case 288:return 213
break;
case 289:return 214
break;
case 290:return 215
break;
case 291:return 216
break;
case 292:return 217
break;
case 293:return 218
break;
case 294:return 219
break;
case 295:return 220
break;
case 296:return 221
break;
case 297:return 222
break;
case 298:return 223
break;
case 299:return 224
break;
case 300:return 225
break;
case 301:return 226
break;
case 302:return 227
break;
case 303:return 228
break;
case 304:return 229
break;
case 305:return 230
break;
case 306:return 231
break;
case 307:return 232
break;
case 308:return 233
break;
case 309:return 234
break;
case 310:return 42
break;
case 311:return 235
break;
case 312:return 236
break;
case 313:return 237
break;
case 314:return 238
break;
case 315:return 239
break;
case 316:return 240
break;
case 317:return 241
break;
case 318:return 242
break;
case 319:return 243
break;
case 320:return 244
break;
case 321:return 245
break;
case 322:return 246
break;
case 323:return 247
break;
case 324:return 248
break;
case 325:return 249
break;
case 326:return 250
break;
case 327:return 251
break;
case 328:return 252
break;
case 329:return 253
break;
case 330:return 254
break;
case 331:return 255
break;
case 332:return 256
break;
case 333:return 257
break;
case 334:return 258
break;
case 335:return 259
break;
case 336:return 260
break;
case 337:return 261
break;
case 338:return 262
break;
case 339:return 263
break;
case 340:return 264
break;
case 341:return 265
break;
case 342:return 266
break;
case 343:return 267
break;
case 344:return 268
break;
case 345:return 269
break;
case 346:return 270
break;
case 347:return 271
break;
case 348:return 272
break;
case 349:return 273
break;
case 350:return 274
break;
case 351:return 275
break;
case 352:return 276
break;
case 353:return 277
break;
case 354:return 278
break;
case 355:return 279
break;
case 356:return 280
break;
case 357:return 281
break;
case 358:return 282
break;
case 359:return 283
break;
case 360:return 284
break;
case 361:return 285
break;
case 362:return 286
break;
case 363:return 287
break;
case 364:return 288
break;
case 365:return 289
break;
case 366:return 290
break;
case 367:return 291
break;
case 368:return 292
break;
case 369:return 293
break;
case 370:return 294
break;
case 371:return 295
break;
case 372:return 296
break;
case 373:return 297
break;
case 374:return 298
break;
case 375:return 299
break;
case 376:return 300
break;
case 377:return 301
break;
case 378:return 302
break;
case 379:return 303
break;
case 380:return 304
break;
case 381:return 305
break;
case 382:return 306
break;
case 383:return 307
break;
case 384:return 308
break;
case 385:return 309
break;
case 386:return 310
break;
case 387:return 311
break;
case 388:return 312
break;
case 389:return 313
break;
case 390:return 314
break;
case 391:return 315
break;
case 392:return 316
break;
case 393:return 317
break;
case 394:return 318
break;
case 395:return 319
break;
case 396:return 320
break;
case 397:return 321
break;
case 398:return 322
break;
case 399:return 323
break;
case 400:return 324
break;
case 401:return 325
break;
case 402:return 326
break;
case 403:return 327
break;
case 404:return 328
break;
case 405:return 329
break;
case 406:return 330
break;
case 407:return 331
break;
case 408:return 332
break;
case 409:return 333
break;
case 410:return 334
break;
case 411:return 335
break;
case 412:return 336
break;
case 413:return 337
break;
case 414:return 338
break;
case 415:return 339
break;
case 416:return 340
break;
case 417:return 341
break;
case 418:return 342
break;
case 419:return 343
break;
case 420:return 344
break;
case 421:return 345
break;
case 422:return 346
break;
case 423:return 347
break;
case 424:return 348
break;
case 425:return 349
break;
case 426:return 350
break;
case 427:return 351
break;
case 428:return 352
break;
case 429:return 353
break;
case 430:return 354
break;
case 431:return 355
break;
case 432:return 356
break;
case 433:return 357
break;
case 434:return 358
break;
case 435:return 359
break;
case 436:return 360
break;
case 437:return 361
break;
case 438:return 362
break;
case 439:return 363
break;
case 440:return 364
break;
case 441:return 365
break;
case 442:return 366
break;
case 443:return 367
break;
case 444:return 368
break;
case 445:return 369
break;
case 446:return 370
break;
case 447:return 371
break;
case 448:return 372
break;
case 449:return 373
break;
case 450:return 374
break;
case 451:return 375
break;
case 452:return 376
break;
case 453:return 377
break;
case 454:return 378
break;
case 455:return 379
break;
case 456:return 34
break;
case 457:return 380
break;
case 458:return 381
break;
case 459:return 382
break;
case 460:return 383
break;
case 461:return 384
break;
case 462:return 385
break;
case 463:return 386
break;
case 464:return 387
break;
case 465:return 388
break;
case 466:return 389
break;
case 467:return 390
break;
case 468:return 391
break;
case 469:return 392
break;
case 470:return 393
break;
case 471:return 394
break;
case 472:return 395
break;
case 473:return 396
break;
case 474:return 397
break;
case 475:return 398
break;
case 476:return 399
break;
case 477:return 400
break;
case 478:return 401
break;
case 479:return 402
break;
case 480:return 403
break;
case 481:return 404
break;
case 482:return 405
break;
case 483:return 406
break;
case 484:return 407
break;
case 485:return 408
break;
case 486:return 409
break;
case 487:return 410
break;
case 488:return 411
break;
case 489:return 412
break;
case 490:return 413
break;
case 491:return 414
break;
case 492:return 415
break;
case 493:return 416
break;
case 494:return 417
break;
case 495:return 418
break;
case 496:return 419
break;
case 497:return 420
break;
case 498:return 421
break;
case 499:return 422
break;
case 500:return 423
break;
case 501:return 424
break;
case 502:return 425
break;
case 503:return 426
break;
case 504:return 427
break;
case 505:return 428
break;
case 506:return 429
break;
case 507:return 430
break;
case 508:return 431
break;
case 509:return 432
break;
case 510:return 433
break;
case 511:return 434
break;
case 512:return 435
break;
case 513:return 436
break;
case 514:return 437
break;
case 515:return 438
break;
case 516:return 439
break;
case 517:return 440
break;
case 518:return 441
break;
case 519:return 442
break;
case 520:return 443
break;
case 521:return 444
break;
case 522:return 445
break;
case 523:return 446
break;
case 524:return 447
break;
case 525:return 448
break;
case 526:return 449
break;
case 527:return 450
break;
case 528:return 451
break;
case 529:return 452
break;
case 530:return 453
break;
case 531:return 454
break;
case 532:return 455
break;
case 533:return 456
break;
case 534:return 457
break;
case 535:return 458
break;
case 536:return 459
break;
case 537:return 460
break;
case 538:return 461
break;
case 539:return 462
break;
case 540:return 463
break;
case 541:return 464
break;
case 542:return 465
break;
case 543:return 466
break;
case 544:return 467
break;
case 545:return 468
break;
case 546:return 469
break;
case 547:return 470
break;
case 548:return 471
break;
case 549:return 472
break;
case 550:return 473
break;
case 551:return 474
break;
case 552:return 475
break;
case 553:return 476
break;
case 554:return 477
break;
case 555:return 478
break;
case 556:return 479
break;
case 557:return 480
break;
case 558:return 481
break;
case 559:return 482
break;
case 560:return 483
break;
case 561:return 484
break;
case 562:return 485
break;
case 563:return 486
break;
case 564:return 487
break;
case 565:return 488
break;
case 566:return 489
break;
case 567:return 490
break;
case 568:return 491
break;
case 569:return 492
break;
case 570:return 493
break;
case 571:return 494
break;
case 572:return 495
break;
case 573:return 496
break;
case 574:return 497
break;
case 575:return 498
break;
case 576:return 499
break;
case 577:return 500
break;
case 578:return 501
break;
case 579:return 502
break;
case 580:return 503
break;
case 581:return 504
break;
case 582:return 505
break;
case 583:return 506
break;
case 584:return 507
break;
case 585:return 508
break;
case 586:return 509
break;
case 587:return 510
break;
case 588:return 511
break;
case 589:return 512
break;
case 590:return 513
break;
case 591:return 514
break;
case 592:return 515
break;
case 593:return 516
break;
case 594:return 517
break;
case 595:return 518
break;
case 596:return 519
break;
case 597:return 520
break;
case 598:return 521
break;
case 599:return 522
break;
case 600:return 523
break;
case 601:return 524
break;
case 602:return 525
break;
case 603:return 526
break;
case 604:return 527
break;
case 605:return 528
break;
case 606:return 529
break;
case 607:return 530
break;
case 608:return 531
break;
case 609:return 532
break;
case 610:return 533
break;
case 611:return 534
break;
case 612:return 535
break;
case 613:return 536
break;
case 614:return 537
break;
case 615:return 538
break;
case 616:return 539
break;
case 617:return 540
break;
case 618:return 541
break;
case 619:return 542
break;
case 620:return 543
break;
case 621:return 544
break;
case 622:return 545
break;
case 623:return 546
break;
case 624:return 547
break;
case 625:return 548
break;
case 626:return 549
break;
case 627:return 550
break;
case 628:return 551
break;
case 629:return 552
break;
case 630:return 553
break;
case 631:return 554
break;
case 632:return 555
break;
case 633:return 556
break;
case 634:return 557
break;
case 635:return 558
break;
case 636:return 559
break;
case 637:return 560
break;
case 638:return 561
break;
case 639:return 562
break;
case 640:return 563
break;
case 641:return 564
break;
case 642:return 565
break;
case 643:return 566
break;
case 644:return 567
break;
case 645:return 568
break;
case 646:return 569
break;
case 647:return 570
break;
case 648:return 571
break;
case 649:return 572
break;
case 650:return 573
break;
case 651:return 574
break;
case 652:return 575
break;
case 653:return 576
break;
case 654:return 577
break;
case 655:return 578
break;
case 656:return 579
break;
case 657:return 580
break;
case 658:return 581
break;
case 659:return 582
break;
case 660:return 41
break;
case 661:return 583
break;
case 662:return 584
break;
case 663:return 585
break;
case 664:return 586
break;
case 665:return 587
break;
case 666:return 588
break;
case 667:return 589
break;
case 668:return 590
break;
case 669:return 591
break;
case 670:return 592
break;
case 671:return 593
break;
case 672:return 594
break;
case 673:return 595
break;
case 674:return 596
break;
case 675:return 597
break;
case 676:return 598
break;
case 677:return 599
break;
case 678:return 600
break;
case 679:return 601
break;
case 680:return 602
break;
case 681:return 603
break;
case 682:return 604
break;
case 683:return 605
break;
case 684:return 606
break;
case 685:return 607
break;
case 686:return 608
break;
case 687:return 609
break;
case 688:return 610
break;
case 689:return 611
break;
case 690:return 612
break;
case 691:return 613
break;
case 692:return 614
break;
case 693:return 615
break;
case 694:return 616
break;
case 695:return 617
break;
case 696:return 618
break;
case 697:return 619
break;
case 698:return 620
break;
case 699:return 621
break;
case 700:return 622
break;
case 701:return 623
break;
case 702:return 624
break;
case 703:return 625
break;
case 704:return 626
break;
case 705:return 627
break;
case 706:return 628
break;
case 707:return 629
break;
case 708:return 630
break;
case 709:return 631
break;
case 710:return 632
break;
case 711:return 633
break;
case 712:return 45
break;
case 713:return 46
break;
case 714:return 606
break;
case 715:return 34
break;
case 716:return 34
break;
case 717:return 'TILDEs'
break;
case 718:return 695
break;
case 719:return 683
break;
case 720:return 356
break;
case 721:return 684
break;
case 722:return 685
break;
case 723:return 'REM'
break;
case 724:return 'RSHIFT'
break;
case 725:return 'LSHIFT'
break;
case 726:return 'NE'
break;
case 727:return 'NE'
break;
case 728:return 717
break;
case 729:return 716
break;
case 730:return 719
break;
case 731:return 718
break;
case 732:return 691
break;
case 733:return 'BITAND'
break;
case 734:return 'BITOR'
break;
case 735:return 666
break;
case 736:return 668
break;
case 737:return 658
break;
case 738:return 660
break;
case 739:return 644
break;
case 740:return 646
break;
case 741:return 26
break;
case 742:return 647
break;
case 743:return 662
break;
case 744:return 6
break;
case 745:return 'DOLLAR'
break;
case 746:return 'QUESTION'
break;
case 747:return 'CARET'
break;
case 748:return 21
break;
case 749:return 5
break;
case 750:return 'INVALID'
break;
}
},
rules: [/^(?:([`](\\.|[^"]|\\")*?[`])+)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:ABORT\b)/i,/^(?:ADD\b)/i,/^(?:AFTER\b)/i,/^(?:ALTER\b)/i,/^(?:ANALYZE\b)/i,/^(?:AND\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:ATTACH\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASCADE\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHECK\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:CONFLICT\b)/i,/^(?:CONSISTENT_READ\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CURRENT_DATE\b)/i,/^(?:CURRENT_TIME\b)/i,/^(?:CURRENT_TIMESTAMP\b)/i,/^(?:DATABASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DEFERRABLE\b)/i,/^(?:DEFERRED\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DETACH\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:DESCRIBE\b)/i,/^(?:EACH\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXCLUSIVE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FAIL\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:GLOB\b)/i,/^(?:GROUP\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IGNORE\b)/i,/^(?:IMMEDIATE\b)/i,/^(?:IN\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INITIALLY\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INSTEAD\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:IS\b)/i,/^(?:ISNULL\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:CONTAINS\b)/i,/^(?:LIMIT\b)/i,/^(?:MATCH\b)/i,/^(?:NATURAL\b)/i,/^(?:NO\b)/i,/^(?:NOT\b)/i,/^(?:NOTNULL\b)/i,/^(?:NULL\b)/i,/^(?:UNDEFINED\b)/i,/^(?:OF\b)/i,/^(?:OFFSET\b)/i,/^(?:ON\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRAGMA\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RAISE\b)/i,/^(?:RECURSIVE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REGEXP\b)/i,/^(?:REINDEX\b)/i,/^(?:RELEASE\b)/i,/^(?:RENAME\b)/i,/^(?:REPLACE\b)/i,/^(?:RESTRICT\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROW\b)/i,/^(?:SELECT\b)/i,/^(?:SCAN\b)/i,/^(?:SET\b)/i,/^(?:TABLE\b)/i,/^(?:TEMP\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TRIGGER\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VACUUM\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:SHOW\b)/i,/^(?:TABLES\b)/i,/^(?:STRING\b)/i,/^(?:NUMBER\b)/i,/^(?:STRINGSET\b)/i,/^(?:NUMBERSET\b)/i,/^(?:BINARYSET\b)/i,/^(?:THROUGHPUT\b)/i,/^(?:GSI\b)/i,/^(?:LSI\b)/i,/^(?:PROJECTION\b)/i,/^(?:ALL\b)/i,/^(?:KEYS_ONLY\b)/i,/^(?:INCLUDE\b)/i,/^(?:NEW\b)/i,/^(?:PROVISIONED\b)/i,/^(?:PAY_PER_REQUEST\b)/i,/^(?:BUFFER\b)/i,/^(?:DEBUG\b)/i,/^(?:ALLOCATE\b)/i,/^(?:ALTER\b)/i,/^(?:ANALYZE\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:ARCHIVE\b)/i,/^(?:ARE\b)/i,/^(?:ARRAY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:ASCII\b)/i,/^(?:ASENSITIVE\b)/i,/^(?:ASSERTION\b)/i,/^(?:ASYMMETRIC\b)/i,/^(?:AT\b)/i,/^(?:ATOMIC\b)/i,/^(?:ATTACH\b)/i,/^(?:ATTRIBUTE\b)/i,/^(?:AUTH\b)/i,/^(?:AUTHORIZATION\b)/i,/^(?:AUTHORIZE\b)/i,/^(?:AUTO\b)/i,/^(?:AVG\b)/i,/^(?:BACK\b)/i,/^(?:BACKUP\b)/i,/^(?:BASE\b)/i,/^(?:BATCH\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BIGINT\b)/i,/^(?:BINARY\b)/i,/^(?:BIT\b)/i,/^(?:BLOB\b)/i,/^(?:BLOCK\b)/i,/^(?:BOOLEAN\b)/i,/^(?:BOTH\b)/i,/^(?:BREADTH\b)/i,/^(?:BUCKET\b)/i,/^(?:BULK\b)/i,/^(?:BY\b)/i,/^(?:BYTE\b)/i,/^(?:CALL\b)/i,/^(?:CALLED\b)/i,/^(?:CALLING\b)/i,/^(?:CAPACITY\b)/i,/^(?:CASCADE\b)/i,/^(?:CASCADED\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CATALOG\b)/i,/^(?:CHAR\b)/i,/^(?:CHARACTER\b)/i,/^(?:CHECK\b)/i,/^(?:CLASS\b)/i,/^(?:CLOB\b)/i,/^(?:CLOSE\b)/i,/^(?:CLUSTER\b)/i,/^(?:CLUSTERED\b)/i,/^(?:CLUSTERING\b)/i,/^(?:CLUSTERS\b)/i,/^(?:COALESCE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLLATION\b)/i,/^(?:COLLECTION\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:COMBINE\b)/i,/^(?:COMMENT\b)/i,/^(?:COMMIT\b)/i,/^(?:COMPACT\b)/i,/^(?:COMPILE\b)/i,/^(?:COMPRESS\b)/i,/^(?:CONDITION\b)/i,/^(?:CONFLICT\b)/i,/^(?:CONNECT\b)/i,/^(?:CONNECTION\b)/i,/^(?:CONSISTENCY\b)/i,/^(?:CONSISTENT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONSTRAINTS\b)/i,/^(?:CONSTRUCTOR\b)/i,/^(?:CONSUMED\b)/i,/^(?:CONTINUE\b)/i,/^(?:CONVERT\b)/i,/^(?:COPY\b)/i,/^(?:CORRESPONDING\b)/i,/^(?:COUNT\b)/i,/^(?:COUNTER\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:CURRENT\b)/i,/^(?:CURSOR\b)/i,/^(?:CYCLE\b)/i,/^(?:DATA\b)/i,/^(?:DATABASE\b)/i,/^(?:DATE\b)/i,/^(?:DATETIME\b)/i,/^(?:DAY\b)/i,/^(?:DEALLOCATE\b)/i,/^(?:DEC\b)/i,/^(?:DECIMAL\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DEFERRABLE\b)/i,/^(?:DEFERRED\b)/i,/^(?:DEFINE\b)/i,/^(?:DEFINED\b)/i,/^(?:DEFINITION\b)/i,/^(?:DELETE\b)/i,/^(?:DELIMITED\b)/i,/^(?:DEPTH\b)/i,/^(?:DEREF\b)/i,/^(?:DESC\b)/i,/^(?:DESCRIBE\b)/i,/^(?:DESCRIPTOR\b)/i,/^(?:DETACH\b)/i,/^(?:DETERMINISTIC\b)/i,/^(?:DIAGNOSTICS\b)/i,/^(?:DIRECTORIES\b)/i,/^(?:DISABLE\b)/i,/^(?:DISCONNECT\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTRIBUTE\b)/i,/^(?:DO\b)/i,/^(?:DOMAIN\b)/i,/^(?:DOUBLE\b)/i,/^(?:DROP\b)/i,/^(?:DUMP\b)/i,/^(?:DURATION\b)/i,/^(?:DYNAMIC\b)/i,/^(?:EACH\b)/i,/^(?:ELEMENT\b)/i,/^(?:ELSE\b)/i,/^(?:ELSEIF\b)/i,/^(?:EMPTY\b)/i,/^(?:ENABLE\b)/i,/^(?:END\b)/i,/^(?:EQUAL\b)/i,/^(?:EQUALS\b)/i,/^(?:ERROR\b)/i,/^(?:ESCAPE\b)/i,/^(?:ESCAPED\b)/i,/^(?:EVAL\b)/i,/^(?:EVALUATE\b)/i,/^(?:EXCEEDED\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXCEPTION\b)/i,/^(?:EXCEPTIONS\b)/i,/^(?:EXCLUSIVE\b)/i,/^(?:EXEC\b)/i,/^(?:EXECUTE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXIT\b)/i,/^(?:EXPLAIN\b)/i,/^(?:EXPLODE\b)/i,/^(?:EXPORT\b)/i,/^(?:EXPRESSION\b)/i,/^(?:EXTENDED\b)/i,/^(?:EXTERNAL\b)/i,/^(?:EXTRACT\b)/i,/^(?:FAIL\b)/i,/^(?:FALSE\b)/i,/^(?:FAMILY\b)/i,/^(?:FETCH\b)/i,/^(?:FIELDS\b)/i,/^(?:FILE\b)/i,/^(?:FILTER\b)/i,/^(?:FILTERING\b)/i,/^(?:FINAL\b)/i,/^(?:FINISH\b)/i,/^(?:FIRST\b)/i,/^(?:FIXED\b)/i,/^(?:FLATTERN\b)/i,/^(?:FLOAT\b)/i,/^(?:FOR\b)/i,/^(?:FORCE\b)/i,/^(?:FOREIGN\b)/i,/^(?:FORMAT\b)/i,/^(?:FORWARD\b)/i,/^(?:FOUND\b)/i,/^(?:FREE\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:FUNCTION\b)/i,/^(?:FUNCTIONS\b)/i,/^(?:GENERAL\b)/i,/^(?:GENERATE\b)/i,/^(?:GET\b)/i,/^(?:GLOB\b)/i,/^(?:GLOBAL\b)/i,/^(?:GO\b)/i,/^(?:GOTO\b)/i,/^(?:GRANT\b)/i,/^(?:GREATER\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HANDLER\b)/i,/^(?:HASH\b)/i,/^(?:HAVE\b)/i,/^(?:HAVING\b)/i,/^(?:HEAP\b)/i,/^(?:HIDDEN\b)/i,/^(?:HOLD\b)/i,/^(?:HOUR\b)/i,/^(?:IDENTIFIED\b)/i,/^(?:IDENTITY\b)/i,/^(?:IF\b)/i,/^(?:IGNORE\b)/i,/^(?:IMMEDIATE\b)/i,/^(?:IMPORT\b)/i,/^(?:IN\b)/i,/^(?:INCLUDING\b)/i,/^(?:INCLUSIVE\b)/i,/^(?:INCREMENT\b)/i,/^(?:INCREMENTAL\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INDEXES\b)/i,/^(?:INDICATOR\b)/i,/^(?:INFINITE\b)/i,/^(?:INITIALLY\b)/i,/^(?:INLINE\b)/i,/^(?:INNER\b)/i,/^(?:INNTER\b)/i,/^(?:INOUT\b)/i,/^(?:INPUT\b)/i,/^(?:INSENSITIVE\b)/i,/^(?:INSERT\b)/i,/^(?:INSTEAD\b)/i,/^(?:INT\b)/i,/^(?:INTEGER\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTERVAL\b)/i,/^(?:INTO\b)/i,/^(?:INVALIDATE\b)/i,/^(?:IS\b)/i,/^(?:ISOLATION\b)/i,/^(?:ITEM\b)/i,/^(?:ITEMS\b)/i,/^(?:ITERATE\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:KEYS\b)/i,/^(?:LAG\b)/i,/^(?:LANGUAGE\b)/i,/^(?:LARGE\b)/i,/^(?:LAST\b)/i,/^(?:LATERAL\b)/i,/^(?:LEAD\b)/i,/^(?:LEADING\b)/i,/^(?:LEAVE\b)/i,/^(?:LEFT\b)/i,/^(?:LENGTH\b)/i,/^(?:LESS\b)/i,/^(?:LEVEL\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:LIMITED\b)/i,/^(?:LINES\b)/i,/^(?:LIST\b)/i,/^(?:LOAD\b)/i,/^(?:LOCAL\b)/i,/^(?:LOCALTIME\b)/i,/^(?:LOCALTIMESTAMP\b)/i,/^(?:LOCATION\b)/i,/^(?:LOCATOR\b)/i,/^(?:LOCK\b)/i,/^(?:LOCKS\b)/i,/^(?:LOG\b)/i,/^(?:LOGED\b)/i,/^(?:LONG\b)/i,/^(?:LOOP\b)/i,/^(?:LOWER\b)/i,/^(?:MAP\b)/i,/^(?:MATCH\b)/i,/^(?:MATERIALIZED\b)/i,/^(?:MAX\b)/i,/^(?:MAXLEN\b)/i,/^(?:MEMBER\b)/i,/^(?:MERGE\b)/i,/^(?:METHOD\b)/i,/^(?:METRICS\b)/i,/^(?:MIN\b)/i,/^(?:MINUS\b)/i,/^(?:MINUTE\b)/i,/^(?:MISSING\b)/i,/^(?:MOD\b)/i,/^(?:MODE\b)/i,/^(?:MODIFIES\b)/i,/^(?:MODIFY\b)/i,/^(?:MODULE\b)/i,/^(?:MONTH\b)/i,/^(?:MULTI\b)/i,/^(?:MULTISET\b)/i,/^(?:NAME\b)/i,/^(?:NAMES\b)/i,/^(?:NATIONAL\b)/i,/^(?:NATURAL\b)/i,/^(?:NCHAR\b)/i,/^(?:NCLOB\b)/i,/^(?:NEW\b)/i,/^(?:NEXT\b)/i,/^(?:NO\b)/i,/^(?:NONE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:NULLIF\b)/i,/^(?:NUMBER\b)/i,/^(?:NUMERIC\b)/i,/^(?:OBJECT\b)/i,/^(?:OF\b)/i,/^(?:OFFLINE\b)/i,/^(?:OFFSET\b)/i,/^(?:OLD\b)/i,/^(?:ON\b)/i,/^(?:ONLINE\b)/i,/^(?:ONLY\b)/i,/^(?:OPAQUE\b)/i,/^(?:OPEN\b)/i,/^(?:OPERATOR\b)/i,/^(?:OPTION\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:ORDINALITY\b)/i,/^(?:OTHER\b)/i,/^(?:OTHERS\b)/i,/^(?:OUT\b)/i,/^(?:OUTER\b)/i,/^(?:OUTPUT\b)/i,/^(?:OVER\b)/i,/^(?:OVERLAPS\b)/i,/^(?:OVERRIDE\b)/i,/^(?:OWNER\b)/i,/^(?:PAD\b)/i,/^(?:PARALLEL\b)/i,/^(?:PARAMETER\b)/i,/^(?:PARAMETERS\b)/i,/^(?:PARTIAL\b)/i,/^(?:PARTITION\b)/i,/^(?:PARTITIONED\b)/i,/^(?:PARTITIONS\b)/i,/^(?:PATH\b)/i,/^(?:PERCENT\b)/i,/^(?:PERCENTILE\b)/i,/^(?:PERMISSION\b)/i,/^(?:PERMISSIONS\b)/i,/^(?:PIPE\b)/i,/^(?:PIPELINED\b)/i,/^(?:PLAN\b)/i,/^(?:POOL\b)/i,/^(?:POSITION\b)/i,/^(?:PRECISION\b)/i,/^(?:PREPARE\b)/i,/^(?:PRESERVE\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIOR\b)/i,/^(?:PRIVATE\b)/i,/^(?:PRIVILEGES\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PROCESSED\b)/i,/^(?:PROJECT\b)/i,/^(?:PROJECTION\b)/i,/^(?:PROPERTY\b)/i,/^(?:PROVISIONING\b)/i,/^(?:PUBLIC\b)/i,/^(?:PUT\b)/i,/^(?:QUERY\b)/i,/^(?:QUIT\b)/i,/^(?:QUORUM\b)/i,/^(?:RAISE\b)/i,/^(?:RANDOM\b)/i,/^(?:RANGE\b)/i,/^(?:RANK\b)/i,/^(?:RAW\b)/i,/^(?:READ\b)/i,/^(?:READS\b)/i,/^(?:REAL\b)/i,/^(?:REBUILD\b)/i,/^(?:RECORD\b)/i,/^(?:RECURSIVE\b)/i,/^(?:REDUCE\b)/i,/^(?:REF\b)/i,/^(?:REFERENCE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REFERENCING\b)/i,/^(?:REGEXP\b)/i,/^(?:REGION\b)/i,/^(?:REINDEX\b)/i,/^(?:RELATIVE\b)/i,/^(?:RELEASE\b)/i,/^(?:REMAINDER\b)/i,/^(?:RENAME\b)/i,/^(?:REPEAT\b)/i,/^(?:REPLACE\b)/i,/^(?:REQUEST\b)/i,/^(?:RESET\b)/i,/^(?:RESIGNAL\b)/i,/^(?:RESOURCE\b)/i,/^(?:RESPONSE\b)/i,/^(?:RESTORE\b)/i,/^(?:RESTRICT\b)/i,/^(?:RESULT\b)/i,/^(?:RETURN\b)/i,/^(?:RETURNING\b)/i,/^(?:RETURNS\b)/i,/^(?:REVERSE\b)/i,/^(?:REVOKE\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLE\b)/i,/^(?:ROLES\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROLLUP\b)/i,/^(?:ROUTINE\b)/i,/^(?:ROW\b)/i,/^(?:ROWS\b)/i,/^(?:RULE\b)/i,/^(?:RULES\b)/i,/^(?:SAMPLE\b)/i,/^(?:SATISFIES\b)/i,/^(?:SAVE\b)/i,/^(?:SAVEPOINT\b)/i,/^(?:SCAN\b)/i,/^(?:SCHEMA\b)/i,/^(?:SCOPE\b)/i,/^(?:SCROLL\b)/i,/^(?:SEARCH\b)/i,/^(?:SECOND\b)/i,/^(?:SECTION\b)/i,/^(?:SEGMENT\b)/i,/^(?:SEGMENTS\b)/i,/^(?:SELECT\b)/i,/^(?:SELF\b)/i,/^(?:SEMI\b)/i,/^(?:SENSITIVE\b)/i,/^(?:SEPARATE\b)/i,/^(?:SEQUENCE\b)/i,/^(?:SERIALIZABLE\b)/i,/^(?:SESSION\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHARD\b)/i,/^(?:SHARE\b)/i,/^(?:SHARED\b)/i,/^(?:SHORT\b)/i,/^(?:SHOW\b)/i,/^(?:SIGNAL\b)/i,/^(?:SIMILAR\b)/i,/^(?:SIZE\b)/i,/^(?:SKEWED\b)/i,/^(?:SMALLINT\b)/i,/^(?:SNAPSHOT\b)/i,/^(?:SOME\b)/i,/^(?:SOURCE\b)/i,/^(?:SPACE\b)/i,/^(?:SPACES\b)/i,/^(?:SPARSE\b)/i,/^(?:SPECIFIC\b)/i,/^(?:SPECIFICTYPE\b)/i,/^(?:SPLIT\b)/i,/^(?:SQL\b)/i,/^(?:SQLCODE\b)/i,/^(?:SQLERROR\b)/i,/^(?:SQLEXCEPTION\b)/i,/^(?:SQLSTATE\b)/i,/^(?:SQLWARNING\b)/i,/^(?:START\b)/i,/^(?:STATE\b)/i,/^(?:STATIC\b)/i,/^(?:STATUS\b)/i,/^(?:STORAGE\b)/i,/^(?:STORE\b)/i,/^(?:STORED\b)/i,/^(?:STREAM\b)/i,/^(?:STRING\b)/i,/^(?:STRUCT\b)/i,/^(?:STYLE\b)/i,/^(?:SUB\b)/i,/^(?:SUBMULTISET\b)/i,/^(?:SUBPARTITION\b)/i,/^(?:SUBSTRING\b)/i,/^(?:SUBTYPE\b)/i,/^(?:SUM\b)/i,/^(?:SUPER\b)/i,/^(?:SYMMETRIC\b)/i,/^(?:SYNONYM\b)/i,/^(?:SYSTEM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLESAMPLE\b)/i,/^(?:TEMP\b)/i,/^(?:TEMPORARY\b)/i,/^(?:TERMINATED\b)/i,/^(?:TEXT\b)/i,/^(?:THAN\b)/i,/^(?:THEN\b)/i,/^(?:THROUGHPUT\b)/i,/^(?:TIME\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:TIMEZONE\b)/i,/^(?:TINYINT\b)/i,/^(?:TO\b)/i,/^(?:TOKEN\b)/i,/^(?:TOTAL\b)/i,/^(?:TOUCH\b)/i,/^(?:TRAILING\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRANSFORM\b)/i,/^(?:TRANSLATE\b)/i,/^(?:TRANSLATION\b)/i,/^(?:TREAT\b)/i,/^(?:TRIGGER\b)/i,/^(?:TRIM\b)/i,/^(?:TRUE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TTL\b)/i,/^(?:TUPLE\b)/i,/^(?:TYPE\b)/i,/^(?:UNDER\b)/i,/^(?:UNDO\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UNIT\b)/i,/^(?:UNKNOWN\b)/i,/^(?:UNLOGGED\b)/i,/^(?:UNNEST\b)/i,/^(?:UNPROCESSED\b)/i,/^(?:UNSIGNED\b)/i,/^(?:UNTIL\b)/i,/^(?:UPDATE\b)/i,/^(?:UPPER\b)/i,/^(?:URL\b)/i,/^(?:USAGE\b)/i,/^(?:USE\b)/i,/^(?:USER\b)/i,/^(?:USERS\b)/i,/^(?:USING\b)/i,/^(?:UUID\b)/i,/^(?:VACUUM\b)/i,/^(?:VALUE\b)/i,/^(?:VALUED\b)/i,/^(?:VALUES\b)/i,/^(?:VARCHAR\b)/i,/^(?:VARIABLE\b)/i,/^(?:VARIANCE\b)/i,/^(?:VARINT\b)/i,/^(?:VARYING\b)/i,/^(?:VIEW\b)/i,/^(?:VIEWS\b)/i,/^(?:VIRTUAL\b)/i,/^(?:VOID\b)/i,/^(?:WAIT\b)/i,/^(?:WHEN\b)/i,/^(?:WHENEVER\b)/i,/^(?:WHERE\b)/i,/^(?:WHILE\b)/i,/^(?:WINDOW\b)/i,/^(?:WITH\b)/i,/^(?:WITHIN\b)/i,/^(?:WITHOUT\b)/i,/^(?:WORK\b)/i,/^(?:WRAPPED\b)/i,/^(?:WRITE\b)/i,/^(?:YEAR\b)/i,/^(?:ZONE\b)/i,/^(?:JSON\b)/i,/^(?:MATH\b)/i,/^(?:UUID\b)/i,/^(?:[-]?(\d*[.])?\d+[eE]\d+)/i,/^(?:[-]?(\d*[.])?\d+)/i,/^(?:~)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sqlparser;
exports.Parser = sqlparser.Parser;
exports.parse = function () { return sqlparser.parse.apply(sqlparser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":113,"buffer":102,"fs":101,"path":111}],5:[function(require,module,exports){
(function (global,Buffer){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ractive-dynamodb-util", [], factory);
	else if(typeof exports === 'object')
		exports["ractive-dynamodb-util"] = factory();
	else
		root["ractive-dynamodb-util"] = factory();
})(global, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

var DynamoUtil = function () {};

DynamoUtil.config = {
	stringset_parse_as_set: false,
	numberset_parse_as_set: false,
	binaryset_parse_as_set: false,
	empty_string_replace_as: ""

	// works for nodeJS 0.x and iojs,
	// Array.from( Set ) doesnt
};var array_from_set = function (s) {
	var r = [];
	s.forEach(function (n) {
		r.push(n);
	});
	return r;
};
DynamoUtil.Raw = function (data) {
	this.data = data;
};

DynamoUtil.anormalizeList = function (list) {
	var $ret = [];
	for (var $i in list) {
		$ret.push(DynamoUtil.anormalizeItem(list[$i]));
	}
	return $ret;
};
/* possible that is no longer needed, replaced by stringify() */
DynamoUtil.anormalizeItem = function (item) {
	var anormal = {};
	for (var key in item) {
		if (item.hasOwnProperty(key)) {
			anormal[key] = DynamoUtil.stringify(item[key]);
		}
	}
	return anormal;
};

DynamoUtil.stringify = function ($value) {
	if (typeof $value == 'boolean') return { 'BOOL': $value };

	if (typeof $value == 'number') return { 'N': $value.toString() };

	if (typeof $value == 'string') {
		if ($value.length === 0) {
			if (DynamoUtil.config.empty_string_replace_as === "") {
				return { 'S': $value };
			} else if (DynamoUtil.config.empty_string_replace_as === undefined) {
				return undefined;
			}
			return DynamoUtil.stringify(DynamoUtil.config.empty_string_replace_as);
		}
		return { 'S': $value };
	}

	if ($value === null) return { 'NULL': true };

	if (Buffer.isBuffer($value)) return { 'B': $value

		// stringSet, numberSet
	};if (typeof $value == 'object' && $value instanceof DynamoUtil.Raw) {
		return $value.data;
	}

	if (typeof $value == 'object') {
		if (Array.isArray($value)) {
			var to_ret = { 'L': [] };
			for (var i in $value) {
				if ($value.hasOwnProperty(i)) {
					to_ret.L[i] = DynamoUtil.stringify($value[i]);
				}
			}
			return to_ret;
		}

		if ($value instanceof Set) {
			var is_ss = true;
			var is_ns = true;

			// count elements in Set
			if ($value.size === 0) {
				is_ss = false;
				is_ns = false;
			}

			$value.forEach(function (v) {
				if (typeof v === "string") {
					is_ns = false;
				} else if (typeof v === "number") {
					is_ss = false;
				} else {
					is_ss = false;
					is_ns = false;
				}
			});
			if (is_ss) return { 'SS': array_from_set($value) };

			if (is_ns) return {
				'NS': array_from_set($value).map(function (item) {
					return item.toString();
				})
			};

			return {
				'L': array_from_set($value).map(function (item) {
					return DynamoUtil.stringify(item);
				})
			};
		}

		var to_ret = { 'M': {} };
		for (var i in $value) {
			if ($value.hasOwnProperty(i)) {
				var val = DynamoUtil.stringify($value[i]);

				if (val !== undefined) // when empty string is replaced with undefined
					to_ret.M[i] = val;
			}
		}
		return to_ret;
	}

	// @todo: support other types
};

DynamoUtil.anormalizeType = function ($value) {
	if (typeof $value == 'boolean') return 'BOOL';

	if (typeof $value == 'number') return 'N';

	if (typeof $value == 'string') return 'S';

	if (Array.isArray($value)) return 'L';

	if ($value === null) {
		return 'NULL';
	}
	// @todo: support other types
};

/*
DynamoUtil.normalizeList = function($items) {
	var $list = []
	for (var i in $items) {
		$list.push(DynamoUtil.normalizeItem($items[i]))
	}
	return $list;
}
*/

DynamoUtil.parse = function (v) {
	if (typeof v !== 'object') throw 'expecting object';

	if (Object.keys(v).length !== 1) throw 'expecting only one property in object: S, N, BOOL, NULL, L, M, etc ';

	if (v.hasOwnProperty('S')) {
		if (v.S === DynamoUtil.config.empty_string_replace_as) return '';

		return v.S;
	}

	if (v.hasOwnProperty('N')) return parseFloat(v.N);

	if (v.hasOwnProperty('BOOL')) return v.BOOL;

	if (v.hasOwnProperty('NULL')) return null;

	if (v.hasOwnProperty('B')) {
		if (typeof Buffer.from === "function") {
			// Node 5.10+
			return Buffer.from(v.B, 'base64');
		} else {
			// older Node versions, now deprecated
			return new Buffer(v.B, 'base64');
		}
	}

	if (v.hasOwnProperty('SS')) {
		if (DynamoUtil.config.stringset_parse_as_set) return new Set(v.SS);

		return v.SS;
	}

	if (v.hasOwnProperty('NS')) {
		if (DynamoUtil.config.numberset_parse_as_set) return new Set(v.NS.map(function (el) {
			return parseFloat(el);
		}));

		return v.NS.map(function (el) {
			return parseFloat(el);
		});
	}

	if (v.hasOwnProperty('BS')) {
		if (DynamoUtil.config.binaryset_parse_as_set) return new Set(v.BS.map(function (el) {
			return el;
		}));

		return v.BS.map(function (el) {
			return el;
		});
	}

	if (v.hasOwnProperty('L')) {
		var normal = [];
		for (var i in v.L) {
			if (v.L.hasOwnProperty(i)) {
				normal[i] = DynamoUtil.parse(v.L[i]);
			}
		}
		return normal;
	}

	if (v.hasOwnProperty('M')) {
		var normal = {};
		for (var i in v.M) {
			if (v.M.hasOwnProperty(i)) {
				normal[i] = DynamoUtil.parse(v.M[i]);
			}
		}
		return normal;
	}
};

DynamoUtil.normalizeItem = function ($item) {
	// disabled for now so we dont break compatibility with older versions, should return null on undefined $item
	//if (!$item)
	//	return null

	var normal = {};
	for (var key in $item) {
		if ($item.hasOwnProperty(key)) {
			if ($item[key].hasOwnProperty('S')) normal[key] = $item[key]['S'];

			if ($item[key].hasOwnProperty('N')) normal[key] = +$item[key]['N'];

			if ($item[key].hasOwnProperty('BOOL')) normal[key] = $item[key]['BOOL'];

			if ($item[key].hasOwnProperty('NULL')) normal[key] = null;

			if ($item[key].hasOwnProperty('B')) normal[key] = $item[key]['B'];

			if ($item[key].hasOwnProperty('SS')) normal[key] = $item[key]['SS'];

			if ($item[key].hasOwnProperty('NS')) {
				normal[key] = [];
				$item[key]['NS'].forEach(function (el, idx) {
					normal[key].push(parseFloat(el));
				});
			}

			if ($item[key].hasOwnProperty('L')) {
				normal[key] = [];
				for (var i in $item[key]['L']) {
					if ($item[key]['L'].hasOwnProperty(i)) {
						normal[key][i] = DynamoUtil.normalizeItem({
							key: $item[key]['L'][i]
						}).key;
					}
				}
			}

			if ($item[key].hasOwnProperty('M')) {
				normal[key] = {};
				for (var i in $item[key]['M']) {
					if ($item[key]['M'].hasOwnProperty(i)) {
						normal[key][i] = DynamoUtil.normalizeItem({
							key: $item[key]['M'][i]
						}).key;
					}
				}
			}
		}
	}
	return normal;
};

DynamoUtil.buildExpected = function ($expected) {
	var anormal = {};

	for (var key in $expected) {
		if ($expected.hasOwnProperty(key)) {

			var whereVal = {};

			if (typeof $expected[key] == 'object' && $expected[key] instanceof DynamoUtil.Raw) {
				anormal[key] = $expected[key].data;
			} else if ($expected[key].hasOwnProperty('value2') && $expected[key].value2 !== undefined) {
				anormal[key] = {
					ComparisonOperator: $expected[key].operator,
					AttributeValueList: [DynamoUtil.stringify($expected[key].value), DynamoUtil.stringify($expected[key].value2)]
				};
			} else {
				anormal[key] = {
					ComparisonOperator: $expected[key].operator,
					AttributeValueList: [DynamoUtil.stringify($expected[key].value)]
				};
			}
		}
	}
	return anormal;
};

DynamoUtil.expression_name_split = function (item) {
	var ret = [];
	var split = '';
	var in_brackets = false;
	for (var i = 0; i < item.length; i++) {
		if (in_brackets) {
			if (item[i] == '"') {
				in_brackets = false;
				ret.push(split);
				split = '';
			} else {
				split += item[i];
			}
		} else {
			if (item[i] == '"') {
				in_brackets = true;
			} else {
				if (item[i] == '.') {
					ret.push(split);
					split = '';
				} else {
					split += item[i];
				}
			}
		}
	}
	ret.push(split);
	return ret.filter(function (v) {
		return v.trim() !== '';
	});
};
DynamoUtil.clone = function (source) {

	var from;
	var to = Object({});
	var symbols;

	for (var s = 0; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (Object.prototype.hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (Object.prototype.propertyIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

DynamoUtil.toSQLJSON = function (o, is_list) {

	if (is_list) {
		return "[" + o.map(function (l) {
			if (l.hasOwnProperty('S')) return JSON.stringify(l.S);
			if (l.hasOwnProperty('N')) return l.N;
			if (l.hasOwnProperty('B')) return "Buffer.from('" + l.B.toString('base64') + "', 'base64')";
			if (l.hasOwnProperty('BOOL')) return l.BOOL;
			if (l.hasOwnProperty('NULL')) return 'null';
			if (l.hasOwnProperty('SS')) return "new StringSet(" + JSON.stringify(l.SS) + ")";
			if (l.hasOwnProperty('NS')) return "new NumberSet(" + JSON.stringify(l.NS.map(function (n) {
				return parseFloat(n);
			})) + ")";
			if (l.hasOwnProperty('BS')) return "new BinarySet([" + l.BS.map(function (b) {
				return "Buffer.from('" + b.toString('base64') + "', 'base64')";
			}).join(',') + "])";
			if (l.hasOwnProperty('M')) return DynamoUtil.toSQLJSON(l.M);
			if (l.hasOwnProperty('L')) return DynamoUtil.toSQLJSON(l.L, true);

			return JSON.stringify(l);
		}).join(',') + ']';
	}

	var oeach = [];
	Object.keys(o).map(function (k) {
		if (o[k].hasOwnProperty('S')) oeach.push("'" + k + "':" + JSON.stringify(o[k].S));
		if (o[k].hasOwnProperty('N')) oeach.push("'" + k + "':" + o[k].N);
		if (o[k].hasOwnProperty('B')) oeach.push("'" + k + "':" + "Buffer.from('" + o[k].B.toString('base64') + "', 'base64')");
		if (o[k].hasOwnProperty('BOOL')) oeach.push("'" + k + "':" + o[k].BOOL);
		if (o[k].hasOwnProperty('NULL')) oeach.push("'" + k + "':" + 'null');
		if (o[k].hasOwnProperty('SS')) oeach.push("'" + k + "':" + "new StringSet(" + JSON.stringify(o[k].SS) + ")");
		if (o[k].hasOwnProperty('NS')) oeach.push("'" + k + "':" + "new NumberSet(" + JSON.stringify(o[k].NS.map(function (n) {
			return parseFloat(n);
		})) + ")");
		if (o[k].hasOwnProperty('BS')) oeach.push("'" + k + "':" + "new BinarySet([" + o[k].BS.map(function (b) {
			return "Buffer.from('" + b.toString('base64') + "', 'base64')";
		}).join(',') + "])");
		if (o[k].hasOwnProperty('M')) oeach.push("'" + k + "':" + DynamoUtil.toSQLJSON(o[k].M));
		if (o[k].hasOwnProperty('L')) oeach.push("'" + k + "':" + DynamoUtil.toSQLJSON(o[k].L, true));
	});
	return "{" + oeach.join(',') + '}';
};

// backword compatibitity
DynamoUtil.anormalizeValue = DynamoUtil.stringify;
DynamoUtil.normalizeValue = DynamoUtil.parse;

//module.exports = DynamoUtil
/* harmony default export */ __webpack_exports__["default"] = (DynamoUtil);

/***/ })
/******/ ])["default"];
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"buffer":102}],6:[function(require,module,exports){
module.exports={
  "version": "2.0",
  "metadata": {
    "apiVersion": "2014-06-30",
    "endpointPrefix": "cognito-identity",
    "jsonVersion": "1.1",
    "protocol": "json",
    "serviceFullName": "Amazon Cognito Identity",
    "serviceId": "Cognito Identity",
    "signatureVersion": "v4",
    "targetPrefix": "AWSCognitoIdentityService",
    "uid": "cognito-identity-2014-06-30"
  },
  "operations": {
    "CreateIdentityPool": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolName",
          "AllowUnauthenticatedIdentities"
        ],
        "members": {
          "IdentityPoolName": {},
          "AllowUnauthenticatedIdentities": {
            "type": "boolean"
          },
          "SupportedLoginProviders": {
            "shape": "S4"
          },
          "DeveloperProviderName": {},
          "OpenIdConnectProviderARNs": {
            "shape": "S8"
          },
          "CognitoIdentityProviders": {
            "shape": "Sa"
          },
          "SamlProviderARNs": {
            "shape": "Sf"
          },
          "IdentityPoolTags": {
            "shape": "Sg"
          }
        }
      },
      "output": {
        "shape": "Sj"
      }
    },
    "DeleteIdentities": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityIdsToDelete"
        ],
        "members": {
          "IdentityIdsToDelete": {
            "type": "list",
            "member": {}
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "UnprocessedIdentityIds": {
            "type": "list",
            "member": {
              "type": "structure",
              "members": {
                "IdentityId": {},
                "ErrorCode": {}
              }
            }
          }
        }
      }
    },
    "DeleteIdentityPool": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolId"
        ],
        "members": {
          "IdentityPoolId": {}
        }
      }
    },
    "DescribeIdentity": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityId"
        ],
        "members": {
          "IdentityId": {}
        }
      },
      "output": {
        "shape": "Su"
      }
    },
    "DescribeIdentityPool": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolId"
        ],
        "members": {
          "IdentityPoolId": {}
        }
      },
      "output": {
        "shape": "Sj"
      }
    },
    "GetCredentialsForIdentity": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityId"
        ],
        "members": {
          "IdentityId": {},
          "Logins": {
            "shape": "Sz"
          },
          "CustomRoleArn": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityId": {},
          "Credentials": {
            "type": "structure",
            "members": {
              "AccessKeyId": {},
              "SecretKey": {},
              "SessionToken": {},
              "Expiration": {
                "type": "timestamp"
              }
            }
          }
        }
      }
    },
    "GetId": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolId"
        ],
        "members": {
          "AccountId": {},
          "IdentityPoolId": {},
          "Logins": {
            "shape": "Sz"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityId": {}
        }
      }
    },
    "GetIdentityPoolRoles": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolId"
        ],
        "members": {
          "IdentityPoolId": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityPoolId": {},
          "Roles": {
            "shape": "S1b"
          },
          "RoleMappings": {
            "shape": "S1d"
          }
        }
      }
    },
    "GetOpenIdToken": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityId"
        ],
        "members": {
          "IdentityId": {},
          "Logins": {
            "shape": "Sz"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityId": {},
          "Token": {}
        }
      }
    },
    "GetOpenIdTokenForDeveloperIdentity": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolId",
          "Logins"
        ],
        "members": {
          "IdentityPoolId": {},
          "IdentityId": {},
          "Logins": {
            "shape": "Sz"
          },
          "TokenDuration": {
            "type": "long"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityId": {},
          "Token": {}
        }
      }
    },
    "ListIdentities": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolId",
          "MaxResults"
        ],
        "members": {
          "IdentityPoolId": {},
          "MaxResults": {
            "type": "integer"
          },
          "NextToken": {},
          "HideDisabled": {
            "type": "boolean"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityPoolId": {},
          "Identities": {
            "type": "list",
            "member": {
              "shape": "Su"
            }
          },
          "NextToken": {}
        }
      }
    },
    "ListIdentityPools": {
      "input": {
        "type": "structure",
        "required": [
          "MaxResults"
        ],
        "members": {
          "MaxResults": {
            "type": "integer"
          },
          "NextToken": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityPools": {
            "type": "list",
            "member": {
              "type": "structure",
              "members": {
                "IdentityPoolId": {},
                "IdentityPoolName": {}
              }
            }
          },
          "NextToken": {}
        }
      }
    },
    "ListTagsForResource": {
      "input": {
        "type": "structure",
        "required": [
          "ResourceArn"
        ],
        "members": {
          "ResourceArn": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Tags": {
            "shape": "Sg"
          }
        }
      }
    },
    "LookupDeveloperIdentity": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolId"
        ],
        "members": {
          "IdentityPoolId": {},
          "IdentityId": {},
          "DeveloperUserIdentifier": {},
          "MaxResults": {
            "type": "integer"
          },
          "NextToken": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityId": {},
          "DeveloperUserIdentifierList": {
            "type": "list",
            "member": {}
          },
          "NextToken": {}
        }
      }
    },
    "MergeDeveloperIdentities": {
      "input": {
        "type": "structure",
        "required": [
          "SourceUserIdentifier",
          "DestinationUserIdentifier",
          "DeveloperProviderName",
          "IdentityPoolId"
        ],
        "members": {
          "SourceUserIdentifier": {},
          "DestinationUserIdentifier": {},
          "DeveloperProviderName": {},
          "IdentityPoolId": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "IdentityId": {}
        }
      }
    },
    "SetIdentityPoolRoles": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityPoolId",
          "Roles"
        ],
        "members": {
          "IdentityPoolId": {},
          "Roles": {
            "shape": "S1b"
          },
          "RoleMappings": {
            "shape": "S1d"
          }
        }
      }
    },
    "TagResource": {
      "input": {
        "type": "structure",
        "required": [
          "ResourceArn"
        ],
        "members": {
          "ResourceArn": {},
          "Tags": {
            "shape": "Sg"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {}
      }
    },
    "UnlinkDeveloperIdentity": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityId",
          "IdentityPoolId",
          "DeveloperProviderName",
          "DeveloperUserIdentifier"
        ],
        "members": {
          "IdentityId": {},
          "IdentityPoolId": {},
          "DeveloperProviderName": {},
          "DeveloperUserIdentifier": {}
        }
      }
    },
    "UnlinkIdentity": {
      "input": {
        "type": "structure",
        "required": [
          "IdentityId",
          "Logins",
          "LoginsToRemove"
        ],
        "members": {
          "IdentityId": {},
          "Logins": {
            "shape": "Sz"
          },
          "LoginsToRemove": {
            "shape": "Sv"
          }
        }
      }
    },
    "UntagResource": {
      "input": {
        "type": "structure",
        "required": [
          "ResourceArn"
        ],
        "members": {
          "ResourceArn": {},
          "TagKeys": {
            "type": "list",
            "member": {}
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {}
      }
    },
    "UpdateIdentityPool": {
      "input": {
        "shape": "Sj"
      },
      "output": {
        "shape": "Sj"
      }
    }
  },
  "shapes": {
    "S4": {
      "type": "map",
      "key": {},
      "value": {}
    },
    "S8": {
      "type": "list",
      "member": {}
    },
    "Sa": {
      "type": "list",
      "member": {
        "type": "structure",
        "members": {
          "ProviderName": {},
          "ClientId": {},
          "ServerSideTokenCheck": {
            "type": "boolean"
          }
        }
      }
    },
    "Sf": {
      "type": "list",
      "member": {}
    },
    "Sg": {
      "type": "map",
      "key": {},
      "value": {}
    },
    "Sj": {
      "type": "structure",
      "required": [
        "IdentityPoolId",
        "IdentityPoolName",
        "AllowUnauthenticatedIdentities"
      ],
      "members": {
        "IdentityPoolId": {},
        "IdentityPoolName": {},
        "AllowUnauthenticatedIdentities": {
          "type": "boolean"
        },
        "SupportedLoginProviders": {
          "shape": "S4"
        },
        "DeveloperProviderName": {},
        "OpenIdConnectProviderARNs": {
          "shape": "S8"
        },
        "CognitoIdentityProviders": {
          "shape": "Sa"
        },
        "SamlProviderARNs": {
          "shape": "Sf"
        },
        "IdentityPoolTags": {
          "shape": "Sg"
        }
      }
    },
    "Su": {
      "type": "structure",
      "members": {
        "IdentityId": {},
        "Logins": {
          "shape": "Sv"
        },
        "CreationDate": {
          "type": "timestamp"
        },
        "LastModifiedDate": {
          "type": "timestamp"
        }
      }
    },
    "Sv": {
      "type": "list",
      "member": {}
    },
    "Sz": {
      "type": "map",
      "key": {},
      "value": {}
    },
    "S1b": {
      "type": "map",
      "key": {},
      "value": {}
    },
    "S1d": {
      "type": "map",
      "key": {},
      "value": {
        "type": "structure",
        "required": [
          "Type"
        ],
        "members": {
          "Type": {},
          "AmbiguousRoleResolution": {},
          "RulesConfiguration": {
            "type": "structure",
            "required": [
              "Rules"
            ],
            "members": {
              "Rules": {
                "type": "list",
                "member": {
                  "type": "structure",
                  "required": [
                    "Claim",
                    "MatchType",
                    "Value",
                    "RoleARN"
                  ],
                  "members": {
                    "Claim": {},
                    "MatchType": {},
                    "Value": {},
                    "RoleARN": {}
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
},{}],7:[function(require,module,exports){
module.exports={
  "pagination": {
  }
}

},{}],8:[function(require,module,exports){
module.exports={
  "version": "2.0",
  "metadata": {
    "apiVersion": "2011-12-05",
    "endpointPrefix": "dynamodb",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "DynamoDB",
    "serviceFullName": "Amazon DynamoDB",
    "serviceId": "DynamoDB",
    "signatureVersion": "v4",
    "targetPrefix": "DynamoDB_20111205",
    "uid": "dynamodb-2011-12-05"
  },
  "operations": {
    "BatchGetItem": {
      "input": {
        "type": "structure",
        "required": [
          "RequestItems"
        ],
        "members": {
          "RequestItems": {
            "shape": "S2"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Responses": {
            "type": "map",
            "key": {},
            "value": {
              "type": "structure",
              "members": {
                "Items": {
                  "shape": "Sk"
                },
                "ConsumedCapacityUnits": {
                  "type": "double"
                }
              }
            }
          },
          "UnprocessedKeys": {
            "shape": "S2"
          }
        }
      }
    },
    "BatchWriteItem": {
      "input": {
        "type": "structure",
        "required": [
          "RequestItems"
        ],
        "members": {
          "RequestItems": {
            "shape": "So"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Responses": {
            "type": "map",
            "key": {},
            "value": {
              "type": "structure",
              "members": {
                "ConsumedCapacityUnits": {
                  "type": "double"
                }
              }
            }
          },
          "UnprocessedItems": {
            "shape": "So"
          }
        }
      }
    },
    "CreateTable": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "KeySchema",
          "ProvisionedThroughput"
        ],
        "members": {
          "TableName": {},
          "KeySchema": {
            "shape": "Sy"
          },
          "ProvisionedThroughput": {
            "shape": "S12"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape": "S15"
          }
        }
      }
    },
    "DeleteItem": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "Key"
        ],
        "members": {
          "TableName": {},
          "Key": {
            "shape": "S6"
          },
          "Expected": {
            "shape": "S1b"
          },
          "ReturnValues": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Attributes": {
            "shape": "Sl"
          },
          "ConsumedCapacityUnits": {
            "type": "double"
          }
        }
      }
    },
    "DeleteTable": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape": "S15"
          }
        }
      }
    },
    "DescribeTable": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Table": {
            "shape": "S15"
          }
        }
      }
    },
    "GetItem": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "Key"
        ],
        "members": {
          "TableName": {},
          "Key": {
            "shape": "S6"
          },
          "AttributesToGet": {
            "shape": "Se"
          },
          "ConsistentRead": {
            "type": "boolean"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Item": {
            "shape": "Sl"
          },
          "ConsumedCapacityUnits": {
            "type": "double"
          }
        }
      }
    },
    "ListTables": {
      "input": {
        "type": "structure",
        "members": {
          "ExclusiveStartTableName": {},
          "Limit": {
            "type": "integer"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableNames": {
            "type": "list",
            "member": {}
          },
          "LastEvaluatedTableName": {}
        }
      }
    },
    "PutItem": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "Item"
        ],
        "members": {
          "TableName": {},
          "Item": {
            "shape": "Ss"
          },
          "Expected": {
            "shape": "S1b"
          },
          "ReturnValues": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Attributes": {
            "shape": "Sl"
          },
          "ConsumedCapacityUnits": {
            "type": "double"
          }
        }
      }
    },
    "Query": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "HashKeyValue"
        ],
        "members": {
          "TableName": {},
          "AttributesToGet": {
            "shape": "Se"
          },
          "Limit": {
            "type": "integer"
          },
          "ConsistentRead": {
            "type": "boolean"
          },
          "Count": {
            "type": "boolean"
          },
          "HashKeyValue": {
            "shape": "S7"
          },
          "RangeKeyCondition": {
            "shape": "S1u"
          },
          "ScanIndexForward": {
            "type": "boolean"
          },
          "ExclusiveStartKey": {
            "shape": "S6"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Items": {
            "shape": "Sk"
          },
          "Count": {
            "type": "integer"
          },
          "LastEvaluatedKey": {
            "shape": "S6"
          },
          "ConsumedCapacityUnits": {
            "type": "double"
          }
        }
      }
    },
    "Scan": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {},
          "AttributesToGet": {
            "shape": "Se"
          },
          "Limit": {
            "type": "integer"
          },
          "Count": {
            "type": "boolean"
          },
          "ScanFilter": {
            "type": "map",
            "key": {},
            "value": {
              "shape": "S1u"
            }
          },
          "ExclusiveStartKey": {
            "shape": "S6"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Items": {
            "shape": "Sk"
          },
          "Count": {
            "type": "integer"
          },
          "ScannedCount": {
            "type": "integer"
          },
          "LastEvaluatedKey": {
            "shape": "S6"
          },
          "ConsumedCapacityUnits": {
            "type": "double"
          }
        }
      }
    },
    "UpdateItem": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "Key",
          "AttributeUpdates"
        ],
        "members": {
          "TableName": {},
          "Key": {
            "shape": "S6"
          },
          "AttributeUpdates": {
            "type": "map",
            "key": {},
            "value": {
              "type": "structure",
              "members": {
                "Value": {
                  "shape": "S7"
                },
                "Action": {}
              }
            }
          },
          "Expected": {
            "shape": "S1b"
          },
          "ReturnValues": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Attributes": {
            "shape": "Sl"
          },
          "ConsumedCapacityUnits": {
            "type": "double"
          }
        }
      }
    },
    "UpdateTable": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "ProvisionedThroughput"
        ],
        "members": {
          "TableName": {},
          "ProvisionedThroughput": {
            "shape": "S12"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape": "S15"
          }
        }
      }
    }
  },
  "shapes": {
    "S2": {
      "type": "map",
      "key": {},
      "value": {
        "type": "structure",
        "required": [
          "Keys"
        ],
        "members": {
          "Keys": {
            "type": "list",
            "member": {
              "shape": "S6"
            }
          },
          "AttributesToGet": {
            "shape": "Se"
          },
          "ConsistentRead": {
            "type": "boolean"
          }
        }
      }
    },
    "S6": {
      "type": "structure",
      "required": [
        "HashKeyElement"
      ],
      "members": {
        "HashKeyElement": {
          "shape": "S7"
        },
        "RangeKeyElement": {
          "shape": "S7"
        }
      }
    },
    "S7": {
      "type": "structure",
      "members": {
        "S": {},
        "N": {},
        "B": {
          "type": "blob"
        },
        "SS": {
          "type": "list",
          "member": {}
        },
        "NS": {
          "type": "list",
          "member": {}
        },
        "BS": {
          "type": "list",
          "member": {
            "type": "blob"
          }
        }
      }
    },
    "Se": {
      "type": "list",
      "member": {}
    },
    "Sk": {
      "type": "list",
      "member": {
        "shape": "Sl"
      }
    },
    "Sl": {
      "type": "map",
      "key": {},
      "value": {
        "shape": "S7"
      }
    },
    "So": {
      "type": "map",
      "key": {},
      "value": {
        "type": "list",
        "member": {
          "type": "structure",
          "members": {
            "PutRequest": {
              "type": "structure",
              "required": [
                "Item"
              ],
              "members": {
                "Item": {
                  "shape": "Ss"
                }
              }
            },
            "DeleteRequest": {
              "type": "structure",
              "required": [
                "Key"
              ],
              "members": {
                "Key": {
                  "shape": "S6"
                }
              }
            }
          }
        }
      }
    },
    "Ss": {
      "type": "map",
      "key": {},
      "value": {
        "shape": "S7"
      }
    },
    "Sy": {
      "type": "structure",
      "required": [
        "HashKeyElement"
      ],
      "members": {
        "HashKeyElement": {
          "shape": "Sz"
        },
        "RangeKeyElement": {
          "shape": "Sz"
        }
      }
    },
    "Sz": {
      "type": "structure",
      "required": [
        "AttributeName",
        "AttributeType"
      ],
      "members": {
        "AttributeName": {},
        "AttributeType": {}
      }
    },
    "S12": {
      "type": "structure",
      "required": [
        "ReadCapacityUnits",
        "WriteCapacityUnits"
      ],
      "members": {
        "ReadCapacityUnits": {
          "type": "long"
        },
        "WriteCapacityUnits": {
          "type": "long"
        }
      }
    },
    "S15": {
      "type": "structure",
      "members": {
        "TableName": {},
        "KeySchema": {
          "shape": "Sy"
        },
        "TableStatus": {},
        "CreationDateTime": {
          "type": "timestamp"
        },
        "ProvisionedThroughput": {
          "type": "structure",
          "members": {
            "LastIncreaseDateTime": {
              "type": "timestamp"
            },
            "LastDecreaseDateTime": {
              "type": "timestamp"
            },
            "NumberOfDecreasesToday": {
              "type": "long"
            },
            "ReadCapacityUnits": {
              "type": "long"
            },
            "WriteCapacityUnits": {
              "type": "long"
            }
          }
        },
        "TableSizeBytes": {
          "type": "long"
        },
        "ItemCount": {
          "type": "long"
        }
      }
    },
    "S1b": {
      "type": "map",
      "key": {},
      "value": {
        "type": "structure",
        "members": {
          "Value": {
            "shape": "S7"
          },
          "Exists": {
            "type": "boolean"
          }
        }
      }
    },
    "S1u": {
      "type": "structure",
      "required": [
        "ComparisonOperator"
      ],
      "members": {
        "AttributeValueList": {
          "type": "list",
          "member": {
            "shape": "S7"
          }
        },
        "ComparisonOperator": {}
      }
    }
  }
}
},{}],9:[function(require,module,exports){
module.exports={
  "pagination": {
    "BatchGetItem": {
      "input_token": "RequestItems",
      "output_token": "UnprocessedKeys"
    },
    "ListTables": {
      "input_token": "ExclusiveStartTableName",
      "limit_key": "Limit",
      "output_token": "LastEvaluatedTableName",
      "result_key": "TableNames"
    },
    "Query": {
      "input_token": "ExclusiveStartKey",
      "limit_key": "Limit",
      "output_token": "LastEvaluatedKey",
      "result_key": "Items"
    },
    "Scan": {
      "input_token": "ExclusiveStartKey",
      "limit_key": "Limit",
      "output_token": "LastEvaluatedKey",
      "result_key": "Items"
    }
  }
}
},{}],10:[function(require,module,exports){
module.exports={
  "version": 2,
  "waiters": {
    "TableExists": {
      "delay": 20,
      "operation": "DescribeTable",
      "maxAttempts": 25,
      "acceptors": [
        {
          "expected": "ACTIVE",
          "matcher": "path",
          "state": "success",
          "argument": "Table.TableStatus"
        },
        {
          "expected": "ResourceNotFoundException",
          "matcher": "error",
          "state": "retry"
        }
      ]
    },
    "TableNotExists": {
      "delay": 20,
      "operation": "DescribeTable",
      "maxAttempts": 25,
      "acceptors": [
        {
          "expected": "ResourceNotFoundException",
          "matcher": "error",
          "state": "success"
        }
      ]
    }
  }
}

},{}],11:[function(require,module,exports){
module.exports={
  "version": "2.0",
  "metadata": {
    "apiVersion": "2012-08-10",
    "endpointPrefix": "dynamodb",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "DynamoDB",
    "serviceFullName": "Amazon DynamoDB",
    "serviceId": "DynamoDB",
    "signatureVersion": "v4",
    "targetPrefix": "DynamoDB_20120810",
    "uid": "dynamodb-2012-08-10"
  },
  "operations": {
    "BatchGetItem": {
      "input": {
        "type": "structure",
        "required": [
          "RequestItems"
        ],
        "members": {
          "RequestItems": {
            "shape": "S2"
          },
          "ReturnConsumedCapacity": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Responses": {
            "type": "map",
            "key": {},
            "value": {
              "shape": "Sr"
            }
          },
          "UnprocessedKeys": {
            "shape": "S2"
          },
          "ConsumedCapacity": {
            "shape": "St"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "BatchWriteItem": {
      "input": {
        "type": "structure",
        "required": [
          "RequestItems"
        ],
        "members": {
          "RequestItems": {
            "shape": "S10"
          },
          "ReturnConsumedCapacity": {},
          "ReturnItemCollectionMetrics": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "UnprocessedItems": {
            "shape": "S10"
          },
          "ItemCollectionMetrics": {
            "shape": "S18"
          },
          "ConsumedCapacity": {
            "shape": "St"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "CreateBackup": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "BackupName"
        ],
        "members": {
          "TableName": {},
          "BackupName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "BackupDetails": {
            "shape": "S1h"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "CreateGlobalTable": {
      "input": {
        "type": "structure",
        "required": [
          "GlobalTableName",
          "ReplicationGroup"
        ],
        "members": {
          "GlobalTableName": {},
          "ReplicationGroup": {
            "shape": "S1p"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "GlobalTableDescription": {
            "shape": "S1t"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "CreateTable": {
      "input": {
        "type": "structure",
        "required": [
          "AttributeDefinitions",
          "TableName",
          "KeySchema"
        ],
        "members": {
          "AttributeDefinitions": {
            "shape": "S1z"
          },
          "TableName": {},
          "KeySchema": {
            "shape": "S23"
          },
          "LocalSecondaryIndexes": {
            "type": "list",
            "member": {
              "type": "structure",
              "required": [
                "IndexName",
                "KeySchema",
                "Projection"
              ],
              "members": {
                "IndexName": {},
                "KeySchema": {
                  "shape": "S23"
                },
                "Projection": {
                  "shape": "S28"
                }
              }
            }
          },
          "GlobalSecondaryIndexes": {
            "type": "list",
            "member": {
              "type": "structure",
              "required": [
                "IndexName",
                "KeySchema",
                "Projection"
              ],
              "members": {
                "IndexName": {},
                "KeySchema": {
                  "shape": "S23"
                },
                "Projection": {
                  "shape": "S28"
                },
                "ProvisionedThroughput": {
                  "shape": "S2e"
                }
              }
            }
          },
          "BillingMode": {},
          "ProvisionedThroughput": {
            "shape": "S2e"
          },
          "StreamSpecification": {
            "shape": "S2h"
          },
          "SSESpecification": {
            "shape": "S2k"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape": "S2p"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DeleteBackup": {
      "input": {
        "type": "structure",
        "required": [
          "BackupArn"
        ],
        "members": {
          "BackupArn": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "BackupDescription": {
            "shape": "S3c"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DeleteItem": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "Key"
        ],
        "members": {
          "TableName": {},
          "Key": {
            "shape": "S6"
          },
          "Expected": {
            "shape": "S3p"
          },
          "ConditionalOperator": {},
          "ReturnValues": {},
          "ReturnConsumedCapacity": {},
          "ReturnItemCollectionMetrics": {},
          "ConditionExpression": {},
          "ExpressionAttributeNames": {
            "shape": "Sm"
          },
          "ExpressionAttributeValues": {
            "shape": "S3x"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Attributes": {
            "shape": "Ss"
          },
          "ConsumedCapacity": {
            "shape": "Su"
          },
          "ItemCollectionMetrics": {
            "shape": "S1a"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DeleteTable": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape": "S2p"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DescribeBackup": {
      "input": {
        "type": "structure",
        "required": [
          "BackupArn"
        ],
        "members": {
          "BackupArn": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "BackupDescription": {
            "shape": "S3c"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DescribeContinuousBackups": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "ContinuousBackupsDescription": {
            "shape": "S46"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DescribeEndpoints": {
      "input": {
        "type": "structure",
        "members": {}
      },
      "output": {
        "type": "structure",
        "required": [
          "Endpoints"
        ],
        "members": {
          "Endpoints": {
            "type": "list",
            "member": {
              "type": "structure",
              "required": [
                "Address",
                "CachePeriodInMinutes"
              ],
              "members": {
                "Address": {},
                "CachePeriodInMinutes": {
                  "type": "long"
                }
              }
            }
          }
        }
      },
      "endpointoperation": true
    },
    "DescribeGlobalTable": {
      "input": {
        "type": "structure",
        "required": [
          "GlobalTableName"
        ],
        "members": {
          "GlobalTableName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "GlobalTableDescription": {
            "shape": "S1t"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DescribeGlobalTableSettings": {
      "input": {
        "type": "structure",
        "required": [
          "GlobalTableName"
        ],
        "members": {
          "GlobalTableName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "GlobalTableName": {},
          "ReplicaSettings": {
            "shape": "S4i"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DescribeLimits": {
      "input": {
        "type": "structure",
        "members": {}
      },
      "output": {
        "type": "structure",
        "members": {
          "AccountMaxReadCapacityUnits": {
            "type": "long"
          },
          "AccountMaxWriteCapacityUnits": {
            "type": "long"
          },
          "TableMaxReadCapacityUnits": {
            "type": "long"
          },
          "TableMaxWriteCapacityUnits": {
            "type": "long"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DescribeTable": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Table": {
            "shape": "S2p"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "DescribeTimeToLive": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TimeToLiveDescription": {
            "shape": "S3l"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "GetItem": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "Key"
        ],
        "members": {
          "TableName": {},
          "Key": {
            "shape": "S6"
          },
          "AttributesToGet": {
            "shape": "Sj"
          },
          "ConsistentRead": {
            "type": "boolean"
          },
          "ReturnConsumedCapacity": {},
          "ProjectionExpression": {},
          "ExpressionAttributeNames": {
            "shape": "Sm"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Item": {
            "shape": "Ss"
          },
          "ConsumedCapacity": {
            "shape": "Su"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "ListBackups": {
      "input": {
        "type": "structure",
        "members": {
          "TableName": {},
          "Limit": {
            "type": "integer"
          },
          "TimeRangeLowerBound": {
            "type": "timestamp"
          },
          "TimeRangeUpperBound": {
            "type": "timestamp"
          },
          "ExclusiveStartBackupArn": {},
          "BackupType": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "BackupSummaries": {
            "type": "list",
            "member": {
              "type": "structure",
              "members": {
                "TableName": {},
                "TableId": {},
                "TableArn": {},
                "BackupArn": {},
                "BackupName": {},
                "BackupCreationDateTime": {
                  "type": "timestamp"
                },
                "BackupExpiryDateTime": {
                  "type": "timestamp"
                },
                "BackupStatus": {},
                "BackupType": {},
                "BackupSizeBytes": {
                  "type": "long"
                }
              }
            }
          },
          "LastEvaluatedBackupArn": {}
        }
      },
      "endpointdiscovery": {}
    },
    "ListGlobalTables": {
      "input": {
        "type": "structure",
        "members": {
          "ExclusiveStartGlobalTableName": {},
          "Limit": {
            "type": "integer"
          },
          "RegionName": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "GlobalTables": {
            "type": "list",
            "member": {
              "type": "structure",
              "members": {
                "GlobalTableName": {},
                "ReplicationGroup": {
                  "shape": "S1p"
                }
              }
            }
          },
          "LastEvaluatedGlobalTableName": {}
        }
      },
      "endpointdiscovery": {}
    },
    "ListTables": {
      "input": {
        "type": "structure",
        "members": {
          "ExclusiveStartTableName": {},
          "Limit": {
            "type": "integer"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableNames": {
            "type": "list",
            "member": {}
          },
          "LastEvaluatedTableName": {}
        }
      },
      "endpointdiscovery": {}
    },
    "ListTagsOfResource": {
      "input": {
        "type": "structure",
        "required": [
          "ResourceArn"
        ],
        "members": {
          "ResourceArn": {},
          "NextToken": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Tags": {
            "shape": "S5n"
          },
          "NextToken": {}
        }
      },
      "endpointdiscovery": {}
    },
    "PutItem": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "Item"
        ],
        "members": {
          "TableName": {},
          "Item": {
            "shape": "S14"
          },
          "Expected": {
            "shape": "S3p"
          },
          "ReturnValues": {},
          "ReturnConsumedCapacity": {},
          "ReturnItemCollectionMetrics": {},
          "ConditionalOperator": {},
          "ConditionExpression": {},
          "ExpressionAttributeNames": {
            "shape": "Sm"
          },
          "ExpressionAttributeValues": {
            "shape": "S3x"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Attributes": {
            "shape": "Ss"
          },
          "ConsumedCapacity": {
            "shape": "Su"
          },
          "ItemCollectionMetrics": {
            "shape": "S1a"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "Query": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {},
          "IndexName": {},
          "Select": {},
          "AttributesToGet": {
            "shape": "Sj"
          },
          "Limit": {
            "type": "integer"
          },
          "ConsistentRead": {
            "type": "boolean"
          },
          "KeyConditions": {
            "type": "map",
            "key": {},
            "value": {
              "shape": "S5w"
            }
          },
          "QueryFilter": {
            "shape": "S5x"
          },
          "ConditionalOperator": {},
          "ScanIndexForward": {
            "type": "boolean"
          },
          "ExclusiveStartKey": {
            "shape": "S6"
          },
          "ReturnConsumedCapacity": {},
          "ProjectionExpression": {},
          "FilterExpression": {},
          "KeyConditionExpression": {},
          "ExpressionAttributeNames": {
            "shape": "Sm"
          },
          "ExpressionAttributeValues": {
            "shape": "S3x"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Items": {
            "shape": "Sr"
          },
          "Count": {
            "type": "integer"
          },
          "ScannedCount": {
            "type": "integer"
          },
          "LastEvaluatedKey": {
            "shape": "S6"
          },
          "ConsumedCapacity": {
            "shape": "Su"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "RestoreTableFromBackup": {
      "input": {
        "type": "structure",
        "required": [
          "TargetTableName",
          "BackupArn"
        ],
        "members": {
          "TargetTableName": {},
          "BackupArn": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape": "S2p"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "RestoreTableToPointInTime": {
      "input": {
        "type": "structure",
        "required": [
          "SourceTableName",
          "TargetTableName"
        ],
        "members": {
          "SourceTableName": {},
          "TargetTableName": {},
          "UseLatestRestorableTime": {
            "type": "boolean"
          },
          "RestoreDateTime": {
            "type": "timestamp"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape": "S2p"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "Scan": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "TableName": {},
          "IndexName": {},
          "AttributesToGet": {
            "shape": "Sj"
          },
          "Limit": {
            "type": "integer"
          },
          "Select": {},
          "ScanFilter": {
            "shape": "S5x"
          },
          "ConditionalOperator": {},
          "ExclusiveStartKey": {
            "shape": "S6"
          },
          "ReturnConsumedCapacity": {},
          "TotalSegments": {
            "type": "integer"
          },
          "Segment": {
            "type": "integer"
          },
          "ProjectionExpression": {},
          "FilterExpression": {},
          "ExpressionAttributeNames": {
            "shape": "Sm"
          },
          "ExpressionAttributeValues": {
            "shape": "S3x"
          },
          "ConsistentRead": {
            "type": "boolean"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Items": {
            "shape": "Sr"
          },
          "Count": {
            "type": "integer"
          },
          "ScannedCount": {
            "type": "integer"
          },
          "LastEvaluatedKey": {
            "shape": "S6"
          },
          "ConsumedCapacity": {
            "shape": "Su"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "TagResource": {
      "input": {
        "type": "structure",
        "required": [
          "ResourceArn",
          "Tags"
        ],
        "members": {
          "ResourceArn": {},
          "Tags": {
            "shape": "S5n"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "TransactGetItems": {
      "input": {
        "type": "structure",
        "required": [
          "TransactItems"
        ],
        "members": {
          "TransactItems": {
            "type": "list",
            "member": {
              "type": "structure",
              "required": [
                "Get"
              ],
              "members": {
                "Get": {
                  "type": "structure",
                  "required": [
                    "Key",
                    "TableName"
                  ],
                  "members": {
                    "Key": {
                      "shape": "S6"
                    },
                    "TableName": {},
                    "ProjectionExpression": {},
                    "ExpressionAttributeNames": {
                      "shape": "Sm"
                    }
                  }
                }
              }
            }
          },
          "ReturnConsumedCapacity": {}
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "ConsumedCapacity": {
            "shape": "St"
          },
          "Responses": {
            "type": "list",
            "member": {
              "type": "structure",
              "members": {
                "Item": {
                  "shape": "Ss"
                }
              }
            }
          }
        }
      },
      "endpointdiscovery": {}
    },
    "TransactWriteItems": {
      "input": {
        "type": "structure",
        "required": [
          "TransactItems"
        ],
        "members": {
          "TransactItems": {
            "type": "list",
            "member": {
              "type": "structure",
              "members": {
                "ConditionCheck": {
                  "type": "structure",
                  "required": [
                    "Key",
                    "TableName",
                    "ConditionExpression"
                  ],
                  "members": {
                    "Key": {
                      "shape": "S6"
                    },
                    "TableName": {},
                    "ConditionExpression": {},
                    "ExpressionAttributeNames": {
                      "shape": "Sm"
                    },
                    "ExpressionAttributeValues": {
                      "shape": "S3x"
                    },
                    "ReturnValuesOnConditionCheckFailure": {}
                  }
                },
                "Put": {
                  "type": "structure",
                  "required": [
                    "Item",
                    "TableName"
                  ],
                  "members": {
                    "Item": {
                      "shape": "S14"
                    },
                    "TableName": {},
                    "ConditionExpression": {},
                    "ExpressionAttributeNames": {
                      "shape": "Sm"
                    },
                    "ExpressionAttributeValues": {
                      "shape": "S3x"
                    },
                    "ReturnValuesOnConditionCheckFailure": {}
                  }
                },
                "Delete": {
                  "type": "structure",
                  "required": [
                    "Key",
                    "TableName"
                  ],
                  "members": {
                    "Key": {
                      "shape": "S6"
                    },
                    "TableName": {},
                    "ConditionExpression": {},
                    "ExpressionAttributeNames": {
                      "shape": "Sm"
                    },
                    "ExpressionAttributeValues": {
                      "shape": "S3x"
                    },
                    "ReturnValuesOnConditionCheckFailure": {}
                  }
                },
                "Update": {
                  "type": "structure",
                  "required": [
                    "Key",
                    "UpdateExpression",
                    "TableName"
                  ],
                  "members": {
                    "Key": {
                      "shape": "S6"
                    },
                    "UpdateExpression": {},
                    "TableName": {},
                    "ConditionExpression": {},
                    "ExpressionAttributeNames": {
                      "shape": "Sm"
                    },
                    "ExpressionAttributeValues": {
                      "shape": "S3x"
                    },
                    "ReturnValuesOnConditionCheckFailure": {}
                  }
                }
              }
            }
          },
          "ReturnConsumedCapacity": {},
          "ReturnItemCollectionMetrics": {},
          "ClientRequestToken": {
            "idempotencyToken": true
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "ConsumedCapacity": {
            "shape": "St"
          },
          "ItemCollectionMetrics": {
            "shape": "S18"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "UntagResource": {
      "input": {
        "type": "structure",
        "required": [
          "ResourceArn",
          "TagKeys"
        ],
        "members": {
          "ResourceArn": {},
          "TagKeys": {
            "type": "list",
            "member": {}
          }
        }
      },
      "endpointdiscovery": {}
    },
    "UpdateContinuousBackups": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "PointInTimeRecoverySpecification"
        ],
        "members": {
          "TableName": {},
          "PointInTimeRecoverySpecification": {
            "type": "structure",
            "required": [
              "PointInTimeRecoveryEnabled"
            ],
            "members": {
              "PointInTimeRecoveryEnabled": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "ContinuousBackupsDescription": {
            "shape": "S46"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "UpdateGlobalTable": {
      "input": {
        "type": "structure",
        "required": [
          "GlobalTableName",
          "ReplicaUpdates"
        ],
        "members": {
          "GlobalTableName": {},
          "ReplicaUpdates": {
            "type": "list",
            "member": {
              "type": "structure",
              "members": {
                "Create": {
                  "type": "structure",
                  "required": [
                    "RegionName"
                  ],
                  "members": {
                    "RegionName": {}
                  }
                },
                "Delete": {
                  "type": "structure",
                  "required": [
                    "RegionName"
                  ],
                  "members": {
                    "RegionName": {}
                  }
                }
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "GlobalTableDescription": {
            "shape": "S1t"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "UpdateGlobalTableSettings": {
      "input": {
        "type": "structure",
        "required": [
          "GlobalTableName"
        ],
        "members": {
          "GlobalTableName": {},
          "GlobalTableBillingMode": {},
          "GlobalTableProvisionedWriteCapacityUnits": {
            "type": "long"
          },
          "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate": {
            "shape": "S74"
          },
          "GlobalTableGlobalSecondaryIndexSettingsUpdate": {
            "type": "list",
            "member": {
              "type": "structure",
              "required": [
                "IndexName"
              ],
              "members": {
                "IndexName": {},
                "ProvisionedWriteCapacityUnits": {
                  "type": "long"
                },
                "ProvisionedWriteCapacityAutoScalingSettingsUpdate": {
                  "shape": "S74"
                }
              }
            }
          },
          "ReplicaSettingsUpdate": {
            "type": "list",
            "member": {
              "type": "structure",
              "required": [
                "RegionName"
              ],
              "members": {
                "RegionName": {},
                "ReplicaProvisionedReadCapacityUnits": {
                  "type": "long"
                },
                "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate": {
                  "shape": "S74"
                },
                "ReplicaGlobalSecondaryIndexSettingsUpdate": {
                  "type": "list",
                  "member": {
                    "type": "structure",
                    "required": [
                      "IndexName"
                    ],
                    "members": {
                      "IndexName": {},
                      "ProvisionedReadCapacityUnits": {
                        "type": "long"
                      },
                      "ProvisionedReadCapacityAutoScalingSettingsUpdate": {
                        "shape": "S74"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "GlobalTableName": {},
          "ReplicaSettings": {
            "shape": "S4i"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "UpdateItem": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "Key"
        ],
        "members": {
          "TableName": {},
          "Key": {
            "shape": "S6"
          },
          "AttributeUpdates": {
            "type": "map",
            "key": {},
            "value": {
              "type": "structure",
              "members": {
                "Value": {
                  "shape": "S8"
                },
                "Action": {}
              }
            }
          },
          "Expected": {
            "shape": "S3p"
          },
          "ConditionalOperator": {},
          "ReturnValues": {},
          "ReturnConsumedCapacity": {},
          "ReturnItemCollectionMetrics": {},
          "UpdateExpression": {},
          "ConditionExpression": {},
          "ExpressionAttributeNames": {
            "shape": "Sm"
          },
          "ExpressionAttributeValues": {
            "shape": "S3x"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "Attributes": {
            "shape": "Ss"
          },
          "ConsumedCapacity": {
            "shape": "Su"
          },
          "ItemCollectionMetrics": {
            "shape": "S1a"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "UpdateTable": {
      "input": {
        "type": "structure",
        "required": [
          "TableName"
        ],
        "members": {
          "AttributeDefinitions": {
            "shape": "S1z"
          },
          "TableName": {},
          "BillingMode": {},
          "ProvisionedThroughput": {
            "shape": "S2e"
          },
          "GlobalSecondaryIndexUpdates": {
            "type": "list",
            "member": {
              "type": "structure",
              "members": {
                "Update": {
                  "type": "structure",
                  "required": [
                    "IndexName",
                    "ProvisionedThroughput"
                  ],
                  "members": {
                    "IndexName": {},
                    "ProvisionedThroughput": {
                      "shape": "S2e"
                    }
                  }
                },
                "Create": {
                  "type": "structure",
                  "required": [
                    "IndexName",
                    "KeySchema",
                    "Projection"
                  ],
                  "members": {
                    "IndexName": {},
                    "KeySchema": {
                      "shape": "S23"
                    },
                    "Projection": {
                      "shape": "S28"
                    },
                    "ProvisionedThroughput": {
                      "shape": "S2e"
                    }
                  }
                },
                "Delete": {
                  "type": "structure",
                  "required": [
                    "IndexName"
                  ],
                  "members": {
                    "IndexName": {}
                  }
                }
              }
            }
          },
          "StreamSpecification": {
            "shape": "S2h"
          },
          "SSESpecification": {
            "shape": "S2k"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TableDescription": {
            "shape": "S2p"
          }
        }
      },
      "endpointdiscovery": {}
    },
    "UpdateTimeToLive": {
      "input": {
        "type": "structure",
        "required": [
          "TableName",
          "TimeToLiveSpecification"
        ],
        "members": {
          "TableName": {},
          "TimeToLiveSpecification": {
            "shape": "S7s"
          }
        }
      },
      "output": {
        "type": "structure",
        "members": {
          "TimeToLiveSpecification": {
            "shape": "S7s"
          }
        }
      },
      "endpointdiscovery": {}
    }
  },
  "shapes": {
    "S2": {
      "type": "map",
      "key": {},
      "value": {
        "type": "structure",
        "required": [
          "Keys"
        ],
        "members": {
          "Keys": {
            "type": "list",
            "member": {
              "shape": "S6"
            }
          },
          "AttributesToGet": {
            "shape": "Sj"
          },
          "ConsistentRead": {
            "type": "boolean"
          },
          "ProjectionExpression": {},
          "ExpressionAttributeNames": {
            "shape": "Sm"
          }
        }
      }
    },
    "S6": {
      "type": "map",
      "key": {},
      "value": {
        "shape": "S8"
      }
    },
    "S8": {
      "type": "structure",
      "members": {
        "S": {},
        "N": {},
        "B": {
          "type": "blob"
        },
        "SS": {
          "type": "list",
          "member": {}
        },
        "NS": {
          "type": "list",
          "member": {}
        },
        "BS": {
          "type": "list",
          "member": {
            "type": "blob"
          }
        },
        "M": {
          "type": "map",
          "key": {},
          "value": {
            "shape": "S8"
          }
        },
        "L": {
          "type": "list",
          "member": {
            "shape": "S8"
          }
        },
        "NULL": {
          "type": "boolean"
        },
        "BOOL": {
          "type": "boolean"
        }
      }
    },
    "Sj": {
      "type": "list",
      "member": {}
    },
    "Sm": {
      "type": "map",
      "key": {},
      "value": {}
    },
    "Sr": {
      "type": "list",
      "member": {
        "shape": "Ss"
      }
    },
    "Ss": {
      "type": "map",
      "key": {},
      "value": {
        "shape": "S8"
      }
    },
    "St": {
      "type": "list",
      "member": {
        "shape": "Su"
      }
    },
    "Su": {
      "type": "structure",
      "members": {
        "TableName": {},
        "CapacityUnits": {
          "type": "double"
        },
        "ReadCapacityUnits": {
          "type": "double"
        },
        "WriteCapacityUnits": {
          "type": "double"
        },
        "Table": {
          "shape": "Sw"
        },
        "LocalSecondaryIndexes": {
          "shape": "Sx"
        },
        "GlobalSecondaryIndexes": {
          "shape": "Sx"
        }
      }
    },
    "Sw": {
      "type": "structure",
      "members": {
        "ReadCapacityUnits": {
          "type": "double"
        },
        "WriteCapacityUnits": {
          "type": "double"
        },
        "CapacityUnits": {
          "type": "double"
        }
      }
    },
    "Sx": {
      "type": "map",
      "key": {},
      "value": {
        "shape": "Sw"
      }
    },
    "S10": {
      "type": "map",
      "key": {},
      "value": {
        "type": "list",
        "member": {
          "type": "structure",
          "members": {
            "PutRequest": {
              "type": "structure",
              "required": [
                "Item"
              ],
              "members": {
                "Item": {
                  "shape": "S14"
                }
              }
            },
            "DeleteRequest": {
              "type": "structure",
              "required": [
                "Key"
              ],
              "members": {
                "Key": {
                  "shape": "S6"
                }
              }
            }
          }
        }
      }
    },
    "S14": {
      "type": "map",
      "key": {},
      "value": {
        "shape": "S8"
      }
    },
    "S18": {
      "type": "map",
      "key": {},
      "value": {
        "type": "list",
        "member": {
          "shape": "S1a"
        }
      }
    },
    "S1a": {
      "type": "structure",
      "members": {
        "ItemCollectionKey": {
          "type": "map",
          "key": {},
          "value": {
            "shape": "S8"
          }
        },
        "SizeEstimateRangeGB": {
          "type": "list",
          "member": {
            "type": "double"
          }
        }
      }
    },
    "S1h": {
      "type": "structure",
      "required": [
        "BackupArn",
        "BackupName",
        "BackupStatus",
        "BackupType",
        "BackupCreationDateTime"
      ],
      "members": {
        "BackupArn": {},
        "BackupName": {},
        "BackupSizeBytes": {
          "type": "long"
        },
        "BackupStatus": {},
        "BackupType": {},
        "BackupCreationDateTime": {
          "type": "timestamp"
        },
        "BackupExpiryDateTime": {
          "type": "timestamp"
        }
      }
    },
    "S1p": {
      "type": "list",
      "member": {
        "type": "structure",
        "members": {
          "RegionName": {}
        }
      }
    },
    "S1t": {
      "type": "structure",
      "members": {
        "ReplicationGroup": {
          "type": "list",
          "member": {
            "type": "structure",
            "members": {
              "RegionName": {}
            }
          }
        },
        "GlobalTableArn": {},
        "CreationDateTime": {
          "type": "timestamp"
        },
        "GlobalTableStatus": {},
        "GlobalTableName": {}
      }
    },
    "S1z": {
      "type": "list",
      "member": {
        "type": "structure",
        "required": [
          "AttributeName",
          "AttributeType"
        ],
        "members": {
          "AttributeName": {},
          "AttributeType": {}
        }
      }
    },
    "S23": {
      "type": "list",
      "member": {
        "type": "structure",
        "required": [
          "AttributeName",
          "KeyType"
        ],
        "members": {
          "AttributeName": {},
          "KeyType": {}
        }
      }
    },
    "S28": {
      "type": "structure",
      "members": {
        "ProjectionType": {},
        "NonKeyAttributes": {
          "type": "list",
          "member": {}
        }
      }
    },
    "S2e": {
      "type": "structure",
      "required": [
        "ReadCapacityUnits",
        "WriteCapacityUnits"
      ],
      "members": {
        "ReadCapacityUnits": {
          "type": "long"
        },
        "WriteCapacityUnits": {
          "type": "long"
        }
      }
    },
    "S2h": {
      "type": "structure",
      "members": {
        "StreamEnabled": {
          "type": "boolean"
        },
        "StreamViewType": {}
      }
    },
    "S2k": {
      "type": "structure",
      "members": {
        "Enabled": {
          "type": "boolean"
        },
        "SSEType": {},
        "KMSMasterKeyId": {}
      }
    },
    "S2p": {
      "type": "structure",
      "members": {
        "AttributeDefinitions": {
          "shape": "S1z"
        },
        "TableName": {},
        "KeySchema": {
          "shape": "S23"
        },
        "TableStatus": {},
        "CreationDateTime": {
          "type": "timestamp"
        },
        "ProvisionedThroughput": {
          "shape": "S2r"
        },
        "TableSizeBytes": {
          "type": "long"
        },
        "ItemCount": {
          "type": "long"
        },
        "TableArn": {},
        "TableId": {},
        "BillingModeSummary": {
          "shape": "S2w"
        },
        "LocalSecondaryIndexes": {
          "type": "list",
          "member": {
            "type": "structure",
            "members": {
              "IndexName": {},
              "KeySchema": {
                "shape": "S23"
              },
              "Projection": {
                "shape": "S28"
              },
              "IndexSizeBytes": {
                "type": "long"
              },
              "ItemCount": {
                "type": "long"
              },
              "IndexArn": {}
            }
          }
        },
        "GlobalSecondaryIndexes": {
          "type": "list",
          "member": {
            "type": "structure",
            "members": {
              "IndexName": {},
              "KeySchema": {
                "shape": "S23"
              },
              "Projection": {
                "shape": "S28"
              },
              "IndexStatus": {},
              "Backfilling": {
                "type": "boolean"
              },
              "ProvisionedThroughput": {
                "shape": "S2r"
              },
              "IndexSizeBytes": {
                "type": "long"
              },
              "ItemCount": {
                "type": "long"
              },
              "IndexArn": {}
            }
          }
        },
        "StreamSpecification": {
          "shape": "S2h"
        },
        "LatestStreamLabel": {},
        "LatestStreamArn": {},
        "RestoreSummary": {
          "type": "structure",
          "required": [
            "RestoreDateTime",
            "RestoreInProgress"
          ],
          "members": {
            "SourceBackupArn": {},
            "SourceTableArn": {},
            "RestoreDateTime": {
              "type": "timestamp"
            },
            "RestoreInProgress": {
              "type": "boolean"
            }
          }
        },
        "SSEDescription": {
          "shape": "S37"
        }
      }
    },
    "S2r": {
      "type": "structure",
      "members": {
        "LastIncreaseDateTime": {
          "type": "timestamp"
        },
        "LastDecreaseDateTime": {
          "type": "timestamp"
        },
        "NumberOfDecreasesToday": {
          "type": "long"
        },
        "ReadCapacityUnits": {
          "type": "long"
        },
        "WriteCapacityUnits": {
          "type": "long"
        }
      }
    },
    "S2w": {
      "type": "structure",
      "members": {
        "BillingMode": {},
        "LastUpdateToPayPerRequestDateTime": {
          "type": "timestamp"
        }
      }
    },
    "S37": {
      "type": "structure",
      "members": {
        "Status": {},
        "SSEType": {},
        "KMSMasterKeyArn": {}
      }
    },
    "S3c": {
      "type": "structure",
      "members": {
        "BackupDetails": {
          "shape": "S1h"
        },
        "SourceTableDetails": {
          "type": "structure",
          "required": [
            "TableName",
            "TableId",
            "KeySchema",
            "TableCreationDateTime",
            "ProvisionedThroughput"
          ],
          "members": {
            "TableName": {},
            "TableId": {},
            "TableArn": {},
            "TableSizeBytes": {
              "type": "long"
            },
            "KeySchema": {
              "shape": "S23"
            },
            "TableCreationDateTime": {
              "type": "timestamp"
            },
            "ProvisionedThroughput": {
              "shape": "S2e"
            },
            "ItemCount": {
              "type": "long"
            },
            "BillingMode": {}
          }
        },
        "SourceTableFeatureDetails": {
          "type": "structure",
          "members": {
            "LocalSecondaryIndexes": {
              "type": "list",
              "member": {
                "type": "structure",
                "members": {
                  "IndexName": {},
                  "KeySchema": {
                    "shape": "S23"
                  },
                  "Projection": {
                    "shape": "S28"
                  }
                }
              }
            },
            "GlobalSecondaryIndexes": {
              "type": "list",
              "member": {
                "type": "structure",
                "members": {
                  "IndexName": {},
                  "KeySchema": {
                    "shape": "S23"
                  },
                  "Projection": {
                    "shape": "S28"
                  },
                  "ProvisionedThroughput": {
                    "shape": "S2e"
                  }
                }
              }
            },
            "StreamDescription": {
              "shape": "S2h"
            },
            "TimeToLiveDescription": {
              "shape": "S3l"
            },
            "SSEDescription": {
              "shape": "S37"
            }
          }
        }
      }
    },
    "S3l": {
      "type": "structure",
      "members": {
        "TimeToLiveStatus": {},
        "AttributeName": {}
      }
    },
    "S3p": {
      "type": "map",
      "key": {},
      "value": {
        "type": "structure",
        "members": {
          "Value": {
            "shape": "S8"
          },
          "Exists": {
            "type": "boolean"
          },
          "ComparisonOperator": {},
          "AttributeValueList": {
            "shape": "S3t"
          }
        }
      }
    },
    "S3t": {
      "type": "list",
      "member": {
        "shape": "S8"
      }
    },
    "S3x": {
      "type": "map",
      "key": {},
      "value": {
        "shape": "S8"
      }
    },
    "S46": {
      "type": "structure",
      "required": [
        "ContinuousBackupsStatus"
      ],
      "members": {
        "ContinuousBackupsStatus": {},
        "PointInTimeRecoveryDescription": {
          "type": "structure",
          "members": {
            "PointInTimeRecoveryStatus": {},
            "EarliestRestorableDateTime": {
              "type": "timestamp"
            },
            "LatestRestorableDateTime": {
              "type": "timestamp"
            }
          }
        }
      }
    },
    "S4i": {
      "type": "list",
      "member": {
        "type": "structure",
        "required": [
          "RegionName"
        ],
        "members": {
          "RegionName": {},
          "ReplicaStatus": {},
          "ReplicaBillingModeSummary": {
            "shape": "S2w"
          },
          "ReplicaProvisionedReadCapacityUnits": {
            "type": "long"
          },
          "ReplicaProvisionedReadCapacityAutoScalingSettings": {
            "shape": "S4l"
          },
          "ReplicaProvisionedWriteCapacityUnits": {
            "type": "long"
          },
          "ReplicaProvisionedWriteCapacityAutoScalingSettings": {
            "shape": "S4l"
          },
          "ReplicaGlobalSecondaryIndexSettings": {
            "type": "list",
            "member": {
              "type": "structure",
              "required": [
                "IndexName"
              ],
              "members": {
                "IndexName": {},
                "IndexStatus": {},
                "ProvisionedReadCapacityUnits": {
                  "type": "long"
                },
                "ProvisionedReadCapacityAutoScalingSettings": {
                  "shape": "S4l"
                },
                "ProvisionedWriteCapacityUnits": {
                  "type": "long"
                },
                "ProvisionedWriteCapacityAutoScalingSettings": {
                  "shape": "S4l"
                }
              }
            }
          }
        }
      }
    },
    "S4l": {
      "type": "structure",
      "members": {
        "MinimumUnits": {
          "type": "long"
        },
        "MaximumUnits": {
          "type": "long"
        },
        "AutoScalingDisabled": {
          "type": "boolean"
        },
        "AutoScalingRoleArn": {},
        "ScalingPolicies": {
          "type": "list",
          "member": {
            "type": "structure",
            "members": {
              "PolicyName": {},
              "TargetTrackingScalingPolicyConfiguration": {
                "type": "structure",
                "required": [
                  "TargetValue"
                ],
                "members": {
                  "DisableScaleIn": {
                    "type": "boolean"
                  },
                  "ScaleInCooldown": {
                    "type": "integer"
                  },
                  "ScaleOutCooldown": {
                    "type": "integer"
                  },
                  "TargetValue": {
                    "type": "double"
                  }
                }
              }
            }
          }
        }
      }
    },
    "S5n": {
      "type": "list",
      "member": {
        "type": "structure",
        "required": [
          "Key",
          "Value"
        ],
        "members": {
          "Key": {},
          "Value": {}
        }
      }
    },
    "S5w": {
      "type": "structure",
      "required": [
        "ComparisonOperator"
      ],
      "members": {
        "AttributeValueList": {
          "shape": "S3t"
        },
        "ComparisonOperator": {}
      }
    },
    "S5x": {
      "type": "map",
      "key": {},
      "value": {
        "shape": "S5w"
      }
    },
    "S74": {
      "type": "structure",
      "members": {
        "MinimumUnits": {
          "type": "long"
        },
        "MaximumUnits": {
          "type": "long"
        },
        "AutoScalingDisabled": {
          "type": "boolean"
        },
        "AutoScalingRoleArn": {},
        "ScalingPolicyUpdate": {
          "type": "structure",
          "required": [
            "TargetTrackingScalingPolicyConfiguration"
          ],
          "members": {
            "PolicyName": {},
            "TargetTrackingScalingPolicyConfiguration": {
              "type": "structure",
              "required": [
                "TargetValue"
              ],
              "members": {
                "DisableScaleIn": {
                  "type": "boolean"
                },
                "ScaleInCooldown": {
                  "type": "integer"
                },
                "ScaleOutCooldown": {
                  "type": "integer"
                },
                "TargetValue": {
                  "type": "double"
                }
              }
            }
          }
        }
      }
    },
    "S7s": {
      "type": "structure",
      "required": [
        "Enabled",
        "AttributeName"
      ],
      "members": {
        "Enabled": {
          "type": "boolean"
        },
        "AttributeName": {}
      }
    }
  }
}
},{}],12:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"dup":9}],13:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],14:[function(require,module,exports){
module.exports={
  "acm": {
    "name": "ACM",
    "cors": true
  },
  "apigateway": {
    "name": "APIGateway",
    "cors": true
  },
  "applicationautoscaling": {
    "prefix": "application-autoscaling",
    "name": "ApplicationAutoScaling",
    "cors": true
  },
  "appstream": {
    "name": "AppStream"
  },
  "autoscaling": {
    "name": "AutoScaling",
    "cors": true
  },
  "batch": {
    "name": "Batch"
  },
  "budgets": {
    "name": "Budgets"
  },
  "clouddirectory": {
    "name": "CloudDirectory",
    "versions": [
      "2016-05-10*"
    ]
  },
  "cloudformation": {
    "name": "CloudFormation",
    "cors": true
  },
  "cloudfront": {
    "name": "CloudFront",
    "versions": [
      "2013-05-12*",
      "2013-11-11*",
      "2014-05-31*",
      "2014-10-21*",
      "2014-11-06*",
      "2015-04-17*",
      "2015-07-27*",
      "2015-09-17*",
      "2016-01-13*",
      "2016-01-28*",
      "2016-08-01*",
      "2016-08-20*",
      "2016-09-07*",
      "2016-09-29*",
      "2016-11-25*",
      "2017-03-25*",
      "2017-10-30*",
      "2018-06-18*"
    ],
    "cors": true
  },
  "cloudhsm": {
    "name": "CloudHSM",
    "cors": true
  },
  "cloudsearch": {
    "name": "CloudSearch"
  },
  "cloudsearchdomain": {
    "name": "CloudSearchDomain"
  },
  "cloudtrail": {
    "name": "CloudTrail",
    "cors": true
  },
  "cloudwatch": {
    "prefix": "monitoring",
    "name": "CloudWatch",
    "cors": true
  },
  "cloudwatchevents": {
    "prefix": "events",
    "name": "CloudWatchEvents",
    "versions": [
      "2014-02-03*"
    ],
    "cors": true
  },
  "cloudwatchlogs": {
    "prefix": "logs",
    "name": "CloudWatchLogs",
    "cors": true
  },
  "codebuild": {
    "name": "CodeBuild",
    "cors": true
  },
  "codecommit": {
    "name": "CodeCommit",
    "cors": true
  },
  "codedeploy": {
    "name": "CodeDeploy",
    "cors": true
  },
  "codepipeline": {
    "name": "CodePipeline",
    "cors": true
  },
  "cognitoidentity": {
    "prefix": "cognito-identity",
    "name": "CognitoIdentity",
    "cors": true
  },
  "cognitoidentityserviceprovider": {
    "prefix": "cognito-idp",
    "name": "CognitoIdentityServiceProvider",
    "cors": true
  },
  "cognitosync": {
    "prefix": "cognito-sync",
    "name": "CognitoSync",
    "cors": true
  },
  "configservice": {
    "prefix": "config",
    "name": "ConfigService",
    "cors": true
  },
  "cur": {
    "name": "CUR",
    "cors": true
  },
  "datapipeline": {
    "name": "DataPipeline"
  },
  "devicefarm": {
    "name": "DeviceFarm",
    "cors": true
  },
  "directconnect": {
    "name": "DirectConnect",
    "cors": true
  },
  "directoryservice": {
    "prefix": "ds",
    "name": "DirectoryService"
  },
  "discovery": {
    "name": "Discovery"
  },
  "dms": {
    "name": "DMS"
  },
  "dynamodb": {
    "name": "DynamoDB",
    "cors": true
  },
  "dynamodbstreams": {
    "prefix": "streams.dynamodb",
    "name": "DynamoDBStreams",
    "cors": true
  },
  "ec2": {
    "name": "EC2",
    "versions": [
      "2013-06-15*",
      "2013-10-15*",
      "2014-02-01*",
      "2014-05-01*",
      "2014-06-15*",
      "2014-09-01*",
      "2014-10-01*",
      "2015-03-01*",
      "2015-04-15*",
      "2015-10-01*",
      "2016-04-01*",
      "2016-09-15*"
    ],
    "cors": true
  },
  "ecr": {
    "name": "ECR",
    "cors": true
  },
  "ecs": {
    "name": "ECS",
    "cors": true
  },
  "efs": {
    "prefix": "elasticfilesystem",
    "name": "EFS",
    "cors": true
  },
  "elasticache": {
    "name": "ElastiCache",
    "versions": [
      "2012-11-15*",
      "2014-03-24*",
      "2014-07-15*",
      "2014-09-30*"
    ],
    "cors": true
  },
  "elasticbeanstalk": {
    "name": "ElasticBeanstalk",
    "cors": true
  },
  "elb": {
    "prefix": "elasticloadbalancing",
    "name": "ELB",
    "cors": true
  },
  "elbv2": {
    "prefix": "elasticloadbalancingv2",
    "name": "ELBv2",
    "cors": true
  },
  "emr": {
    "prefix": "elasticmapreduce",
    "name": "EMR",
    "cors": true
  },
  "es": {
    "name": "ES"
  },
  "elastictranscoder": {
    "name": "ElasticTranscoder",
    "cors": true
  },
  "firehose": {
    "name": "Firehose",
    "cors": true
  },
  "gamelift": {
    "name": "GameLift",
    "cors": true
  },
  "glacier": {
    "name": "Glacier"
  },
  "health": {
    "name": "Health"
  },
  "iam": {
    "name": "IAM",
    "cors": true
  },
  "importexport": {
    "name": "ImportExport"
  },
  "inspector": {
    "name": "Inspector",
    "versions": [
      "2015-08-18*"
    ],
    "cors": true
  },
  "iot": {
    "name": "Iot",
    "cors": true
  },
  "iotdata": {
    "prefix": "iot-data",
    "name": "IotData",
    "cors": true
  },
  "kinesis": {
    "name": "Kinesis",
    "cors": true
  },
  "kinesisanalytics": {
    "name": "KinesisAnalytics"
  },
  "kms": {
    "name": "KMS",
    "cors": true
  },
  "lambda": {
    "name": "Lambda",
    "cors": true
  },
  "lexruntime": {
    "prefix": "runtime.lex",
    "name": "LexRuntime",
    "cors": true
  },
  "lightsail": {
    "name": "Lightsail"
  },
  "machinelearning": {
    "name": "MachineLearning",
    "cors": true
  },
  "marketplacecommerceanalytics": {
    "name": "MarketplaceCommerceAnalytics",
    "cors": true
  },
  "marketplacemetering": {
    "prefix": "meteringmarketplace",
    "name": "MarketplaceMetering"
  },
  "mturk": {
    "prefix": "mturk-requester",
    "name": "MTurk",
    "cors": true
  },
  "mobileanalytics": {
    "name": "MobileAnalytics",
    "cors": true
  },
  "opsworks": {
    "name": "OpsWorks",
    "cors": true
  },
  "opsworkscm": {
    "name": "OpsWorksCM"
  },
  "organizations": {
    "name": "Organizations"
  },
  "pinpoint": {
    "name": "Pinpoint"
  },
  "polly": {
    "name": "Polly",
    "cors": true
  },
  "rds": {
    "name": "RDS",
    "versions": [
      "2014-09-01*"
    ],
    "cors": true
  },
  "redshift": {
    "name": "Redshift",
    "cors": true
  },
  "rekognition": {
    "name": "Rekognition",
    "cors": true
  },
  "resourcegroupstaggingapi": {
    "name": "ResourceGroupsTaggingAPI"
  },
  "route53": {
    "name": "Route53",
    "cors": true
  },
  "route53domains": {
    "name": "Route53Domains",
    "cors": true
  },
  "s3": {
    "name": "S3",
    "dualstackAvailable": true,
    "cors": true
  },
  "s3control": {
    "name": "S3Control",
    "dualstackAvailable": true
  },
  "servicecatalog": {
    "name": "ServiceCatalog",
    "cors": true
  },
  "ses": {
    "prefix": "email",
    "name": "SES",
    "cors": true
  },
  "shield": {
    "name": "Shield"
  },
  "simpledb": {
    "prefix": "sdb",
    "name": "SimpleDB"
  },
  "sms": {
    "name": "SMS"
  },
  "snowball": {
    "name": "Snowball"
  },
  "sns": {
    "name": "SNS",
    "cors": true
  },
  "sqs": {
    "name": "SQS",
    "cors": true
  },
  "ssm": {
    "name": "SSM",
    "cors": true
  },
  "storagegateway": {
    "name": "StorageGateway",
    "cors": true
  },
  "stepfunctions": {
    "prefix": "states",
    "name": "StepFunctions"
  },
  "sts": {
    "name": "STS",
    "cors": true
  },
  "support": {
    "name": "Support"
  },
  "swf": {
    "name": "SWF"
  },
  "xray": {
    "name": "XRay"
  },
  "waf": {
    "name": "WAF",
    "cors": true
  },
  "wafregional": {
    "prefix": "waf-regional",
    "name": "WAFRegional"
  },
  "workdocs": {
    "name": "WorkDocs",
    "cors": true
  },
  "workspaces": {
    "name": "WorkSpaces"
  },
  "codestar": {
    "name": "CodeStar"
  },
  "lexmodelbuildingservice": {
    "prefix": "lex-models",
    "name": "LexModelBuildingService",
    "cors": true
  },
  "marketplaceentitlementservice": {
    "prefix": "entitlement.marketplace",
    "name": "MarketplaceEntitlementService"
  },
  "athena": {
    "name": "Athena"
  },
  "greengrass": {
    "name": "Greengrass"
  },
  "dax": {
    "name": "DAX"
  },
  "migrationhub": {
    "prefix": "AWSMigrationHub",
    "name": "MigrationHub"
  },
  "cloudhsmv2": {
    "name": "CloudHSMV2"
  },
  "glue": {
    "name": "Glue"
  },
  "mobile": {
    "name": "Mobile"
  },
  "pricing": {
    "name": "Pricing",
    "cors": true
  },
  "costexplorer": {
    "prefix": "ce",
    "name": "CostExplorer"
  },
  "mediaconvert": {
    "name": "MediaConvert"
  },
  "medialive": {
    "name": "MediaLive"
  },
  "mediapackage": {
    "name": "MediaPackage"
  },
  "mediastore": {
    "name": "MediaStore"
  },
  "mediastoredata": {
    "prefix": "mediastore-data",
    "name": "MediaStoreData",
    "cors": true
  },
  "appsync": {
    "name": "AppSync"
  },
  "guardduty": {
    "name": "GuardDuty"
  },
  "mq": {
    "name": "MQ"
  },
  "comprehend": {
    "name": "Comprehend",
    "cors": true
  },
  "iotjobsdataplane": {
    "prefix": "iot-jobs-data",
    "name": "IoTJobsDataPlane"
  },
  "kinesisvideoarchivedmedia": {
    "prefix": "kinesis-video-archived-media",
    "name": "KinesisVideoArchivedMedia",
    "cors": true
  },
  "kinesisvideomedia": {
    "prefix": "kinesis-video-media",
    "name": "KinesisVideoMedia",
    "cors": true
  },
  "kinesisvideo": {
    "name": "KinesisVideo",
    "cors": true
  },
  "sagemakerruntime": {
    "prefix": "runtime.sagemaker",
    "name": "SageMakerRuntime"
  },
  "sagemaker": {
    "name": "SageMaker"
  },
  "translate": {
    "name": "Translate",
    "cors": true
  },
  "resourcegroups": {
    "prefix": "resource-groups",
    "name": "ResourceGroups",
    "cors": true
  },
  "alexaforbusiness": {
    "name": "AlexaForBusiness"
  },
  "cloud9": {
    "name": "Cloud9"
  },
  "serverlessapplicationrepository": {
    "prefix": "serverlessrepo",
    "name": "ServerlessApplicationRepository"
  },
  "servicediscovery": {
    "name": "ServiceDiscovery"
  },
  "workmail": {
    "name": "WorkMail"
  },
  "autoscalingplans": {
    "prefix": "autoscaling-plans",
    "name": "AutoScalingPlans"
  },
  "transcribeservice": {
    "prefix": "transcribe",
    "name": "TranscribeService"
  },
  "connect": {
    "name": "Connect"
  },
  "acmpca": {
    "prefix": "acm-pca",
    "name": "ACMPCA"
  },
  "fms": {
    "name": "FMS"
  },
  "secretsmanager": {
    "name": "SecretsManager",
    "cors": true
  },
  "iotanalytics": {
    "name": "IoTAnalytics"
  },
  "iot1clickdevicesservice": {
    "prefix": "iot1click-devices",
    "name": "IoT1ClickDevicesService"
  },
  "iot1clickprojects": {
    "prefix": "iot1click-projects",
    "name": "IoT1ClickProjects"
  },
  "pi": {
    "name": "PI"
  },
  "neptune": {
    "name": "Neptune"
  },
  "mediatailor": {
    "name": "MediaTailor"
  },
  "eks": {
    "name": "EKS"
  },
  "macie": {
    "name": "Macie"
  },
  "dlm": {
    "name": "DLM"
  },
  "signer": {
    "name": "Signer"
  },
  "chime": {
    "name": "Chime"
  },
  "pinpointemail": {
    "prefix": "pinpoint-email",
    "name": "PinpointEmail"
  },
  "ram": {
    "name": "RAM"
  },
  "route53resolver": {
    "name": "Route53Resolver"
  },
  "pinpointsmsvoice": {
    "prefix": "sms-voice",
    "name": "PinpointSMSVoice"
  },
  "quicksight": {
    "name": "QuickSight"
  },
  "rdsdataservice": {
    "prefix": "rds-data",
    "name": "RDSDataService"
  },
  "amplify": {
    "name": "Amplify"
  },
  "datasync": {
    "name": "DataSync"
  },
  "robomaker": {
    "name": "RoboMaker"
  },
  "transfer": {
    "name": "Transfer"
  },
  "globalaccelerator": {
    "name": "GlobalAccelerator"
  },
  "comprehendmedical": {
    "name": "ComprehendMedical",
    "cors": true
  },
  "kinesisanalyticsv2": {
    "name": "KinesisAnalyticsV2"
  },
  "mediaconnect": {
    "name": "MediaConnect"
  },
  "fsx": {
    "name": "FSx"
  },
  "securityhub": {
    "name": "SecurityHub"
  },
  "appmesh": {
    "name": "AppMesh",
    "versions": [
      "2018-10-01*"
    ]
  },
  "licensemanager": {
    "prefix": "license-manager",
    "name": "LicenseManager"
  },
  "kafka": {
    "name": "Kafka"
  },
  "apigatewaymanagementapi": {
    "name": "ApiGatewayManagementApi"
  },
  "apigatewayv2": {
    "name": "ApiGatewayV2"
  },
  "docdb": {
    "name": "DocDB"
  },
  "backup": {
    "name": "Backup"
  },
  "worklink": {
    "name": "WorkLink"
  },
  "textract": {
    "name": "Textract"
  }
}
},{}],15:[function(require,module,exports){
module.exports={
  "version": "2.0",
  "metadata": {
    "apiVersion": "2011-06-15",
    "endpointPrefix": "sts",
    "globalEndpoint": "sts.amazonaws.com",
    "protocol": "query",
    "serviceAbbreviation": "AWS STS",
    "serviceFullName": "AWS Security Token Service",
    "serviceId": "STS",
    "signatureVersion": "v4",
    "uid": "sts-2011-06-15",
    "xmlNamespace": "https://sts.amazonaws.com/doc/2011-06-15/"
  },
  "operations": {
    "AssumeRole": {
      "input": {
        "type": "structure",
        "required": [
          "RoleArn",
          "RoleSessionName"
        ],
        "members": {
          "RoleArn": {},
          "RoleSessionName": {},
          "Policy": {},
          "DurationSeconds": {
            "type": "integer"
          },
          "ExternalId": {},
          "SerialNumber": {},
          "TokenCode": {}
        }
      },
      "output": {
        "resultWrapper": "AssumeRoleResult",
        "type": "structure",
        "members": {
          "Credentials": {
            "shape": "Sa"
          },
          "AssumedRoleUser": {
            "shape": "Sf"
          },
          "PackedPolicySize": {
            "type": "integer"
          }
        }
      }
    },
    "AssumeRoleWithSAML": {
      "input": {
        "type": "structure",
        "required": [
          "RoleArn",
          "PrincipalArn",
          "SAMLAssertion"
        ],
        "members": {
          "RoleArn": {},
          "PrincipalArn": {},
          "SAMLAssertion": {},
          "Policy": {},
          "DurationSeconds": {
            "type": "integer"
          }
        }
      },
      "output": {
        "resultWrapper": "AssumeRoleWithSAMLResult",
        "type": "structure",
        "members": {
          "Credentials": {
            "shape": "Sa"
          },
          "AssumedRoleUser": {
            "shape": "Sf"
          },
          "PackedPolicySize": {
            "type": "integer"
          },
          "Subject": {},
          "SubjectType": {},
          "Issuer": {},
          "Audience": {},
          "NameQualifier": {}
        }
      }
    },
    "AssumeRoleWithWebIdentity": {
      "input": {
        "type": "structure",
        "required": [
          "RoleArn",
          "RoleSessionName",
          "WebIdentityToken"
        ],
        "members": {
          "RoleArn": {},
          "RoleSessionName": {},
          "WebIdentityToken": {},
          "ProviderId": {},
          "Policy": {},
          "DurationSeconds": {
            "type": "integer"
          }
        }
      },
      "output": {
        "resultWrapper": "AssumeRoleWithWebIdentityResult",
        "type": "structure",
        "members": {
          "Credentials": {
            "shape": "Sa"
          },
          "SubjectFromWebIdentityToken": {},
          "AssumedRoleUser": {
            "shape": "Sf"
          },
          "PackedPolicySize": {
            "type": "integer"
          },
          "Provider": {},
          "Audience": {}
        }
      }
    },
    "DecodeAuthorizationMessage": {
      "input": {
        "type": "structure",
        "required": [
          "EncodedMessage"
        ],
        "members": {
          "EncodedMessage": {}
        }
      },
      "output": {
        "resultWrapper": "DecodeAuthorizationMessageResult",
        "type": "structure",
        "members": {
          "DecodedMessage": {}
        }
      }
    },
    "GetCallerIdentity": {
      "input": {
        "type": "structure",
        "members": {}
      },
      "output": {
        "resultWrapper": "GetCallerIdentityResult",
        "type": "structure",
        "members": {
          "UserId": {},
          "Account": {},
          "Arn": {}
        }
      }
    },
    "GetFederationToken": {
      "input": {
        "type": "structure",
        "required": [
          "Name"
        ],
        "members": {
          "Name": {},
          "Policy": {},
          "DurationSeconds": {
            "type": "integer"
          }
        }
      },
      "output": {
        "resultWrapper": "GetFederationTokenResult",
        "type": "structure",
        "members": {
          "Credentials": {
            "shape": "Sa"
          },
          "FederatedUser": {
            "type": "structure",
            "required": [
              "FederatedUserId",
              "Arn"
            ],
            "members": {
              "FederatedUserId": {},
              "Arn": {}
            }
          },
          "PackedPolicySize": {
            "type": "integer"
          }
        }
      }
    },
    "GetSessionToken": {
      "input": {
        "type": "structure",
        "members": {
          "DurationSeconds": {
            "type": "integer"
          },
          "SerialNumber": {},
          "TokenCode": {}
        }
      },
      "output": {
        "resultWrapper": "GetSessionTokenResult",
        "type": "structure",
        "members": {
          "Credentials": {
            "shape": "Sa"
          }
        }
      }
    }
  },
  "shapes": {
    "Sa": {
      "type": "structure",
      "required": [
        "AccessKeyId",
        "SecretAccessKey",
        "SessionToken",
        "Expiration"
      ],
      "members": {
        "AccessKeyId": {},
        "SecretAccessKey": {},
        "SessionToken": {},
        "Expiration": {
          "type": "timestamp"
        }
      }
    },
    "Sf": {
      "type": "structure",
      "required": [
        "AssumedRoleId",
        "Arn"
      ],
      "members": {
        "AssumedRoleId": {},
        "Arn": {}
      }
    }
  }
}
},{}],16:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],17:[function(require,module,exports){
require('../lib/node_loader');
var AWS = require('../lib/core');
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cognitoidentity'] = {};
AWS.CognitoIdentity = Service.defineService('cognitoidentity', ['2014-06-30']);
require('../lib/services/cognitoidentity');
Object.defineProperty(apiLoader.services['cognitoidentity'], '2014-06-30', {
  get: function get() {
    var model = require('../apis/cognito-identity-2014-06-30.min.json');
    model.paginators = require('../apis/cognito-identity-2014-06-30.paginators.json').pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CognitoIdentity;

},{"../apis/cognito-identity-2014-06-30.min.json":6,"../apis/cognito-identity-2014-06-30.paginators.json":7,"../lib/core":29,"../lib/node_loader":27,"../lib/services/cognitoidentity":78}],18:[function(require,module,exports){
require('../lib/node_loader');
var AWS = require('../lib/core');
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['dynamodb'] = {};
AWS.DynamoDB = Service.defineService('dynamodb', ['2011-12-05', '2012-08-10']);
require('../lib/services/dynamodb');
Object.defineProperty(apiLoader.services['dynamodb'], '2011-12-05', {
  get: function get() {
    var model = require('../apis/dynamodb-2011-12-05.min.json');
    model.paginators = require('../apis/dynamodb-2011-12-05.paginators.json').pagination;
    model.waiters = require('../apis/dynamodb-2011-12-05.waiters2.json').waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['dynamodb'], '2012-08-10', {
  get: function get() {
    var model = require('../apis/dynamodb-2012-08-10.min.json');
    model.paginators = require('../apis/dynamodb-2012-08-10.paginators.json').pagination;
    model.waiters = require('../apis/dynamodb-2012-08-10.waiters2.json').waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DynamoDB;

},{"../apis/dynamodb-2011-12-05.min.json":8,"../apis/dynamodb-2011-12-05.paginators.json":9,"../apis/dynamodb-2011-12-05.waiters2.json":10,"../apis/dynamodb-2012-08-10.min.json":11,"../apis/dynamodb-2012-08-10.paginators.json":12,"../apis/dynamodb-2012-08-10.waiters2.json":13,"../lib/core":29,"../lib/node_loader":27,"../lib/services/dynamodb":79}],19:[function(require,module,exports){
require('../lib/node_loader');
var AWS = require('../lib/core');
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['sts'] = {};
AWS.STS = Service.defineService('sts', ['2011-06-15']);
require('../lib/services/sts');
Object.defineProperty(apiLoader.services['sts'], '2011-06-15', {
  get: function get() {
    var model = require('../apis/sts-2011-06-15.min.json');
    model.paginators = require('../apis/sts-2011-06-15.paginators.json').pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.STS;

},{"../apis/sts-2011-06-15.min.json":15,"../apis/sts-2011-06-15.paginators.json":16,"../lib/core":29,"../lib/node_loader":27,"../lib/services/sts":80}],20:[function(require,module,exports){
function apiLoader(svc, version) {
  if (!apiLoader.services.hasOwnProperty(svc)) {
    throw new Error('InvalidService: Failed to load api for ' + svc);
  }
  return apiLoader.services[svc][version];
}

/**
 * @api private
 *
 * This member of AWS.apiLoader is private, but changing it will necessitate a
 * change to ../scripts/services-table-generator.ts
 */
apiLoader.services = {};

/**
 * @api private
 */
module.exports = apiLoader;

},{}],21:[function(require,module,exports){
var Hmac = require('./browserHmac');
var Md5 = require('./browserMd5');
var Sha1 = require('./browserSha1');
var Sha256 = require('./browserSha256');

/**
 * @api private
 */
module.exports = exports = {
    createHash: function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === 'md5') {
        return new Md5();
      } else if (alg === 'sha256') {
        return new Sha256();
      } else if (alg === 'sha1') {
        return new Sha1();
      }

      throw new Error('Hash algorithm ' + alg + ' is not supported in the browser SDK');
    },
    createHmac: function createHmac(alg, key) {
      alg = alg.toLowerCase();
      if (alg === 'md5') {
        return new Hmac(Md5, key);
      } else if (alg === 'sha256') {
        return new Hmac(Sha256, key);
      } else if (alg === 'sha1') {
        return new Hmac(Sha1, key);
      }

      throw new Error('HMAC algorithm ' + alg + ' is not supported in the browser SDK');
    },
    createSign: function() {
      throw new Error('createSign is not implemented in the browser');
    }
  };

},{"./browserHmac":23,"./browserMd5":24,"./browserSha1":25,"./browserSha256":26}],22:[function(require,module,exports){
var Buffer = require('buffer/').Buffer;

/**
 * This is a polyfill for the static method `isView` of `ArrayBuffer`, which is
 * e.g. missing in IE 10.
 *
 * @api private
 */
if (
    typeof ArrayBuffer !== 'undefined' &&
    typeof ArrayBuffer.isView === 'undefined'
) {
    ArrayBuffer.isView = function(arg) {
        return viewStrings.indexOf(Object.prototype.toString.call(arg)) > -1;
    };
}

/**
 * @api private
 */
var viewStrings = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]',
    '[object DataView]',
];

/**
 * @api private
 */
function isEmptyData(data) {
    if (typeof data === 'string') {
        return data.length === 0;
    }
    return data.byteLength === 0;
}

/**
 * @api private
 */
function convertToBuffer(data) {
    if (typeof data === 'string') {
        data = new Buffer(data, 'utf8');
    }

    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }

    return new Uint8Array(data);
}

/**
 * @api private
 */
module.exports = exports = {
    isEmptyData: isEmptyData,
    convertToBuffer: convertToBuffer,
};

},{"buffer/":103}],23:[function(require,module,exports){
var hashUtils = require('./browserHashUtils');

/**
 * @api private
 */
function Hmac(hashCtor, secret) {
    this.hash = new hashCtor();
    this.outer = new hashCtor();

    var inner = bufferFromSecret(hashCtor, secret);
    var outer = new Uint8Array(hashCtor.BLOCK_SIZE);
    outer.set(inner);

    for (var i = 0; i < hashCtor.BLOCK_SIZE; i++) {
        inner[i] ^= 0x36;
        outer[i] ^= 0x5c;
    }

    this.hash.update(inner);
    this.outer.update(outer);

    // Zero out the copied key buffer.
    for (var i = 0; i < inner.byteLength; i++) {
        inner[i] = 0;
    }
}

/**
 * @api private
 */
module.exports = exports = Hmac;

Hmac.prototype.update = function (toHash) {
    if (hashUtils.isEmptyData(toHash) || this.error) {
        return this;
    }

    try {
        this.hash.update(hashUtils.convertToBuffer(toHash));
    } catch (e) {
        this.error = e;
    }

    return this;
};

Hmac.prototype.digest = function (encoding) {
    if (!this.outer.finished) {
        this.outer.update(this.hash.digest());
    }

    return this.outer.digest(encoding);
};

function bufferFromSecret(hashCtor, secret) {
    var input = hashUtils.convertToBuffer(secret);
    if (input.byteLength > hashCtor.BLOCK_SIZE) {
        var bufferHash = new hashCtor;
        bufferHash.update(input);
        input = bufferHash.digest();
    }
    var buffer = new Uint8Array(hashCtor.BLOCK_SIZE);
    buffer.set(input);
    return buffer;
}

},{"./browserHashUtils":22}],24:[function(require,module,exports){
var hashUtils = require('./browserHashUtils');
var Buffer = require('buffer/').Buffer;

var BLOCK_SIZE = 64;

var DIGEST_LENGTH = 16;

var INIT = [
    0x67452301,
    0xefcdab89,
    0x98badcfe,
    0x10325476,
];

/**
 * @api private
 */
function Md5() {
    this.state = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
    ];
    this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE));
    this.bufferLength = 0;
    this.bytesHashed = 0;
    this.finished = false;
}

/**
 * @api private
 */
module.exports = exports = Md5;

Md5.BLOCK_SIZE = BLOCK_SIZE;

Md5.prototype.update = function (sourceData) {
    if (hashUtils.isEmptyData(sourceData)) {
        return this;
    } else if (this.finished) {
        throw new Error('Attempted to update an already finished hash.');
    }

    var data = hashUtils.convertToBuffer(sourceData);
    var position = 0;
    var byteLength = data.byteLength;
    this.bytesHashed += byteLength;
    while (byteLength > 0) {
        this.buffer.setUint8(this.bufferLength++, data[position++]);
        byteLength--;
        if (this.bufferLength === BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
        }
    }

    return this;
};

Md5.prototype.digest = function (encoding) {
    if (!this.finished) {
        var _a = this, buffer = _a.buffer, undecoratedLength = _a.bufferLength, bytesHashed = _a.bytesHashed;
        var bitsHashed = bytesHashed * 8;
        buffer.setUint8(this.bufferLength++, 128);
        // Ensure the final block has enough room for the hashed length
        if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
                buffer.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
        }
        for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
            buffer.setUint8(i, 0);
        }
        buffer.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);
        buffer.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 0x100000000), true);
        this.hashBuffer();
        this.finished = true;
    }
    var out = new DataView(new ArrayBuffer(DIGEST_LENGTH));
    for (var i = 0; i < 4; i++) {
        out.setUint32(i * 4, this.state[i], true);
    }
    var buff = new Buffer(out.buffer, out.byteOffset, out.byteLength);
    return encoding ? buff.toString(encoding) : buff;
};

Md5.prototype.hashBuffer = function () {
    var _a = this, buffer = _a.buffer, state = _a.state;
    var a = state[0], b = state[1], c = state[2], d = state[3];
    a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);
    d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);
    c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);
    b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);
    a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);
    d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);
    c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);
    b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);
    a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);
    d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);
    c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);
    b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);
    a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);
    d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);
    c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);
    b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);
    a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);
    d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);
    c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);
    b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);
    a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);
    d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);
    c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);
    b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);
    a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);
    d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);
    c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);
    b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);
    a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);
    d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);
    c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);
    b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);
    a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);
    d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);
    c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);
    b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);
    a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);
    d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);
    c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);
    b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);
    a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);
    d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);
    c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);
    b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);
    a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);
    d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);
    c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);
    b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);
    a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);
    d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);
    c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);
    b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);
    a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);
    d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);
    c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);
    b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);
    a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);
    d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);
    c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);
    b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);
    a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);
    d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);
    c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);
    b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);
    state[0] = (a + state[0]) & 0xFFFFFFFF;
    state[1] = (b + state[1]) & 0xFFFFFFFF;
    state[2] = (c + state[2]) & 0xFFFFFFFF;
    state[3] = (d + state[3]) & 0xFFFFFFFF;
};

function cmn(q, a, b, x, s, t) {
    a = (((a + q) & 0xFFFFFFFF) + ((x + t) & 0xFFFFFFFF)) & 0xFFFFFFFF;
    return (((a << s) | (a >>> (32 - s))) + b) & 0xFFFFFFFF;
}

function ff(a, b, c, d, x, s, t) {
    return cmn((b & c) | ((~b) & d), a, b, x, s, t);
}

function gg(a, b, c, d, x, s, t) {
    return cmn((b & d) | (c & (~d)), a, b, x, s, t);
}

function hh(a, b, c, d, x, s, t) {
    return cmn(b ^ c ^ d, a, b, x, s, t);
}

function ii(a, b, c, d, x, s, t) {
    return cmn(c ^ (b | (~d)), a, b, x, s, t);
}

},{"./browserHashUtils":22,"buffer/":103}],25:[function(require,module,exports){
var Buffer = require('buffer/').Buffer;
var hashUtils = require('./browserHashUtils');

var BLOCK_SIZE = 64;

var DIGEST_LENGTH = 20;

var KEY = new Uint32Array([
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc | 0,
    0xca62c1d6 | 0
]);

var INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19,
];

var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

/**
 * @api private
 */
function Sha1() {
    this.h0 = 0x67452301;
    this.h1 = 0xEFCDAB89;
    this.h2 = 0x98BADCFE;
    this.h3 = 0x10325476;
    this.h4 = 0xC3D2E1F0;
    // The first 64 bytes (16 words) is the data chunk
    this.block = new Uint32Array(80);
    this.offset = 0;
    this.shift = 24;
    this.totalLength = 0;
}

/**
 * @api private
 */
module.exports = exports = Sha1;

Sha1.BLOCK_SIZE = BLOCK_SIZE;

Sha1.prototype.update = function (data) {
    if (this.finished) {
        throw new Error('Attempted to update an already finished hash.');
    }

    if (hashUtils.isEmptyData(data)) {
        return this;
    }

    data = hashUtils.convertToBuffer(data);

    var length = data.length;
    this.totalLength += length * 8;
    for (var i = 0; i < length; i++) {
        this.write(data[i]);
    }

    return this;
};

Sha1.prototype.write = function write(byte) {
    this.block[this.offset] |= (byte & 0xff) << this.shift;
    if (this.shift) {
        this.shift -= 8;
    } else {
        this.offset++;
        this.shift = 24;
    }

    if (this.offset === 16) this.processBlock();
};

Sha1.prototype.digest = function (encoding) {
    // Pad
    this.write(0x80);
    if (this.offset > 14 || (this.offset === 14 && this.shift < 24)) {
      this.processBlock();
    }
    this.offset = 14;
    this.shift = 24;

    // 64-bit length big-endian
    this.write(0x00); // numbers this big aren't accurate in javascript anyway
    this.write(0x00); // ..So just hard-code to zero.
    this.write(this.totalLength > 0xffffffffff ? this.totalLength / 0x10000000000 : 0x00);
    this.write(this.totalLength > 0xffffffff ? this.totalLength / 0x100000000 : 0x00);
    for (var s = 24; s >= 0; s -= 8) {
        this.write(this.totalLength >> s);
    }
    // The value in state is little-endian rather than big-endian, so flip
    // each word into a new Uint8Array
    var out = new Buffer(DIGEST_LENGTH);
    var outView = new DataView(out.buffer);
    outView.setUint32(0, this.h0, false);
    outView.setUint32(4, this.h1, false);
    outView.setUint32(8, this.h2, false);
    outView.setUint32(12, this.h3, false);
    outView.setUint32(16, this.h4, false);

    return encoding ? out.toString(encoding) : out;
};

Sha1.prototype.processBlock = function processBlock() {
    // Extend the sixteen 32-bit words into eighty 32-bit words:
    for (var i = 16; i < 80; i++) {
      var w = this.block[i - 3] ^ this.block[i - 8] ^ this.block[i - 14] ^ this.block[i - 16];
      this.block[i] = (w << 1) | (w >>> 31);
    }

    // Initialize hash value for this chunk:
    var a = this.h0;
    var b = this.h1;
    var c = this.h2;
    var d = this.h3;
    var e = this.h4;
    var f, k;

    // Main loop:
    for (i = 0; i < 80; i++) {
      if (i < 20) {
        f = d ^ (b & (c ^ d));
        k = 0x5A827999;
      }
      else if (i < 40) {
        f = b ^ c ^ d;
        k = 0x6ED9EBA1;
      }
      else if (i < 60) {
        f = (b & c) | (d & (b | c));
        k = 0x8F1BBCDC;
      }
      else {
        f = b ^ c ^ d;
        k = 0xCA62C1D6;
      }
      var temp = (a << 5 | a >>> 27) + f + e + k + (this.block[i]|0);
      e = d;
      d = c;
      c = (b << 30 | b >>> 2);
      b = a;
      a = temp;
    }

    // Add this chunk's hash to result so far:
    this.h0 = (this.h0 + a) | 0;
    this.h1 = (this.h1 + b) | 0;
    this.h2 = (this.h2 + c) | 0;
    this.h3 = (this.h3 + d) | 0;
    this.h4 = (this.h4 + e) | 0;

    // The block is now reusable.
    this.offset = 0;
    for (i = 0; i < 16; i++) {
        this.block[i] = 0;
    }
};

},{"./browserHashUtils":22,"buffer/":103}],26:[function(require,module,exports){
var Buffer = require('buffer/').Buffer;
var hashUtils = require('./browserHashUtils');

var BLOCK_SIZE = 64;

var DIGEST_LENGTH = 32;

var KEY = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);

var INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19,
];

var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

/**
 * @private
 */
function Sha256() {
    this.state = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19,
    ];
    this.temp = new Int32Array(64);
    this.buffer = new Uint8Array(64);
    this.bufferLength = 0;
    this.bytesHashed = 0;
    /**
     * @private
     */
    this.finished = false;
}

/**
 * @api private
 */
module.exports = exports = Sha256;

Sha256.BLOCK_SIZE = BLOCK_SIZE;

Sha256.prototype.update = function (data) {
    if (this.finished) {
        throw new Error('Attempted to update an already finished hash.');
    }

    if (hashUtils.isEmptyData(data)) {
        return this;
    }

    data = hashUtils.convertToBuffer(data);

    var position = 0;
    var byteLength = data.byteLength;
    this.bytesHashed += byteLength;
    if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {
        throw new Error('Cannot hash more than 2^53 - 1 bits');
    }

    while (byteLength > 0) {
        this.buffer[this.bufferLength++] = data[position++];
        byteLength--;
        if (this.bufferLength === BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
        }
    }

    return this;
};

Sha256.prototype.digest = function (encoding) {
    if (!this.finished) {
        var bitsHashed = this.bytesHashed * 8;
        var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
        var undecoratedLength = this.bufferLength;
        bufferView.setUint8(this.bufferLength++, 0x80);
        // Ensure the final block has enough room for the hashed length
        if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
                bufferView.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
        }
        for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
            bufferView.setUint8(i, 0);
        }
        bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
        bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);
        this.hashBuffer();
        this.finished = true;
    }
    // The value in state is little-endian rather than big-endian, so flip
    // each word into a new Uint8Array
    var out = new Buffer(DIGEST_LENGTH);
    for (var i = 0; i < 8; i++) {
        out[i * 4] = (this.state[i] >>> 24) & 0xff;
        out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
        out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
        out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
    }
    return encoding ? out.toString(encoding) : out;
};

Sha256.prototype.hashBuffer = function () {
    var _a = this,
        buffer = _a.buffer,
        state = _a.state;
    var state0 = state[0],
        state1 = state[1],
        state2 = state[2],
        state3 = state[3],
        state4 = state[4],
        state5 = state[5],
        state6 = state[6],
        state7 = state[7];
    for (var i = 0; i < BLOCK_SIZE; i++) {
        if (i < 16) {
            this.temp[i] = (((buffer[i * 4] & 0xff) << 24) |
                ((buffer[(i * 4) + 1] & 0xff) << 16) |
                ((buffer[(i * 4) + 2] & 0xff) << 8) |
                (buffer[(i * 4) + 3] & 0xff));
        }
        else {
            var u = this.temp[i - 2];
            var t1_1 = (u >>> 17 | u << 15) ^
                (u >>> 19 | u << 13) ^
                (u >>> 10);
            u = this.temp[i - 15];
            var t2_1 = (u >>> 7 | u << 25) ^
                (u >>> 18 | u << 14) ^
                (u >>> 3);
            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) +
                (t2_1 + this.temp[i - 16] | 0);
        }
        var t1 = (((((state4 >>> 6 | state4 << 26) ^
            (state4 >>> 11 | state4 << 21) ^
            (state4 >>> 25 | state4 << 7))
            + ((state4 & state5) ^ (~state4 & state6))) | 0)
            + ((state7 + ((KEY[i] + this.temp[i]) | 0)) | 0)) | 0;
        var t2 = (((state0 >>> 2 | state0 << 30) ^
            (state0 >>> 13 | state0 << 19) ^
            (state0 >>> 22 | state0 << 10)) + ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) | 0;
        state7 = state6;
        state6 = state5;
        state5 = state4;
        state4 = (state3 + t1) | 0;
        state3 = state2;
        state2 = state1;
        state1 = state0;
        state0 = (t1 + t2) | 0;
    }
    state[0] += state0;
    state[1] += state1;
    state[2] += state2;
    state[3] += state3;
    state[4] += state4;
    state[5] += state5;
    state[6] += state6;
    state[7] += state7;
};

},{"./browserHashUtils":22,"buffer/":103}],27:[function(require,module,exports){
(function (process){
var util = require('./util');

// browser specific modules
util.crypto.lib = require('./browserCryptoLib');
util.Buffer = require('buffer/').Buffer;
util.url = require('url/');
util.querystring = require('querystring/');
util.realClock = require('./realclock/browserClock');
util.environment = 'js';
util.createEventStream = require('./event-stream/buffered-create-event-stream').createEventStream;
util.isBrowser = function() { return true; };
util.isNode = function() { return false; };

var AWS = require('./core');

/**
 * @api private
 */
module.exports = AWS;

require('./credentials');
require('./credentials/credential_provider_chain');
require('./credentials/temporary_credentials');
require('./credentials/chainable_temporary_credentials');
require('./credentials/web_identity_credentials');
require('./credentials/cognito_identity_credentials');
require('./credentials/saml_credentials');

// Load the DOMParser XML parser
AWS.XML.Parser = require('./xml/browser_parser');

// Load the XHR HttpClient
require('./http/xhr');

if (typeof process === 'undefined') {
  process = {
    browser: true
  };
}

}).call(this,require('_process'))
},{"./browserCryptoLib":21,"./core":29,"./credentials":30,"./credentials/chainable_temporary_credentials":31,"./credentials/cognito_identity_credentials":32,"./credentials/credential_provider_chain":33,"./credentials/saml_credentials":34,"./credentials/temporary_credentials":35,"./credentials/web_identity_credentials":36,"./event-stream/buffered-create-event-stream":44,"./http/xhr":53,"./realclock/browserClock":70,"./util":90,"./xml/browser_parser":91,"_process":113,"buffer/":103,"querystring/":120,"url/":139}],28:[function(require,module,exports){
var AWS = require('./core');
require('./credentials');
require('./credentials/credential_provider_chain');
var PromisesDependency;

/**
 * The main configuration class used by all service objects to set
 * the region, credentials, and other options for requests.
 *
 * By default, credentials and region settings are left unconfigured.
 * This should be configured by the application before using any
 * AWS service APIs.
 *
 * In order to set global configuration options, properties should
 * be assigned to the global {AWS.config} object.
 *
 * @see AWS.config
 *
 * @!group General Configuration Options
 *
 * @!attribute credentials
 *   @return [AWS.Credentials] the AWS credentials to sign requests with.
 *
 * @!attribute region
 *   @example Set the global region setting to us-west-2
 *     AWS.config.update({region: 'us-west-2'});
 *   @return [AWS.Credentials] The region to send service requests to.
 *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html
 *     A list of available endpoints for each AWS service
 *
 * @!attribute maxRetries
 *   @return [Integer] the maximum amount of retries to perform for a
 *     service request. By default this value is calculated by the specific
 *     service object that the request is being made to.
 *
 * @!attribute maxRedirects
 *   @return [Integer] the maximum amount of redirects to follow for a
 *     service request. Defaults to 10.
 *
 * @!attribute paramValidation
 *   @return [Boolean|map] whether input parameters should be validated against
 *     the operation description before sending the request. Defaults to true.
 *     Pass a map to enable any of the following specific validation features:
 *
 *     * **min** [Boolean] &mdash; Validates that a value meets the min
 *       constraint. This is enabled by default when paramValidation is set
 *       to `true`.
 *     * **max** [Boolean] &mdash; Validates that a value meets the max
 *       constraint.
 *     * **pattern** [Boolean] &mdash; Validates that a string value matches a
 *       regular expression.
 *     * **enum** [Boolean] &mdash; Validates that a string value matches one
 *       of the allowable enum values.
 *
 * @!attribute computeChecksums
 *   @return [Boolean] whether to compute checksums for payload bodies when
 *     the service accepts it (currently supported in S3 only).
 *
 * @!attribute convertResponseTypes
 *   @return [Boolean] whether types are converted when parsing response data.
 *     Currently only supported for JSON based services. Turning this off may
 *     improve performance on large response payloads. Defaults to `true`.
 *
 * @!attribute correctClockSkew
 *   @return [Boolean] whether to apply a clock skew correction and retry
 *     requests that fail because of an skewed client clock. Defaults to
 *     `false`.
 *
 * @!attribute sslEnabled
 *   @return [Boolean] whether SSL is enabled for requests
 *
 * @!attribute s3ForcePathStyle
 *   @return [Boolean] whether to force path style URLs for S3 objects
 *
 * @!attribute s3BucketEndpoint
 *   @note Setting this configuration option requires an `endpoint` to be
 *     provided explicitly to the service constructor.
 *   @return [Boolean] whether the provided endpoint addresses an individual
 *     bucket (false if it addresses the root API endpoint).
 *
 * @!attribute s3DisableBodySigning
 *   @return [Boolean] whether to disable S3 body signing when using signature version `v4`.
 *     Body signing can only be disabled when using https. Defaults to `true`.
 *
 * @!attribute useAccelerateEndpoint
 *   @note This configuration option is only compatible with S3 while accessing
 *     dns-compatible buckets.
 *   @return [Boolean] Whether to use the Accelerate endpoint with the S3 service.
 *     Defaults to `false`.
 *
 * @!attribute retryDelayOptions
 *   @example Set the base retry delay for all services to 300 ms
 *     AWS.config.update({retryDelayOptions: {base: 300}});
 *     // Delays with maxRetries = 3: 300, 600, 1200
 *   @example Set a custom backoff function to provide delay values on retries
 *     AWS.config.update({retryDelayOptions: {customBackoff: function(retryCount) {
 *       // returns delay in ms
 *     }}});
 *   @return [map] A set of options to configure the retry delay on retryable errors.
 *     Currently supported options are:
 *
 *     * **base** [Integer] &mdash; The base number of milliseconds to use in the
 *       exponential backoff for operation retries. Defaults to 100 ms for all services except
 *       DynamoDB, where it defaults to 50ms.
 *     * **customBackoff ** [function] &mdash; A custom function that accepts a retry count
 *       and returns the amount of time to delay in milliseconds. The `base` option will be
 *       ignored if this option is supplied.
 *
 * @!attribute httpOptions
 *   @return [map] A set of options to pass to the low-level HTTP request.
 *     Currently supported options are:
 *
 *     * **proxy** [String] &mdash; the URL to proxy requests through
 *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
 *       HTTP requests with. Used for connection pooling. Defaults to the global
 *       agent (`http.globalAgent`) for non-SSL connections. Note that for
 *       SSL connections, a special Agent object is used in order to enable
 *       peer certificate verification. This feature is only supported in the
 *       Node.js environment.
 *     * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after
 *       failing to establish a connection with the server after
 *       `connectTimeout` milliseconds. This timeout has no effect once a socket
 *       connection has been established.
 *     * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout
 *       milliseconds of inactivity on the socket. Defaults to two minutes
 *       (120000)
 *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
 *       HTTP requests. Used in the browser environment only. Set to false to
 *       send requests synchronously. Defaults to true (async on).
 *     * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
 *       property of an XMLHttpRequest object. Used in the browser environment
 *       only. Defaults to false.
 * @!attribute logger
 *   @return [#write,#log] an object that responds to .write() (like a stream)
 *     or .log() (like the console object) in order to log information about
 *     requests
 *
 * @!attribute systemClockOffset
 *   @return [Number] an offset value in milliseconds to apply to all signing
 *     times. Use this to compensate for clock skew when your system may be
 *     out of sync with the service time. Note that this configuration option
 *     can only be applied to the global `AWS.config` object and cannot be
 *     overridden in service-specific configuration. Defaults to 0 milliseconds.
 *
 * @!attribute signatureVersion
 *   @return [String] the signature version to sign requests with (overriding
 *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.
 *
 * @!attribute signatureCache
 *   @return [Boolean] whether the signature to sign requests with (overriding
 *     the API configuration) is cached. Only applies to the signature version 'v4'.
 *     Defaults to `true`.
 *
 * @!attribute endpointDiscoveryEnabled
 *   @return [Boolean] whether to enable endpoint discovery for operations that
 *     allow optionally using an endpoint returned by the service.
 *     Defaults to 'false'
 *
 * @!attribute endpointCacheSize
 *   @return [Number] the size of the global cache storing endpoints from endpoint
 *     discovery operations. Once endpoint cache is created, updating this setting
 *     cannot change existing cache size.
 *     Defaults to 1000
 *
 * @!attribute hostPrefixEnabled
 *   @return [Boolean] whether to marshal request parameters to the prefix of
 *     hostname. Defaults to `true`.
 */
AWS.Config = AWS.util.inherit({
  /**
   * @!endgroup
   */

  /**
   * Creates a new configuration object. This is the object that passes
   * option data along to service requests, including credentials, security,
   * region information, and some service specific settings.
   *
   * @example Creating a new configuration object with credentials and region
   *   var config = new AWS.Config({
   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'
   *   });
   * @option options accessKeyId [String] your AWS access key ID.
   * @option options secretAccessKey [String] your AWS secret access key.
   * @option options sessionToken [AWS.Credentials] the optional AWS
   *   session token to sign requests with.
   * @option options credentials [AWS.Credentials] the AWS credentials
   *   to sign requests with. You can either specify this object, or
   *   specify the accessKeyId and secretAccessKey options directly.
   * @option options credentialProvider [AWS.CredentialProviderChain] the
   *   provider chain used to resolve credentials if no static `credentials`
   *   property is set.
   * @option options region [String] the region to send service requests to.
   *   See {region} for more information.
   * @option options maxRetries [Integer] the maximum amount of retries to
   *   attempt with a request. See {maxRetries} for more information.
   * @option options maxRedirects [Integer] the maximum amount of redirects to
   *   follow with a request. See {maxRedirects} for more information.
   * @option options sslEnabled [Boolean] whether to enable SSL for
   *   requests.
   * @option options paramValidation [Boolean|map] whether input parameters
   *   should be validated against the operation description before sending
   *   the request. Defaults to true. Pass a map to enable any of the
   *   following specific validation features:
   *
   *   * **min** [Boolean] &mdash; Validates that a value meets the min
   *     constraint. This is enabled by default when paramValidation is set
   *     to `true`.
   *   * **max** [Boolean] &mdash; Validates that a value meets the max
   *     constraint.
   *   * **pattern** [Boolean] &mdash; Validates that a string value matches a
   *     regular expression.
   *   * **enum** [Boolean] &mdash; Validates that a string value matches one
   *     of the allowable enum values.
   * @option options computeChecksums [Boolean] whether to compute checksums
   *   for payload bodies when the service accepts it (currently supported
   *   in S3 only)
   * @option options convertResponseTypes [Boolean] whether types are converted
   *     when parsing response data. Currently only supported for JSON based
   *     services. Turning this off may improve performance on large response
   *     payloads. Defaults to `true`.
   * @option options correctClockSkew [Boolean] whether to apply a clock skew
   *     correction and retry requests that fail because of an skewed client
   *     clock. Defaults to `false`.
   * @option options s3ForcePathStyle [Boolean] whether to force path
   *   style URLs for S3 objects.
   * @option options s3BucketEndpoint [Boolean] whether the provided endpoint
   *   addresses an individual bucket (false if it addresses the root API
   *   endpoint). Note that setting this configuration option requires an
   *   `endpoint` to be provided explicitly to the service constructor.
   * @option options s3DisableBodySigning [Boolean] whether S3 body signing
   *   should be disabled when using signature version `v4`. Body signing
   *   can only be disabled when using https. Defaults to `true`.
   *
   * @option options retryDelayOptions [map] A set of options to configure
   *   the retry delay on retryable errors. Currently supported options are:
   *
   *   * **base** [Integer] &mdash; The base number of milliseconds to use in the
   *     exponential backoff for operation retries. Defaults to 100 ms for all
   *     services except DynamoDB, where it defaults to 50ms.
   *   * **customBackoff ** [function] &mdash; A custom function that accepts a retry count
   *     and returns the amount of time to delay in milliseconds. The `base` option will be
   *     ignored if this option is supplied.
   * @option options httpOptions [map] A set of options to pass to the low-level
   *   HTTP request. Currently supported options are:
   *
   *   * **proxy** [String] &mdash; the URL to proxy requests through
   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
   *     HTTP requests with. Used for connection pooling. Defaults to the global
   *     agent (`http.globalAgent`) for non-SSL connections. Note that for
   *     SSL connections, a special Agent object is used in order to enable
   *     peer certificate verification. This feature is only available in the
   *     Node.js environment.
   *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after
   *     failing to establish a connection with the server after
   *     `connectTimeout` milliseconds. This timeout has no effect once a socket
   *     connection has been established.
   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout
   *     milliseconds of inactivity on the socket. Defaults to two minutes
   *     (120000).
   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
   *     HTTP requests. Used in the browser environment only. Set to false to
   *     send requests synchronously. Defaults to true (async on).
   *   * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
   *     property of an XMLHttpRequest object. Used in the browser environment
   *     only. Defaults to false.
   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format
   *   (or a date) that represents the latest possible API version that can be
   *   used in all services (unless overridden by `apiVersions`). Specify
   *   'latest' to use the latest possible version.
   * @option options apiVersions [map<String, String|Date>] a map of service
   *   identifiers (the lowercase service class name) with the API version to
   *   use when instantiating a service. Specify 'latest' for each individual
   *   that can use the latest available version.
   * @option options logger [#write,#log] an object that responds to .write()
   *   (like a stream) or .log() (like the console object) in order to log
   *   information about requests
   * @option options systemClockOffset [Number] an offset value in milliseconds
   *   to apply to all signing times. Use this to compensate for clock skew
   *   when your system may be out of sync with the service time. Note that
   *   this configuration option can only be applied to the global `AWS.config`
   *   object and cannot be overridden in service-specific configuration.
   *   Defaults to 0 milliseconds.
   * @option options signatureVersion [String] the signature version to sign
   *   requests with (overriding the API configuration). Possible values are:
   *   'v2', 'v3', 'v4'.
   * @option options signatureCache [Boolean] whether the signature to sign
   *   requests with (overriding the API configuration) is cached. Only applies
   *   to the signature version 'v4'. Defaults to `true`.
   * @option options dynamoDbCrc32 [Boolean] whether to validate the CRC32
   *   checksum of HTTP response bodies returned by DynamoDB. Default: `true`.
   * @option options useAccelerateEndpoint [Boolean] Whether to use the
   *   S3 Transfer Acceleration endpoint with the S3 service. Default: `false`.
   * @option options clientSideMonitoring [Boolean] whether to collect and
   *   publish this client's performance metrics of all its API requests.
   * @option options endpointDiscoveryEnabled [Boolean] whether to enable endpoint
   *   discovery for operations that allow optionally using an endpoint returned by
   *   the service.
   *   Defaults to 'false'
   * @option options endpointCacheSize [Number] the size of the global cache storing
   *   endpoints from endpoint discovery operations. Once endpoint cache is created,
   *   updating this setting cannot change existing cache size.
   *   Defaults to 1000
   * @option options hostPrefixEnabled [Boolean] whether to marshal request
   *   parameters to the prefix of hostname.
   *   Defaults to `true`.
   */
  constructor: function Config(options) {
    if (options === undefined) options = {};
    options = this.extractCredentials(options);

    AWS.util.each.call(this, this.keys, function (key, value) {
      this.set(key, options[key], value);
    });
  },

  /**
   * @!group Managing Credentials
   */

  /**
   * Loads credentials from the configuration object. This is used internally
   * by the SDK to ensure that refreshable {Credentials} objects are properly
   * refreshed and loaded when sending a request. If you want to ensure that
   * your credentials are loaded prior to a request, you can use this method
   * directly to provide accurate credential data stored in the object.
   *
   * @note If you configure the SDK with static or environment credentials,
   *   the credential data should already be present in {credentials} attribute.
   *   This method is primarily necessary to load credentials from asynchronous
   *   sources, or sources that can refresh credentials periodically.
   * @example Getting your access key
   *   AWS.config.getCredentials(function(err) {
   *     if (err) console.log(err.stack); // credentials not loaded
   *     else console.log("Access Key:", AWS.config.credentials.accessKeyId);
   *   })
   * @callback callback function(err)
   *   Called when the {credentials} have been properly set on the configuration
   *   object.
   *
   *   @param err [Error] if this is set, credentials were not successfully
   *     loaded and this error provides information why.
   * @see credentials
   * @see Credentials
   */
  getCredentials: function getCredentials(callback) {
    var self = this;

    function finish(err) {
      callback(err, err ? null : self.credentials);
    }

    function credError(msg, err) {
      return new AWS.util.error(err || new Error(), {
        code: 'CredentialsError',
        message: msg,
        name: 'CredentialsError'
      });
    }

    function getAsyncCredentials() {
      self.credentials.get(function(err) {
        if (err) {
          var msg = 'Could not load credentials from ' +
            self.credentials.constructor.name;
          err = credError(msg, err);
        }
        finish(err);
      });
    }

    function getStaticCredentials() {
      var err = null;
      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
        err = credError('Missing credentials');
      }
      finish(err);
    }

    if (self.credentials) {
      if (typeof self.credentials.get === 'function') {
        getAsyncCredentials();
      } else { // static credentials
        getStaticCredentials();
      }
    } else if (self.credentialProvider) {
      self.credentialProvider.resolve(function(err, creds) {
        if (err) {
          err = credError('Could not load credentials from any providers', err);
        }
        self.credentials = creds;
        finish(err);
      });
    } else {
      finish(credError('No credentials to load'));
    }
  },

  /**
   * @!group Loading and Setting Configuration Options
   */

  /**
   * @overload update(options, allowUnknownKeys = false)
   *   Updates the current configuration object with new options.
   *
   *   @example Update maxRetries property of a configuration object
   *     config.update({maxRetries: 10});
   *   @param [Object] options a map of option keys and values.
   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on
   *     the configuration object. Defaults to `false`.
   *   @see constructor
   */
  update: function update(options, allowUnknownKeys) {
    allowUnknownKeys = allowUnknownKeys || false;
    options = this.extractCredentials(options);
    AWS.util.each.call(this, options, function (key, value) {
      if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) ||
          AWS.Service.hasService(key)) {
        this.set(key, value);
      }
    });
  },

  /**
   * Loads configuration data from a JSON file into this config object.
   * @note Loading configuration will reset all existing configuration
   *   on the object.
   * @!macro nobrowser
   * @param path [String] the path relative to your process's current
   *    working directory to load configuration from.
   * @return [AWS.Config] the same configuration object
   */
  loadFromPath: function loadFromPath(path) {
    this.clear();

    var options = JSON.parse(AWS.util.readFileSync(path));
    var fileSystemCreds = new AWS.FileSystemCredentials(path);
    var chain = new AWS.CredentialProviderChain();
    chain.providers.unshift(fileSystemCreds);
    chain.resolve(function (err, creds) {
      if (err) throw err;
      else options.credentials = creds;
    });

    this.constructor(options);

    return this;
  },

  /**
   * Clears configuration data on this object
   *
   * @api private
   */
  clear: function clear() {
    /*jshint forin:false */
    AWS.util.each.call(this, this.keys, function (key) {
      delete this[key];
    });

    // reset credential provider
    this.set('credentials', undefined);
    this.set('credentialProvider', undefined);
  },

  /**
   * Sets a property on the configuration object, allowing for a
   * default value
   * @api private
   */
  set: function set(property, value, defaultValue) {
    if (value === undefined) {
      if (defaultValue === undefined) {
        defaultValue = this.keys[property];
      }
      if (typeof defaultValue === 'function') {
        this[property] = defaultValue.call(this);
      } else {
        this[property] = defaultValue;
      }
    } else if (property === 'httpOptions' && this[property]) {
      // deep merge httpOptions
      this[property] = AWS.util.merge(this[property], value);
    } else {
      this[property] = value;
    }
  },

  /**
   * All of the keys with their default values.
   *
   * @constant
   * @api private
   */
  keys: {
    credentials: null,
    credentialProvider: null,
    region: null,
    logger: null,
    apiVersions: {},
    apiVersion: null,
    endpoint: undefined,
    httpOptions: {
      timeout: 120000
    },
    maxRetries: undefined,
    maxRedirects: 10,
    paramValidation: true,
    sslEnabled: true,
    s3ForcePathStyle: false,
    s3BucketEndpoint: false,
    s3DisableBodySigning: true,
    computeChecksums: true,
    convertResponseTypes: true,
    correctClockSkew: false,
    customUserAgent: null,
    dynamoDbCrc32: true,
    systemClockOffset: 0,
    signatureVersion: null,
    signatureCache: true,
    retryDelayOptions: {},
    useAccelerateEndpoint: false,
    clientSideMonitoring: false,
    endpointDiscoveryEnabled: false,
    endpointCacheSize: 1000,
    hostPrefixEnabled: true
  },

  /**
   * Extracts accessKeyId, secretAccessKey and sessionToken
   * from a configuration hash.
   *
   * @api private
   */
  extractCredentials: function extractCredentials(options) {
    if (options.accessKeyId && options.secretAccessKey) {
      options = AWS.util.copy(options);
      options.credentials = new AWS.Credentials(options);
    }
    return options;
  },

  /**
   * Sets the promise dependency the SDK will use wherever Promises are returned.
   * Passing `null` will force the SDK to use native Promises if they are available.
   * If native Promises are not available, passing `null` will have no effect.
   * @param [Constructor] dep A reference to a Promise constructor
   */
  setPromisesDependency: function setPromisesDependency(dep) {
    PromisesDependency = dep;
    // if null was passed in, we should try to use native promises
    if (dep === null && typeof Promise === 'function') {
      PromisesDependency = Promise;
    }
    var constructors = [AWS.Request, AWS.Credentials, AWS.CredentialProviderChain];
    if (AWS.S3 && AWS.S3.ManagedUpload) constructors.push(AWS.S3.ManagedUpload);
    AWS.util.addPromises(constructors, PromisesDependency);
  },

  /**
   * Gets the promise dependency set by `AWS.config.setPromisesDependency`.
   */
  getPromisesDependency: function getPromisesDependency() {
    return PromisesDependency;
  }
});

/**
 * @return [AWS.Config] The global configuration object singleton instance
 * @readonly
 * @see AWS.Config
 */
AWS.config = new AWS.Config();

},{"./core":29,"./credentials":30,"./credentials/credential_provider_chain":33}],29:[function(require,module,exports){
/**
 * The main AWS namespace
 */
var AWS = { util: require('./util') };

/**
 * @api private
 * @!macro [new] nobrowser
 *   @note This feature is not supported in the browser environment of the SDK.
 */
var _hidden = {}; _hidden.toString(); // hack to parse macro

/**
 * @api private
 */
module.exports = AWS;

AWS.util.update(AWS, {

  /**
   * @constant
   */
  VERSION: '2.432.0',

  /**
   * @api private
   */
  Signers: {},

  /**
   * @api private
   */
  Protocol: {
    Json: require('./protocol/json'),
    Query: require('./protocol/query'),
    Rest: require('./protocol/rest'),
    RestJson: require('./protocol/rest_json'),
    RestXml: require('./protocol/rest_xml')
  },

  /**
   * @api private
   */
  XML: {
    Builder: require('./xml/builder'),
    Parser: null // conditionally set based on environment
  },

  /**
   * @api private
   */
  JSON: {
    Builder: require('./json/builder'),
    Parser: require('./json/parser')
  },

  /**
   * @api private
   */
  Model: {
    Api: require('./model/api'),
    Operation: require('./model/operation'),
    Shape: require('./model/shape'),
    Paginator: require('./model/paginator'),
    ResourceWaiter: require('./model/resource_waiter')
  },

  /**
   * @api private
   */
  apiLoader: require('./api_loader'),

  /**
   * @api private
   */
  EndpointCache: require('../vendor/endpoint-cache').EndpointCache
});
require('./sequential_executor');
require('./service');
require('./config');
require('./http');
require('./event_listeners');
require('./request');
require('./response');
require('./resource_waiter');
require('./signers/request_signer');
require('./param_validator');

/**
 * @readonly
 * @return [AWS.SequentialExecutor] a collection of global event listeners that
 *   are attached to every sent request.
 * @see AWS.Request AWS.Request for a list of events to listen for
 * @example Logging the time taken to send a request
 *   AWS.events.on('send', function startSend(resp) {
 *     resp.startTime = new Date().getTime();
 *   }).on('complete', function calculateTime(resp) {
 *     var time = (new Date().getTime() - resp.startTime) / 1000;
 *     console.log('Request took ' + time + ' seconds');
 *   });
 *
 *   new AWS.S3().listBuckets(); // prints 'Request took 0.285 seconds'
 */
AWS.events = new AWS.SequentialExecutor();

//create endpoint cache lazily
AWS.util.memoizedProperty(AWS, 'endpointCache', function() {
  return new AWS.EndpointCache(AWS.config.endpointCacheSize);
}, true);

},{"../vendor/endpoint-cache":97,"./api_loader":20,"./config":28,"./event_listeners":51,"./http":52,"./json/builder":54,"./json/parser":55,"./model/api":56,"./model/operation":58,"./model/paginator":59,"./model/resource_waiter":60,"./model/shape":61,"./param_validator":62,"./protocol/json":64,"./protocol/query":65,"./protocol/rest":66,"./protocol/rest_json":67,"./protocol/rest_xml":68,"./request":73,"./resource_waiter":74,"./response":75,"./sequential_executor":76,"./service":77,"./signers/request_signer":82,"./util":90,"./xml/builder":92}],30:[function(require,module,exports){
var AWS = require('./core');

/**
 * Represents your AWS security credentials, specifically the
 * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.
 * Creating a `Credentials` object allows you to pass around your
 * security information to configuration and service objects.
 *
 * Note that this class typically does not need to be constructed manually,
 * as the {AWS.Config} and {AWS.Service} classes both accept simple
 * options hashes with the three keys. These structures will be converted
 * into Credentials objects automatically.
 *
 * ## Expiring and Refreshing Credentials
 *
 * Occasionally credentials can expire in the middle of a long-running
 * application. In this case, the SDK will automatically attempt to
 * refresh the credentials from the storage location if the Credentials
 * class implements the {refresh} method.
 *
 * If you are implementing a credential storage location, you
 * will want to create a subclass of the `Credentials` class and
 * override the {refresh} method. This method allows credentials to be
 * retrieved from the backing store, be it a file system, database, or
 * some network storage. The method should reset the credential attributes
 * on the object.
 *
 * @!attribute expired
 *   @return [Boolean] whether the credentials have been expired and
 *     require a refresh. Used in conjunction with {expireTime}.
 * @!attribute expireTime
 *   @return [Date] a time when credentials should be considered expired. Used
 *     in conjunction with {expired}.
 * @!attribute accessKeyId
 *   @return [String] the AWS access key ID
 * @!attribute secretAccessKey
 *   @return [String] the AWS secret access key
 * @!attribute sessionToken
 *   @return [String] an optional AWS session token
 */
AWS.Credentials = AWS.util.inherit({
  /**
   * A credentials object can be created using positional arguments or an options
   * hash.
   *
   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)
   *   Creates a Credentials object with a given set of credential information
   *   as positional arguments.
   *   @param accessKeyId [String] the AWS access key ID
   *   @param secretAccessKey [String] the AWS secret access key
   *   @param sessionToken [String] the optional AWS session token
   *   @example Create a credentials object with AWS credentials
   *     var creds = new AWS.Credentials('akid', 'secret', 'session');
   * @overload AWS.Credentials(options)
   *   Creates a Credentials object with a given set of credential information
   *   as an options hash.
   *   @option options accessKeyId [String] the AWS access key ID
   *   @option options secretAccessKey [String] the AWS secret access key
   *   @option options sessionToken [String] the optional AWS session token
   *   @example Create a credentials object with AWS credentials
   *     var creds = new AWS.Credentials({
   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'
   *     });
   */
  constructor: function Credentials() {
    // hide secretAccessKey from being displayed with util.inspect
    AWS.util.hideProperties(this, ['secretAccessKey']);

    this.expired = false;
    this.expireTime = null;
    this.refreshCallbacks = [];
    if (arguments.length === 1 && typeof arguments[0] === 'object') {
      var creds = arguments[0].credentials || arguments[0];
      this.accessKeyId = creds.accessKeyId;
      this.secretAccessKey = creds.secretAccessKey;
      this.sessionToken = creds.sessionToken;
    } else {
      this.accessKeyId = arguments[0];
      this.secretAccessKey = arguments[1];
      this.sessionToken = arguments[2];
    }
  },

  /**
   * @return [Integer] the number of seconds before {expireTime} during which
   *   the credentials will be considered expired.
   */
  expiryWindow: 15,

  /**
   * @return [Boolean] whether the credentials object should call {refresh}
   * @note Subclasses should override this method to provide custom refresh
   *   logic.
   */
  needsRefresh: function needsRefresh() {
    var currentTime = AWS.util.date.getDate().getTime();
    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);

    if (this.expireTime && adjustedTime > this.expireTime) {
      return true;
    } else {
      return this.expired || !this.accessKeyId || !this.secretAccessKey;
    }
  },

  /**
   * Gets the existing credentials, refreshing them if they are not yet loaded
   * or have expired. Users should call this method before using {refresh},
   * as this will not attempt to reload credentials when they are already
   * loaded into the object.
   *
   * @callback callback function(err)
   *   When this callback is called with no error, it means either credentials
   *   do not need to be refreshed or refreshed credentials information has
   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
   *   and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   */
  get: function get(callback) {
    var self = this;
    if (this.needsRefresh()) {
      this.refresh(function(err) {
        if (!err) self.expired = false; // reset expired flag
        if (callback) callback(err);
      });
    } else if (callback) {
      callback();
    }
  },

  /**
   * @!method  getPromise()
   *   Returns a 'thenable' promise.
   *   Gets the existing credentials, refreshing them if they are not yet loaded
   *   or have expired. Users should call this method before using {refresh},
   *   as this will not attempt to reload credentials when they are already
   *   loaded into the object.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function()
   *     Called if the promise is fulfilled. When this callback is called, it
   *     means either credentials do not need to be refreshed or refreshed
   *     credentials information has been loaded into the object (as the
   *     `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @callback rejectedCallback function(err)
   *     Called if the promise is rejected.
   *     @param err [Error] if an error occurred, this value will be filled
   *   @return [Promise] A promise that represents the state of the `get` call.
   *   @example Calling the `getPromise` method.
   *     var promise = credProvider.getPromise();
   *     promise.then(function() { ... }, function(err) { ... });
   */

  /**
   * @!method  refreshPromise()
   *   Returns a 'thenable' promise.
   *   Refreshes the credentials. Users should call {get} before attempting
   *   to forcibly refresh credentials.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function()
   *     Called if the promise is fulfilled. When this callback is called, it
   *     means refreshed credentials information has been loaded into the object
   *     (as the `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @callback rejectedCallback function(err)
   *     Called if the promise is rejected.
   *     @param err [Error] if an error occurred, this value will be filled
   *   @return [Promise] A promise that represents the state of the `refresh` call.
   *   @example Calling the `refreshPromise` method.
   *     var promise = credProvider.refreshPromise();
   *     promise.then(function() { ... }, function(err) { ... });
   */

  /**
   * Refreshes the credentials. Users should call {get} before attempting
   * to forcibly refresh credentials.
   *
   * @callback callback function(err)
   *   When this callback is called with no error, it means refreshed
   *   credentials information has been loaded into the object (as the
   *   `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @note Subclasses should override this class to reset the
   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}
   *   on the credentials object and then call the callback with
   *   any error information.
   * @see get
   */
  refresh: function refresh(callback) {
    this.expired = false;
    callback();
  },

  /**
   * @api private
   * @param callback
   */
  coalesceRefresh: function coalesceRefresh(callback, sync) {
    var self = this;
    if (self.refreshCallbacks.push(callback) === 1) {
      self.load(function onLoad(err) {
        AWS.util.arrayEach(self.refreshCallbacks, function(callback) {
          if (sync) {
            callback(err);
          } else {
            // callback could throw, so defer to ensure all callbacks are notified
            AWS.util.defer(function () {
              callback(err);
            });
          }
        });
        self.refreshCallbacks.length = 0;
      });
    }
  },

  /**
   * @api private
   * @param callback
   */
  load: function load(callback) {
    callback();
  }
});

/**
 * @api private
 */
AWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);
  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);
};

/**
 * @api private
 */
AWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.getPromise;
  delete this.prototype.refreshPromise;
};

AWS.util.addPromises(AWS.Credentials);

},{"./core":29}],31:[function(require,module,exports){
var AWS = require('../core');
var STS = require('../../clients/sts');

/**
 * Represents temporary credentials retrieved from {AWS.STS}. Without any
 * extra parameters, credentials will be fetched from the
 * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the
 * {AWS.STS.assumeRole} operation will be used to fetch credentials for the
 * role instead.
 *
 * AWS.ChainableTemporaryCredentials differs from AWS.TemporaryCredentials in
 * the way masterCredentials and refreshes are handled.
 * AWS.ChainableTemporaryCredentials refreshes expired credentials using the
 * masterCredentials passed by the user to support chaining of STS credentials.
 * However, AWS.TemporaryCredentials recursively collapses the masterCredentials
 * during instantiation, precluding the ability to refresh credentials which
 * require intermediate, temporary credentials.
 *
 * For example, if the application should use RoleA, which must be assumed from
 * RoleB, and the environment provides credentials which can assume RoleB, then
 * AWS.ChainableTemporaryCredentials must be used to support refreshing the
 * temporary credentials for RoleA:
 *
 * ```javascript
 * var roleACreds = new AWS.ChainableTemporaryCredentials({
 *   params: {RoleArn: 'RoleA'},
 *   masterCredentials: new AWS.ChainableTemporaryCredentials({
 *     params: {RoleArn: 'RoleB'},
 *     masterCredentials: new AWS.EnvironmentCredentials('AWS')
 *   })
 * });
 * ```
 *
 * If AWS.TemporaryCredentials had been used in the previous example,
 * `roleACreds` would fail to refresh because `roleACreds` would
 * use the environment credentials for the AssumeRole request.
 *
 * Another difference is that AWS.ChainableTemporaryCredentials creates the STS
 * service instance during instantiation while AWS.TemporaryCredentials creates
 * the STS service instance during the first refresh. Creating the service
 * instance during instantiation effectively captures the master credentials
 * from the global config, so that subsequent changes to the global config do
 * not affect the master credentials used to refresh the temporary credentials.
 *
 * This allows an instance of AWS.ChainableTemporaryCredentials to be assigned
 * to AWS.config.credentials:
 *
 * ```javascript
 * var envCreds = new AWS.EnvironmentCredentials('AWS');
 * AWS.config.credentials = envCreds;
 * // masterCredentials will be envCreds
 * AWS.config.credentials = new AWS.ChainableTemporaryCredentials({
 *   params: {RoleArn: '...'}
 * });
 * ```
 *
 * Similarly, to use the CredentialProviderChain's default providers as the
 * master credentials, simply create a new instance of
 * AWS.ChainableTemporaryCredentials:
 *
 * ```javascript
 * AWS.config.credentials = new ChainableTemporaryCredentials({
 *   params: {RoleArn: '...'}
 * });
 * ```
 *
 * @!attribute service
 *   @return [AWS.STS] the STS service instance used to
 *     get and refresh temporary credentials from AWS STS.
 * @note (see constructor)
 */
AWS.ChainableTemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new temporary credentials object.
   *
   * @param options [map] a set of options
   * @option options params [map] ({}) a map of options that are passed to the
   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.
   *   If a `RoleArn` parameter is passed in, credentials will be based on the
   *   IAM role. If a `SerialNumber` parameter is passed in, {tokenCodeFn} must
   *   also be passed in or an error will be thrown.
   * @option options masterCredentials [AWS.Credentials] the master credentials
   *   used to get and refresh temporary credentials from AWS STS. By default,
   *   AWS.config.credentials or AWS.config.credentialProvider will be used.
   * @option options tokenCodeFn [Function] (null) Function to provide
   *   `TokenCode`, if `SerialNumber` is provided for profile in {params}. Function
   *   is called with value of `SerialNumber` and `callback`, and should provide
   *   the `TokenCode` or an error to the callback in the format
   *   `callback(err, token)`.
   * @example Creating a new credentials object for generic temporary credentials
   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials();
   * @example Creating a new credentials object for an IAM role
   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials({
   *     params: {
   *       RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials'
   *     }
   *   });
   * @see AWS.STS.assumeRole
   * @see AWS.STS.getSessionToken
   */
  constructor: function ChainableTemporaryCredentials(options) {
    AWS.Credentials.call(this);
    options = options || {};
    this.errorCode = 'ChainableTemporaryCredentialsProviderFailure';
    this.expired = true;
    this.tokenCodeFn = null;

    var params = AWS.util.copy(options.params) || {};
    if (params.RoleArn) {
      params.RoleSessionName = params.RoleSessionName || 'temporary-credentials';
    }
    if (params.SerialNumber) {
      if (!options.tokenCodeFn || (typeof options.tokenCodeFn !== 'function')) {
        throw new AWS.util.error(
          new Error('tokenCodeFn must be a function when params.SerialNumber is given'),
          {code: this.errorCode}
        );
      } else {
        this.tokenCodeFn = options.tokenCodeFn;
      }
    }
    this.service = new STS({
      params: params,
      credentials: options.masterCredentials || AWS.config.credentials
    });
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRole} or
   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed
   * to the credentials {constructor}.
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see AWS.Credentials.get
   */
  refresh: function refresh(callback) {
    this.coalesceRefresh(callback || AWS.util.fn.callback);
  },

  /**
   * @api private
   * @param callback
   */
  load: function load(callback) {
    var self = this;
    var operation = self.service.config.params.RoleArn ? 'assumeRole' : 'getSessionToken';
    this.getTokenCode(function (err, tokenCode) {
      var params = {};
      if (err) {
        callback(err);
        return;
      }
      if (tokenCode) {
        params.TokenCode = tokenCode;
      }
      self.service[operation](params, function (err, data) {
        if (!err) {
          self.service.credentialsFrom(data, self);
        }
        callback(err);
      });
    });
  },

  /**
   * @api private
   */
  getTokenCode: function getTokenCode(callback) {
    var self = this;
    if (this.tokenCodeFn) {
      this.tokenCodeFn(this.service.config.params.SerialNumber, function (err, token) {
        if (err) {
          var message = err;
          if (err instanceof Error) {
            message = err.message;
          }
          callback(
            AWS.util.error(
              new Error('Error fetching MFA token: ' + message),
              { code: self.errorCode}
            )
          );
          return;
        }
        callback(null, token);
      });
    } else {
      callback(null);
    }
  }
});

},{"../../clients/sts":19,"../core":29}],32:[function(require,module,exports){
var AWS = require('../core');
var CognitoIdentity = require('../../clients/cognitoidentity');
var STS = require('../../clients/sts');

/**
 * Represents credentials retrieved from STS Web Identity Federation using
 * the Amazon Cognito Identity service.
 *
 * By default this provider gets credentials using the
 * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which
 * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito
 * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to
 * obtain an `IdentityId`. If the identity or identity pool is not configured in
 * the Amazon Cognito Console to use IAM roles with the appropriate permissions,
 * then additionally a `RoleArn` is required containing the ARN of the IAM trust
 * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`
 * is provided, then this provider gets credentials using the
 * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an
 * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.
 *
 * In addition, if this credential provider is used to provide authenticated
 * login, the `Logins` map may be set to the tokens provided by the respective
 * identity providers. See {constructor} for an example on creating a credentials
 * object with proper property values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the WebIdentityToken, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.CognitoIdentity.getId},
 *     {AWS.CognitoIdentity.getOpenIdToken}, and
 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
 *     `params.WebIdentityToken` property.
 * @!attribute data
 *   @return [map] the raw data response from the call to
 *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or
 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
 *     access to other properties from the response.
 * @!attribute identityId
 *   @return [String] the Cognito ID returned by the last call to
 *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual
 *     final resolved identity ID from Amazon Cognito.
 */
AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * @api private
   */
  localStorageKey: {
    id: 'aws.cognito.identity-id.',
    providers: 'aws.cognito.identity-providers.'
  },

  /**
   * Creates a new credentials object.
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({
   *
   *     // either IdentityPoolId or IdentityId is required
   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)
   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity
   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)
   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',
   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'
   *
   *     // optional, only necessary when the identity pool is not configured
   *     // to use IAM roles in the Amazon Cognito Console
   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)
   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',
   *
   *     // optional tokens, used for authenticated login
   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)
   *     Logins: {
   *       'graph.facebook.com': 'FBTOKEN',
   *       'www.amazon.com': 'AMAZONTOKEN',
   *       'accounts.google.com': 'GOOGLETOKEN',
   *       'api.twitter.com': 'TWITTERTOKEN',
   *       'www.digits.com': 'DIGITSTOKEN'
   *     },
   *
   *     // optional name, defaults to web-identity
   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)
   *     RoleSessionName: 'web',
   *
   *     // optional, only necessary when application runs in a browser
   *     // and multiple users are signed in at once, used for caching
   *     LoginId: 'example@gmail.com'
   *
   *   }, {
   *      // optionally provide configuration to apply to the underlying service clients
   *      // if configuration is not provided, then configuration will be pulled from AWS.config
   *
   *      // region should match the region your identity pool is located in
   *      region: 'us-east-1',
   *
   *      // specify timeout options
   *      httpOptions: {
   *        timeout: 100
   *      }
   *   });
   * @see AWS.CognitoIdentity.getId
   * @see AWS.CognitoIdentity.getCredentialsForIdentity
   * @see AWS.STS.assumeRoleWithWebIdentity
   * @see AWS.CognitoIdentity.getOpenIdToken
   * @see AWS.Config
   * @note If a region is not provided in the global AWS.config, or
   *   specified in the `clientConfig` to the CognitoIdentityCredentials
   *   constructor, you may encounter a 'Missing credentials in config' error
   *   when calling making a service call.
   */
  constructor: function CognitoIdentityCredentials(params, clientConfig) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
    this.data = null;
    this._identityId = null;
    this._clientConfig = AWS.util.copy(clientConfig || {});
    this.loadCachedId();
    var self = this;
    Object.defineProperty(this, 'identityId', {
      get: function() {
        self.loadCachedId();
        return self._identityId || self.params.IdentityId;
      },
      set: function(identityId) {
        self._identityId = identityId;
      }
    });
  },

  /**
   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},
   * or {AWS.STS.assumeRoleWithWebIdentity}.
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see AWS.Credentials.get
   */
  refresh: function refresh(callback) {
    this.coalesceRefresh(callback || AWS.util.fn.callback);
  },

  /**
   * @api private
   * @param callback
   */
  load: function load(callback) {
    var self = this;
    self.createClients();
    self.data = null;
    self._identityId = null;
    self.getId(function(err) {
      if (!err) {
        if (!self.params.RoleArn) {
          self.getCredentialsForIdentity(callback);
        } else {
          self.getCredentialsFromSTS(callback);
        }
      } else {
        self.clearIdOnNotAuthorized(err);
        callback(err);
      }
    });
  },

  /**
   * Clears the cached Cognito ID associated with the currently configured
   * identity pool ID. Use this to manually invalidate your cache if
   * the identity pool ID was deleted.
   */
  clearCachedId: function clearCache() {
    this._identityId = null;
    delete this.params.IdentityId;

    var poolId = this.params.IdentityPoolId;
    var loginId = this.params.LoginId || '';
    delete this.storage[this.localStorageKey.id + poolId + loginId];
    delete this.storage[this.localStorageKey.providers + poolId + loginId];
  },

  /**
   * @api private
   */
  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {
    var self = this;
    if (err.code == 'NotAuthorizedException') {
      self.clearCachedId();
    }
  },

  /**
   * Retrieves a Cognito ID, loading from cache if it was already retrieved
   * on this device.
   *
   * @callback callback function(err, identityId)
   *   @param err [Error, null] an error object if the call failed or null if
   *     it succeeded.
   *   @param identityId [String, null] if successful, the callback will return
   *     the Cognito ID.
   * @note If not loaded explicitly, the Cognito ID is loaded and stored in
   *   localStorage in the browser environment of a device.
   * @api private
   */
  getId: function getId(callback) {
    var self = this;
    if (typeof self.params.IdentityId === 'string') {
      return callback(null, self.params.IdentityId);
    }

    self.cognito.getId(function(err, data) {
      if (!err && data.IdentityId) {
        self.params.IdentityId = data.IdentityId;
        callback(null, data.IdentityId);
      } else {
        callback(err);
      }
    });
  },


  /**
   * @api private
   */
  loadCredentials: function loadCredentials(data, credentials) {
    if (!data || !credentials) return;
    credentials.expired = false;
    credentials.accessKeyId = data.Credentials.AccessKeyId;
    credentials.secretAccessKey = data.Credentials.SecretKey;
    credentials.sessionToken = data.Credentials.SessionToken;
    credentials.expireTime = data.Credentials.Expiration;
  },

  /**
   * @api private
   */
  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {
    var self = this;
    self.cognito.getCredentialsForIdentity(function(err, data) {
      if (!err) {
        self.cacheId(data);
        self.data = data;
        self.loadCredentials(self.data, self);
      } else {
        self.clearIdOnNotAuthorized(err);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {
    var self = this;
    self.cognito.getOpenIdToken(function(err, data) {
      if (!err) {
        self.cacheId(data);
        self.params.WebIdentityToken = data.Token;
        self.webIdentityCredentials.refresh(function(webErr) {
          if (!webErr) {
            self.data = self.webIdentityCredentials.data;
            self.sts.credentialsFrom(self.data, self);
          }
          callback(webErr);
        });
      } else {
        self.clearIdOnNotAuthorized(err);
        callback(err);
      }
    });
  },

  /**
   * @api private
   */
  loadCachedId: function loadCachedId() {
    var self = this;

    // in the browser we source default IdentityId from localStorage
    if (AWS.util.isBrowser() && !self.params.IdentityId) {
      var id = self.getStorage('id');
      if (id && self.params.Logins) {
        var actualProviders = Object.keys(self.params.Logins);
        var cachedProviders =
          (self.getStorage('providers') || '').split(',');

        // only load ID if at least one provider used this ID before
        var intersect = cachedProviders.filter(function(n) {
          return actualProviders.indexOf(n) !== -1;
        });
        if (intersect.length !== 0) {
          self.params.IdentityId = id;
        }
      } else if (id) {
        self.params.IdentityId = id;
      }
    }
  },

  /**
   * @api private
   */
  createClients: function() {
    var clientConfig = this._clientConfig;
    this.webIdentityCredentials = this.webIdentityCredentials ||
      new AWS.WebIdentityCredentials(this.params, clientConfig);
    if (!this.cognito) {
      var cognitoConfig = AWS.util.merge({}, clientConfig);
      cognitoConfig.params = this.params;
      this.cognito = new CognitoIdentity(cognitoConfig);
    }
    this.sts = this.sts || new STS(clientConfig);
  },

  /**
   * @api private
   */
  cacheId: function cacheId(data) {
    this._identityId = data.IdentityId;
    this.params.IdentityId = this._identityId;

    // cache this IdentityId in browser localStorage if possible
    if (AWS.util.isBrowser()) {
      this.setStorage('id', data.IdentityId);

      if (this.params.Logins) {
        this.setStorage('providers', Object.keys(this.params.Logins).join(','));
      }
    }
  },

  /**
   * @api private
   */
  getStorage: function getStorage(key) {
    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];
  },

  /**
   * @api private
   */
  setStorage: function setStorage(key, val) {
    try {
      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;
    } catch (_) {}
  },

  /**
   * @api private
   */
  storage: (function() {
    try {
      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?
          window.localStorage : {};

      // Test set/remove which would throw an error in Safari's private browsing
      storage['aws.test-storage'] = 'foobar';
      delete storage['aws.test-storage'];

      return storage;
    } catch (_) {
      return {};
    }
  })()
});

},{"../../clients/cognitoidentity":17,"../../clients/sts":19,"../core":29}],33:[function(require,module,exports){
var AWS = require('../core');

/**
 * Creates a credential provider chain that searches for AWS credentials
 * in a list of credential providers specified by the {providers} property.
 *
 * By default, the chain will use the {defaultProviders} to resolve credentials.
 * These providers will look in the environment using the
 * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.
 *
 * ## Setting Providers
 *
 * Each provider in the {providers} list should be a function that returns
 * a {AWS.Credentials} object, or a hardcoded credentials object. The function
 * form allows for delayed execution of the credential construction.
 *
 * ## Resolving Credentials from a Chain
 *
 * Call {resolve} to return the first valid credential object that can be
 * loaded by the provider chain.
 *
 * For example, to resolve a chain with a custom provider that checks a file
 * on disk after the set of {defaultProviders}:
 *
 * ```javascript
 * var diskProvider = new AWS.FileSystemCredentials('./creds.json');
 * var chain = new AWS.CredentialProviderChain();
 * chain.providers.push(diskProvider);
 * chain.resolve();
 * ```
 *
 * The above code will return the `diskProvider` object if the
 * file contains credentials and the `defaultProviders` do not contain
 * any credential settings.
 *
 * @!attribute providers
 *   @return [Array<AWS.Credentials, Function>]
 *     a list of credentials objects or functions that return credentials
 *     objects. If the provider is a function, the function will be
 *     executed lazily when the provider needs to be checked for valid
 *     credentials. By default, this object will be set to the
 *     {defaultProviders}.
 *   @see defaultProviders
 */
AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {

  /**
   * Creates a new CredentialProviderChain with a default set of providers
   * specified by {defaultProviders}.
   */
  constructor: function CredentialProviderChain(providers) {
    if (providers) {
      this.providers = providers;
    } else {
      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
    }
    this.resolveCallbacks = [];
  },

  /**
   * @!method  resolvePromise()
   *   Returns a 'thenable' promise.
   *   Resolves the provider chain by searching for the first set of
   *   credentials in {providers}.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function(credentials)
   *     Called if the promise is fulfilled and the provider resolves the chain
   *     to a credentials object
   *     @param credentials [AWS.Credentials] the credentials object resolved
   *       by the provider chain.
   *   @callback rejectedCallback function(error)
   *     Called if the promise is rejected.
   *     @param err [Error] the error object returned if no credentials are found.
   *   @return [Promise] A promise that represents the state of the `resolve` method call.
   *   @example Calling the `resolvePromise` method.
   *     var promise = chain.resolvePromise();
   *     promise.then(function(credentials) { ... }, function(err) { ... });
   */

  /**
   * Resolves the provider chain by searching for the first set of
   * credentials in {providers}.
   *
   * @callback callback function(err, credentials)
   *   Called when the provider resolves the chain to a credentials object
   *   or null if no credentials can be found.
   *
   *   @param err [Error] the error object returned if no credentials are
   *     found.
   *   @param credentials [AWS.Credentials] the credentials object resolved
   *     by the provider chain.
   * @return [AWS.CredentialProviderChain] the provider, for chaining.
   */
  resolve: function resolve(callback) {
    var self = this;
    if (self.providers.length === 0) {
      callback(new Error('No providers'));
      return self;
    }

    if (self.resolveCallbacks.push(callback) === 1) {
      var index = 0;
      var providers = self.providers.slice(0);

      function resolveNext(err, creds) {
        if ((!err && creds) || index === providers.length) {
          AWS.util.arrayEach(self.resolveCallbacks, function (callback) {
            callback(err, creds);
          });
          self.resolveCallbacks.length = 0;
          return;
        }

        var provider = providers[index++];
        if (typeof provider === 'function') {
          creds = provider.call();
        } else {
          creds = provider;
        }

        if (creds.get) {
          creds.get(function (getErr) {
            resolveNext(getErr, getErr ? null : creds);
          });
        } else {
          resolveNext(null, creds);
        }
      }

      resolveNext();
    }

    return self;
  }
});

/**
 * The default set of providers used by a vanilla CredentialProviderChain.
 *
 * In the browser:
 *
 * ```javascript
 * AWS.CredentialProviderChain.defaultProviders = []
 * ```
 *
 * In Node.js:
 *
 * ```javascript
 * AWS.CredentialProviderChain.defaultProviders = [
 *   function () { return new AWS.EnvironmentCredentials('AWS'); },
 *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },
 *   function () { return new AWS.SharedIniFileCredentials(); },
 *   function () { return new AWS.ECSCredentials(); },
 *   function () { return new AWS.ProcessCredentials(); },
 *   function () { return new AWS.EC2MetadataCredentials() }
 * ]
 * ```
 */
AWS.CredentialProviderChain.defaultProviders = [];

/**
 * @api private
 */
AWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);
};

/**
 * @api private
 */
AWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.resolvePromise;
};

AWS.util.addPromises(AWS.CredentialProviderChain);

},{"../core":29}],34:[function(require,module,exports){
var AWS = require('../core');
var STS = require('../../clients/sts');

/**
 * Represents credentials retrieved from STS SAML support.
 *
 * By default this provider gets credentials using the
 * {AWS.STS.assumeRoleWithSAML} service operation. This operation
 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
 * application for which credentials will be given, as well as a `PrincipalArn`
 * representing the ARN for the SAML identity provider. In addition, the
 * `SAMLAssertion` must be set to the token provided by the identity
 * provider. See {constructor} for an example on creating a credentials
 * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the SAMLAssertion, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.SAMLAssertion = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the
 *     `params.SAMLAssertion` property.
 */
AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new credentials object.
   * @param (see AWS.STS.assumeRoleWithSAML)
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.SAMLCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',
   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',
   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP
   *   });
   * @see AWS.STS.assumeRoleWithSAML
   */
  constructor: function SAMLCredentials(params) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    this.coalesceRefresh(callback || AWS.util.fn.callback);
  },

  /**
   * @api private
   */
  load: function load(callback) {
    var self = this;
    self.createClients();
    self.service.assumeRoleWithSAML(function (err, data) {
      if (!err) {
        self.service.credentialsFrom(data, self);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  createClients: function() {
    this.service = this.service || new STS({params: this.params});
  }

});

},{"../../clients/sts":19,"../core":29}],35:[function(require,module,exports){
var AWS = require('../core');
var STS = require('../../clients/sts');

/**
 * Represents temporary credentials retrieved from {AWS.STS}. Without any
 * extra parameters, credentials will be fetched from the
 * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the
 * {AWS.STS.assumeRole} operation will be used to fetch credentials for the
 * role instead.
 *
 * @note AWS.TemporaryCredentials is deprecated, but remains available for
 *   backwards compatibility. {AWS.ChainableTemporaryCredentials} is the
 *   preferred class for temporary credentials.
 *
 * To setup temporary credentials, configure a set of master credentials
 * using the standard credentials providers (environment, EC2 instance metadata,
 * or from the filesystem), then set the global credentials to a new
 * temporary credentials object:
 *
 * ```javascript
 * // Note that environment credentials are loaded by default,
 * // the following line is shown for clarity:
 * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');
 *
 * // Now set temporary credentials seeded from the master credentials
 * AWS.config.credentials = new AWS.TemporaryCredentials();
 *
 * // subsequent requests will now use temporary credentials from AWS STS.
 * new AWS.S3().listBucket(function(err, data) { ... });
 * ```
 *
 * @!attribute masterCredentials
 *   @return [AWS.Credentials] the master (non-temporary) credentials used to
 *     get and refresh temporary credentials from AWS STS.
 * @note (see constructor)
 */
AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new temporary credentials object.
   *
   * @note In order to create temporary credentials, you first need to have
   *   "master" credentials configured in {AWS.Config.credentials}. These
   *   master credentials are necessary to retrieve the temporary credentials,
   *   as well as refresh the credentials when they expire.
   * @param params [map] a map of options that are passed to the
   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.
   *   If a `RoleArn` parameter is passed in, credentials will be based on the
   *   IAM role.
   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials
   *  used to get and refresh temporary credentials from AWS STS.
   * @example Creating a new credentials object for generic temporary credentials
   *   AWS.config.credentials = new AWS.TemporaryCredentials();
   * @example Creating a new credentials object for an IAM role
   *   AWS.config.credentials = new AWS.TemporaryCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',
   *   });
   * @see AWS.STS.assumeRole
   * @see AWS.STS.getSessionToken
   */
  constructor: function TemporaryCredentials(params, masterCredentials) {
    AWS.Credentials.call(this);
    this.loadMasterCredentials(masterCredentials);
    this.expired = true;

    this.params = params || {};
    if (this.params.RoleArn) {
      this.params.RoleSessionName =
        this.params.RoleSessionName || 'temporary-credentials';
    }
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRole} or
   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed
   * to the credentials {constructor}.
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh (callback) {
    this.coalesceRefresh(callback || AWS.util.fn.callback);
  },

  /**
   * @api private
   */
  load: function load (callback) {
    var self = this;
    self.createClients();
    self.masterCredentials.get(function () {
      self.service.config.credentials = self.masterCredentials;
      var operation = self.params.RoleArn ?
        self.service.assumeRole : self.service.getSessionToken;
      operation.call(self.service, function (err, data) {
        if (!err) {
          self.service.credentialsFrom(data, self);
        }
        callback(err);
      });
    });
  },

  /**
   * @api private
   */
  loadMasterCredentials: function loadMasterCredentials (masterCredentials) {
    this.masterCredentials = masterCredentials || AWS.config.credentials;
    while (this.masterCredentials.masterCredentials) {
      this.masterCredentials = this.masterCredentials.masterCredentials;
    }

    if (typeof this.masterCredentials.get !== 'function') {
      this.masterCredentials = new AWS.Credentials(this.masterCredentials);
    }
  },

  /**
   * @api private
   */
  createClients: function () {
    this.service = this.service || new STS({params: this.params});
  }

});

},{"../../clients/sts":19,"../core":29}],36:[function(require,module,exports){
var AWS = require('../core');
var STS = require('../../clients/sts');

/**
 * Represents credentials retrieved from STS Web Identity Federation support.
 *
 * By default this provider gets credentials using the
 * {AWS.STS.assumeRoleWithWebIdentity} service operation. This operation
 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
 * application for which credentials will be given. In addition, the
 * `WebIdentityToken` must be set to the token provided by the identity
 * provider. See {constructor} for an example on creating a credentials
 * object with proper `RoleArn` and `WebIdentityToken` values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the WebIdentityToken, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.WebIdentityToken = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
 *     `params.WebIdentityToken` property.
 * @!attribute data
 *   @return [map] the raw data response from the call to
 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
 *     access to other properties from the response.
 */
AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new credentials object.
   * @param (see AWS.STS.assumeRoleWithWebIdentity)
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.WebIdentityCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/WebIdentity',
   *     WebIdentityToken: 'ABCDEFGHIJKLMNOP', // token from identity service
   *     RoleSessionName: 'web' // optional name, defaults to web-identity
   *   }, {
   *     // optionally provide configuration to apply to the underlying AWS.STS service client
   *     // if configuration is not provided, then configuration will be pulled from AWS.config
   *
   *     // specify timeout options
   *     httpOptions: {
   *       timeout: 100
   *     }
   *   });
   * @see AWS.STS.assumeRoleWithWebIdentity
   * @see AWS.Config
   */
  constructor: function WebIdentityCredentials(params, clientConfig) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';
    this.data = null;
    this._clientConfig = AWS.util.copy(clientConfig || {});
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    this.coalesceRefresh(callback || AWS.util.fn.callback);
  },

  /**
   * @api private
   */
  load: function load(callback) {
    var self = this;
    self.createClients();
    self.service.assumeRoleWithWebIdentity(function (err, data) {
      self.data = null;
      if (!err) {
        self.data = data;
        self.service.credentialsFrom(data, self);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  createClients: function() {
    if (!this.service) {
      var stsConfig = AWS.util.merge({}, this._clientConfig);
      stsConfig.params = this.params;
      this.service = new STS(stsConfig);
    }
  }

});

},{"../../clients/sts":19,"../core":29}],37:[function(require,module,exports){
(function (process){
var AWS = require('./core');
var util = require('./util');
var endpointDiscoveryEnabledEnvs = ['AWS_ENABLE_ENDPOINT_DISCOVERY', 'AWS_ENDPOINT_DISCOVERY_ENABLED'];

/**
 * Generate key (except resources and operation part) to index the endpoints in the cache
 * If input shape has endpointdiscoveryid trait then use
 *   accessKey + operation + resources + region + service as cache key
 * If input shape doesn't have endpointdiscoveryid trait then use
 *   accessKey + region + service as cache key
 * @return [map<String,String>] object with keys to index endpoints.
 * @api private
 */
function getCacheKey(request) {
  var service = request.service;
  var api = service.api || {};
  var operations = api.operations;
  var identifiers = {};
  if (service.config.region) {
    identifiers.region = service.config.region;
  }
  if (api.serviceId) {
    identifiers.serviceId = api.serviceId;
  }
  if (service.config.credentials.accessKeyId) {
    identifiers.accessKeyId = service.config.credentials.accessKeyId;
  }
  return identifiers;
}

/**
 * Recursive helper for marshallCustomIdentifiers().
 * Looks for required string input members that have 'endpointdiscoveryid' trait.
 * @api private
 */
function marshallCustomIdentifiersHelper(result, params, shape) {
  if (!shape || params === undefined || params === null) return;
  if (shape.type === 'structure' && shape.required && shape.required.length > 0) {
    util.arrayEach(shape.required, function(name) {
      var memberShape = shape.members[name];
      if (memberShape.endpointDiscoveryId === true) {
        var locationName = memberShape.isLocationName ? memberShape.name : name;
        result[locationName] = String(params[name]);
      } else {
        marshallCustomIdentifiersHelper(result, params[name], memberShape);
      }
    });
  }
}

/**
 * Get custom identifiers for cache key.
 * Identifies custom identifiers by checking each shape's `endpointDiscoveryId` trait.
 * @param [object] request object
 * @param [object] input shape of the given operation's api
 * @api private
 */
function marshallCustomIdentifiers(request, shape) {
  var identifiers = {};
  marshallCustomIdentifiersHelper(identifiers, request.params, shape);
  return identifiers;
}

/**
 * Call endpoint discovery operation when it's optional.
 * When endpoint is available in cache then use the cached endpoints. If endpoints
 * are unavailable then use regional endpoints and call endpoint discovery operation
 * asynchronously. This is turned off by default.
 * @param [object] request object
 * @api private
 */
function optionalDiscoverEndpoint(request) {
  var service = request.service;
  var api = service.api;
  var operationModel = api.operations ? api.operations[request.operation] : undefined;
  var inputShape = operationModel ? operationModel.input : undefined;

  var identifiers = marshallCustomIdentifiers(request, inputShape);
  var cacheKey = getCacheKey(request);
  if (Object.keys(identifiers).length > 0) {
    cacheKey = util.update(cacheKey, identifiers);
    if (operationModel) cacheKey.operation = operationModel.name;
  }
  var endpoints = AWS.endpointCache.get(cacheKey);
  if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {
    //endpoint operation is being made but response not yet received
    //or endpoint operation just failed in 1 minute
    return;
  } else if (endpoints && endpoints.length > 0) {
    //found endpoint record from cache
    request.httpRequest.updateEndpoint(endpoints[0].Address);
  } else {
    //endpoint record not in cache or outdated. make discovery operation
    var endpointRequest = service.makeRequest(api.endpointOperation, {
      Operation: operationModel.name,
      Identifiers: identifiers,
    });
    addApiVersionHeader(endpointRequest);
    endpointRequest.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
    endpointRequest.removeListener('retry', AWS.EventListeners.Core.RETRY_CHECK);
    //put in a placeholder for endpoints already requested, prevent
    //too much in-flight calls
    AWS.endpointCache.put(cacheKey, [{
      Address: '',
      CachePeriodInMinutes: 1
    }]);
    endpointRequest.send(function(err, data) {
      if (data && data.Endpoints) {
        AWS.endpointCache.put(cacheKey, data.Endpoints);
      } else if (err) {
        AWS.endpointCache.put(cacheKey, [{
          Address: '',
          CachePeriodInMinutes: 1 //not to make more endpoint operation in next 1 minute
        }]);
      }
    });
  }
}

var requestQueue = {};

/**
 * Call endpoint discovery operation when it's required.
 * When endpoint is available in cache then use cached ones. If endpoints are
 * unavailable then SDK should call endpoint operation then use returned new
 * endpoint for the api call. SDK will automatically attempt to do endpoint
 * discovery. This is turned off by default
 * @param [object] request object
 * @api private
 */
function requiredDiscoverEndpoint(request, done) {
  var service = request.service;
  var api = service.api;
  var operationModel = api.operations ? api.operations[request.operation] : undefined;
  var inputShape = operationModel ? operationModel.input : undefined;

  var identifiers = marshallCustomIdentifiers(request, inputShape);
  var cacheKey = getCacheKey(request);
  if (Object.keys(identifiers).length > 0) {
    cacheKey = util.update(cacheKey, identifiers);
    if (operationModel) cacheKey.operation = operationModel.name;
  }
  var cacheKeyStr = AWS.EndpointCache.getKeyString(cacheKey);
  var endpoints = AWS.endpointCache.get(cacheKeyStr); //endpoint cache also accepts string keys
  if (endpoints && endpoints.length === 1 && endpoints[0].Address === '') {
    //endpoint operation is being made but response not yet received
    //push request object to a pending queue
    if (!requestQueue[cacheKeyStr]) requestQueue[cacheKeyStr] = [];
    requestQueue[cacheKeyStr].push({request: request, callback: done});
    return;
  } else if (endpoints && endpoints.length > 0) {
    request.httpRequest.updateEndpoint(endpoints[0].Address);
    done();
  } else {
    var endpointRequest = service.makeRequest(api.endpointOperation, {
      Operation: operationModel.name,
      Identifiers: identifiers,
    });
    endpointRequest.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
    addApiVersionHeader(endpointRequest);

    //put in a placeholder for endpoints already requested, prevent
    //too much in-flight calls
    AWS.endpointCache.put(cacheKeyStr, [{
      Address: '',
      CachePeriodInMinutes: 60 //long-live cache
    }]);
    endpointRequest.send(function(err, data) {
      if (err) {
        var errorParams = {
          code: 'EndpointDiscoveryException',
          message: 'Request cannot be fulfilled without specifying an endpoint',
          retryable: false
        };
        request.response.error = util.error(err, errorParams);
        AWS.endpointCache.remove(cacheKey);

        //fail all the pending requests in batch
        if (requestQueue[cacheKeyStr]) {
          var pendingRequests = requestQueue[cacheKeyStr];
          util.arrayEach(pendingRequests, function(requestContext) {
            requestContext.request.response.error = util.error(err, errorParams);
            requestContext.callback();
          });
          delete requestQueue[cacheKeyStr];
        }
      } else if (data) {
        AWS.endpointCache.put(cacheKeyStr, data.Endpoints);
        request.httpRequest.updateEndpoint(data.Endpoints[0].Address);

        //update the endpoint for all the pending requests in batch
        if (requestQueue[cacheKeyStr]) {
          var pendingRequests = requestQueue[cacheKeyStr];
          util.arrayEach(pendingRequests, function(requestContext) {
            requestContext.request.httpRequest.updateEndpoint(data.Endpoints[0].Address);
            requestContext.callback();
          });
          delete requestQueue[cacheKeyStr];
        }
      }
      done();
    });
  }
}

/**
 * add api version header to endpoint operation
 * @api private
 */
function addApiVersionHeader(endpointRequest) {
  var api = endpointRequest.service.api;
  var apiVersion = api.apiVersion;
  if (apiVersion && !endpointRequest.httpRequest.headers['x-amz-api-version']) {
    endpointRequest.httpRequest.headers['x-amz-api-version'] = apiVersion;
  }
}

/**
 * If api call gets invalid endpoint exception, SDK should attempt to remove the invalid
 * endpoint from cache.
 * @api private
 */
function invalidateCachedEndpoints(response) {
  var error = response.error;
  var httpResponse = response.httpResponse;
  if (error &&
    (error.code === 'InvalidEndpointException' || httpResponse.statusCode === 421)
  ) {
    var request = response.request;
    var operations = request.service.api.operations || {};
    var inputShape = operations[request.operation] ? operations[request.operation].input : undefined;
    var identifiers = marshallCustomIdentifiers(request, inputShape);
    var cacheKey = getCacheKey(request);
    if (Object.keys(identifiers).length > 0) {
      cacheKey = util.update(cacheKey, identifiers);
      if (operations[request.operation]) cacheKey.operation = operations[request.operation].name;
    }
    AWS.endpointCache.remove(cacheKey);
  }
}

/**
 * If endpoint is explicitly configured, SDK should not do endpoint discovery in anytime.
 * @param [object] client Service client object.
 * @api private
 */
function hasCustomEndpoint(client) {
  //if set endpoint is set for specific client, enable endpoint discovery will raise an error.
  if (client._originalConfig && client._originalConfig.endpoint && client._originalConfig.endpointDiscoveryEnabled === true) {
    throw util.error(new Error(), {
      code: 'ConfigurationException',
      message: 'Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.'
    });
  };
  var svcConfig = AWS.config[client.serviceIdentifier] || {};
  return Boolean(AWS.config.endpoint || svcConfig.endpoint || (client._originalConfig && client._originalConfig.endpoint));
}

/**
 * @api private
 */
function isFalsy(value) {
  return ['false', '0'].indexOf(value) >= 0;
}

/**
 * If endpoint discovery should perform for this request when endpoint discovery is optional.
 * SDK performs config resolution in order like below:
 * 1. If turned on client configuration(default to off) then turn on endpoint discovery.
 * 2. If turned on in env AWS_ENABLE_ENDPOINT_DISCOVERY then turn on endpoint discovery.
 * 3. If turned on in shared ini config file with key 'endpoint_discovery_enabled', then
 *   turn on endpoint discovery.
 * @param [object] request request object.
 * @api private
 */
function isEndpointDiscoveryApplicable(request) {
  var service = request.service || {};
  if (service.config.endpointDiscoveryEnabled === true) return true;

  //shared ini file is only available in Node
  //not to check env in browser
  if (util.isBrowser()) return false;

  for (var i = 0; i < endpointDiscoveryEnabledEnvs.length; i++) {
    var env = endpointDiscoveryEnabledEnvs[i];
    if (Object.prototype.hasOwnProperty.call(process.env, env)) {
      if (process.env[env] === '' || process.env[env] === undefined) {
        throw util.error(new Error(), {
          code: 'ConfigurationException',
          message: 'environmental variable ' + env + ' cannot be set to nothing'
        });
      }
      if (!isFalsy(process.env[env])) return true;
    }
  }

  var configFile = {};
  try {
    configFile = AWS.util.iniLoader ? AWS.util.iniLoader.loadFrom({
      isConfig: true,
      filename: process.env[AWS.util.sharedConfigFileEnv]
    }) : {};
  } catch (e) {}
  var sharedFileConfig = configFile[
    process.env.AWS_PROFILE || AWS.util.defaultProfile
  ] || {};
  if (Object.prototype.hasOwnProperty.call(sharedFileConfig, 'endpoint_discovery_enabled')) {
    if (sharedFileConfig.endpoint_discovery_enabled === undefined) {
      throw util.error(new Error(), {
        code: 'ConfigurationException',
        message: 'config file entry \'endpoint_discovery_enabled\' cannot be set to nothing'
      });
    }
    if (!isFalsy(sharedFileConfig.endpoint_discovery_enabled)) return true;
  }
  return false;
}

/**
 * attach endpoint discovery logic to request object
 * @param [object] request
 * @api private
 */
function discoverEndpoint(request, done) {
  var service = request.service || {};
  if (hasCustomEndpoint(service) || request.isPresigned()) return done();

  if (!isEndpointDiscoveryApplicable(request)) return done();

  request.httpRequest.appendToUserAgent('endpoint-discovery');

  var operations = service.api.operations || {};
  var operationModel = operations[request.operation];
  var isEndpointDiscoveryRequired = operationModel ? operationModel.endpointDiscoveryRequired : 'NULL';
  switch (isEndpointDiscoveryRequired) {
    case 'OPTIONAL':
      optionalDiscoverEndpoint(request);
      request.addNamedListener('INVALIDATE_CACHED_ENDPOINTS', 'extractError', invalidateCachedEndpoints);
      done();
      break;
    case 'REQUIRED':
      request.addNamedListener('INVALIDATE_CACHED_ENDPOINTS', 'extractError', invalidateCachedEndpoints);
      requiredDiscoverEndpoint(request, done);
      break;
    case 'NULL':
    default:
      done();
      break;
  }
}

module.exports = {
  discoverEndpoint: discoverEndpoint,
  requiredDiscoverEndpoint: requiredDiscoverEndpoint,
  optionalDiscoverEndpoint: optionalDiscoverEndpoint,
  marshallCustomIdentifiers: marshallCustomIdentifiers,
  getCacheKey: getCacheKey,
  invalidateCachedEndpoint: invalidateCachedEndpoints,
};

}).call(this,require('_process'))
},{"./core":29,"./util":90,"_process":113}],38:[function(require,module,exports){
var AWS = require('../core');
var util = AWS.util;
var typeOf = require('./types').typeOf;
var DynamoDBSet = require('./set');
var NumberValue = require('./numberValue');

AWS.DynamoDB.Converter = {
  /**
   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type
   *
   * @param data [any] The data to convert to a DynamoDB AttributeValue
   * @param options [map]
   * @option options convertEmptyValues [Boolean] Whether to automatically
   *                                              convert empty strings, blobs,
   *                                              and sets to `null`
   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
   *                                        NumberValue object instead of
   *                                        converting them to native JavaScript
   *                                        numbers. This allows for the safe
   *                                        round-trip transport of numbers of
   *                                        arbitrary size.
   * @return [map] An object in the Amazon DynamoDB AttributeValue format
   *
   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to
   *    convert entire records (rather than individual attributes)
   */
  input: function convertInput(data, options) {
    options = options || {};
    var type = typeOf(data);
    if (type === 'Object') {
      return formatMap(data, options);
    } else if (type === 'Array') {
      return formatList(data, options);
    } else if (type === 'Set') {
      return formatSet(data, options);
    } else if (type === 'String') {
      if (data.length === 0 && options.convertEmptyValues) {
        return convertInput(null);
      }
      return { S: data };
    } else if (type === 'Number' || type === 'NumberValue') {
      return { N: data.toString() };
    } else if (type === 'Binary') {
      if (data.length === 0 && options.convertEmptyValues) {
        return convertInput(null);
      }
      return { B: data };
    } else if (type === 'Boolean') {
      return { BOOL: data };
    } else if (type === 'null') {
      return { NULL: true };
    } else if (type !== 'undefined' && type !== 'Function') {
      // this value has a custom constructor
      return formatMap(data, options);
    }
  },

  /**
   * Convert a JavaScript object into a DynamoDB record.
   *
   * @param data [any] The data to convert to a DynamoDB record
   * @param options [map]
   * @option options convertEmptyValues [Boolean] Whether to automatically
   *                                              convert empty strings, blobs,
   *                                              and sets to `null`
   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
   *                                        NumberValue object instead of
   *                                        converting them to native JavaScript
   *                                        numbers. This allows for the safe
   *                                        round-trip transport of numbers of
   *                                        arbitrary size.
   *
   * @return [map] An object in the DynamoDB record format.
   *
   * @example Convert a JavaScript object into a DynamoDB record
   *  var marshalled = AWS.DynamoDB.Converter.marshall({
   *    string: 'foo',
   *    list: ['fizz', 'buzz', 'pop'],
   *    map: {
   *      nestedMap: {
   *        key: 'value',
   *      }
   *    },
   *    number: 123,
   *    nullValue: null,
   *    boolValue: true,
   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])
   *  });
   */
  marshall: function marshallItem(data, options) {
    return AWS.DynamoDB.Converter.input(data, options).M;
  },

  /**
   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.
   *
   * @param data [map] An object in the Amazon DynamoDB AttributeValue format
   * @param options [map]
   * @option options convertEmptyValues [Boolean] Whether to automatically
   *                                              convert empty strings, blobs,
   *                                              and sets to `null`
   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
   *                                        NumberValue object instead of
   *                                        converting them to native JavaScript
   *                                        numbers. This allows for the safe
   *                                        round-trip transport of numbers of
   *                                        arbitrary size.
   *
   * @return [Object|Array|String|Number|Boolean|null]
   *
   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to
   *    convert entire records (rather than individual attributes)
   */
  output: function convertOutput(data, options) {
    options = options || {};
    var list, map, i;
    for (var type in data) {
      var values = data[type];
      if (type === 'M') {
        map = {};
        for (var key in values) {
          map[key] = convertOutput(values[key], options);
        }
        return map;
      } else if (type === 'L') {
        list = [];
        for (i = 0; i < values.length; i++) {
          list.push(convertOutput(values[i], options));
        }
        return list;
      } else if (type === 'SS') {
        list = [];
        for (i = 0; i < values.length; i++) {
          list.push(values[i] + '');
        }
        return new DynamoDBSet(list);
      } else if (type === 'NS') {
        list = [];
        for (i = 0; i < values.length; i++) {
          list.push(convertNumber(values[i], options.wrapNumbers));
        }
        return new DynamoDBSet(list);
      } else if (type === 'BS') {
        list = [];
        for (i = 0; i < values.length; i++) {
          list.push(new util.Buffer(values[i]));
        }
        return new DynamoDBSet(list);
      } else if (type === 'S') {
        return values + '';
      } else if (type === 'N') {
        return convertNumber(values, options.wrapNumbers);
      } else if (type === 'B') {
        return new util.Buffer(values);
      } else if (type === 'BOOL') {
        return (values === 'true' || values === 'TRUE' || values === true);
      } else if (type === 'NULL') {
        return null;
      }
    }
  },

  /**
   * Convert a DynamoDB record into a JavaScript object.
   *
   * @param data [any] The DynamoDB record
   * @param options [map]
   * @option options convertEmptyValues [Boolean] Whether to automatically
   *                                              convert empty strings, blobs,
   *                                              and sets to `null`
   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
   *                                        NumberValue object instead of
   *                                        converting them to native JavaScript
   *                                        numbers. This allows for the safe
   *                                        round-trip transport of numbers of
   *                                        arbitrary size.
   *
   * @return [map] An object whose properties have been converted from
   *    DynamoDB's AttributeValue format into their corresponding native
   *    JavaScript types.
   *
   * @example Convert a record received from a DynamoDB stream
   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({
   *    string: {S: 'foo'},
   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},
   *    map: {
   *      M: {
   *        nestedMap: {
   *          M: {
   *            key: {S: 'value'}
   *          }
   *        }
   *      }
   *    },
   *    number: {N: '123'},
   *    nullValue: {NULL: true},
   *    boolValue: {BOOL: true}
   *  });
   */
  unmarshall: function unmarshall(data, options) {
    return AWS.DynamoDB.Converter.output({M: data}, options);
  }
};

/**
 * @api private
 * @param data [Array]
 * @param options [map]
 */
function formatList(data, options) {
  var list = {L: []};
  for (var i = 0; i < data.length; i++) {
    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));
  }
  return list;
}

/**
 * @api private
 * @param value [String]
 * @param wrapNumbers [Boolean]
 */
function convertNumber(value, wrapNumbers) {
  return wrapNumbers ? new NumberValue(value) : Number(value);
}

/**
 * @api private
 * @param data [map]
 * @param options [map]
 */
function formatMap(data, options) {
  var map = {M: {}};
  for (var key in data) {
    var formatted = AWS.DynamoDB.Converter.input(data[key], options);
    if (formatted !== void 0) {
      map['M'][key] = formatted;
    }
  }
  return map;
}

/**
 * @api private
 */
function formatSet(data, options) {
  options = options || {};
  var values = data.values;
  if (options.convertEmptyValues) {
    values = filterEmptySetValues(data);
    if (values.length === 0) {
      return AWS.DynamoDB.Converter.input(null);
    }
  }

  var map = {};
  switch (data.type) {
    case 'String': map['SS'] = values; break;
    case 'Binary': map['BS'] = values; break;
    case 'Number': map['NS'] = values.map(function (value) {
      return value.toString();
    });
  }
  return map;
}

/**
 * @api private
 */
function filterEmptySetValues(set) {
    var nonEmptyValues = [];
    var potentiallyEmptyTypes = {
        String: true,
        Binary: true,
        Number: false
    };
    if (potentiallyEmptyTypes[set.type]) {
        for (var i = 0; i < set.values.length; i++) {
            if (set.values[i].length === 0) {
                continue;
            }
            nonEmptyValues.push(set.values[i]);
        }

        return nonEmptyValues;
    }

    return set.values;
}

/**
 * @api private
 */
module.exports = AWS.DynamoDB.Converter;

},{"../core":29,"./numberValue":40,"./set":41,"./types":43}],39:[function(require,module,exports){
var AWS = require('../core');
var Translator = require('./translator');
var DynamoDBSet = require('./set');

/**
 * The document client simplifies working with items in Amazon DynamoDB
 * by abstracting away the notion of attribute values. This abstraction
 * annotates native JavaScript types supplied as input parameters, as well
 * as converts annotated response data to native JavaScript types.
 *
 * ## Marshalling Input and Unmarshalling Response Data
 *
 * The document client affords developers the use of native JavaScript types
 * instead of `AttributeValue`s to simplify the JavaScript development
 * experience with Amazon DynamoDB. JavaScript objects passed in as parameters
 * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.
 * Responses from DynamoDB are unmarshalled into plain JavaScript objects
 * by the `DocumentClient`. The `DocumentClient`, does not accept
 * `AttributeValue`s in favor of native JavaScript types.
 *
 * |                             JavaScript Type                            | DynamoDB AttributeValue |
 * |:----------------------------------------------------------------------:|-------------------------|
 * | String                                                                 | S                       |
 * | Number                                                                 | N                       |
 * | Boolean                                                                | BOOL                    |
 * | null                                                                   | NULL                    |
 * | Array                                                                  | L                       |
 * | Object                                                                 | M                       |
 * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |
 *
 * ## Support for Sets
 *
 * The `DocumentClient` offers a convenient way to create sets from
 * JavaScript Arrays. The type of set is inferred from the first element
 * in the array. DynamoDB supports string, number, and binary sets. To
 * learn more about supported types see the
 * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)
 * For more information see {AWS.DynamoDB.DocumentClient.createSet}
 *
 */
AWS.DynamoDB.DocumentClient = AWS.util.inherit({

  /**
   * Creates a DynamoDB document client with a set of configuration options.
   *
   * @option options params [map] An optional map of parameters to bind to every
   *   request sent by this service object.
   * @option options service [AWS.DynamoDB] An optional pre-configured instance
   *  of the AWS.DynamoDB service object to use for requests. The object may
   *  bound parameters used by the document client.
   * @option options convertEmptyValues [Boolean] set to true if you would like
   *  the document client to convert empty values (0-length strings, binary
   *  buffers, and sets) to be converted to NULL types when persisting to
   *  DynamoDB.
   * @see AWS.DynamoDB.constructor
   *
   */
  constructor: function DocumentClient(options) {
    var self = this;
    self.options = options || {};
    self.configure(self.options);
  },

  /**
   * @api private
   */
  configure: function configure(options) {
    var self = this;
    self.service = options.service;
    self.bindServiceObject(options);
    self.attrValue = options.attrValue =
      self.service.api.operations.putItem.input.members.Item.value.shape;
  },

  /**
   * @api private
   */
  bindServiceObject: function bindServiceObject(options) {
    var self = this;
    options = options || {};

    if (!self.service) {
      self.service = new AWS.DynamoDB(options);
    } else {
      var config = AWS.util.copy(self.service.config);
      self.service = new self.service.constructor.__super__(config);
      self.service.config.params =
        AWS.util.merge(self.service.config.params || {}, options.params);
    }
  },

  /**
   * @api private
   */
  makeServiceRequest: function(operation, params, callback) {
    var self = this;
    var request = self.service[operation](params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

  /**
   * @api private
   */
  serviceClientOperationsMap: {
    batchGet: 'batchGetItem',
    batchWrite: 'batchWriteItem',
    delete: 'deleteItem',
    get: 'getItem',
    put: 'putItem',
    query: 'query',
    scan: 'scan',
    update: 'updateItem',
    transactGet: 'transactGetItems',
    transactWrite: 'transactWriteItems'
  },

  /**
   * Returns the attributes of one or more items from one or more tables
   * by delegating to `AWS.DynamoDB.batchGetItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.batchGetItem
   * @example Get items from multiple tables
   *  var params = {
   *    RequestItems: {
   *      'Table-1': {
   *        Keys: [
   *          {
   *             HashKey: 'haskey',
   *             NumberRangeKey: 1
   *          }
   *        ]
   *      },
   *      'Table-2': {
   *        Keys: [
   *          { foo: 'bar' },
   *        ]
   *      }
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.batchGet(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  batchGet: function(params, callback) {
    var operation = this.serviceClientOperationsMap['batchGet'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Puts or deletes multiple items in one or more tables by delegating
   * to `AWS.DynamoDB.batchWriteItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.batchWriteItem
   * @example Write to and delete from a table
   *  var params = {
   *    RequestItems: {
   *      'Table-1': [
   *        {
   *          DeleteRequest: {
   *            Key: { HashKey: 'someKey' }
   *          }
   *        },
   *        {
   *          PutRequest: {
   *            Item: {
   *              HashKey: 'anotherKey',
   *              NumAttribute: 1,
   *              BoolAttribute: true,
   *              ListAttribute: [1, 'two', false],
   *              MapAttribute: { foo: 'bar' }
   *            }
   *          }
   *        }
   *      ]
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.batchWrite(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  batchWrite: function(params, callback) {
    var operation = this.serviceClientOperationsMap['batchWrite'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Deletes a single item in a table by primary key by delegating to
   * `AWS.DynamoDB.deleteItem()`
   *
   * Supply the same parameters as {AWS.DynamoDB.deleteItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.deleteItem
   * @example Delete an item from a table
   *  var params = {
   *    TableName : 'Table',
   *    Key: {
   *      HashKey: 'hashkey',
   *      NumberRangeKey: 1
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.delete(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  delete: function(params, callback) {
    var operation = this.serviceClientOperationsMap['delete'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Returns a set of attributes for the item with the given primary key
   * by delegating to `AWS.DynamoDB.getItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.getItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.getItem
   * @example Get an item from a table
   *  var params = {
   *    TableName : 'Table',
   *    Key: {
   *      HashKey: 'hashkey'
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.get(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  get: function(params, callback) {
    var operation = this.serviceClientOperationsMap['get'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Creates a new item, or replaces an old item with a new item by
   * delegating to `AWS.DynamoDB.putItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.putItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.putItem
   * @example Create a new item in a table
   *  var params = {
   *    TableName : 'Table',
   *    Item: {
   *       HashKey: 'haskey',
   *       NumAttribute: 1,
   *       BoolAttribute: true,
   *       ListAttribute: [1, 'two', false],
   *       MapAttribute: { foo: 'bar'},
   *       NullAttribute: null
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.put(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  put: function(params, callback) {
    var operation = this.serviceClientOperationsMap['put'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Edits an existing item's attributes, or adds a new item to the table if
   * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.updateItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.updateItem
   * @example Update an item with expressions
   *  var params = {
   *    TableName: 'Table',
   *    Key: { HashKey : 'hashkey' },
   *    UpdateExpression: 'set #a = :x + :y',
   *    ConditionExpression: '#a < :MAX',
   *    ExpressionAttributeNames: {'#a' : 'Sum'},
   *    ExpressionAttributeValues: {
   *      ':x' : 20,
   *      ':y' : 45,
   *      ':MAX' : 100,
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.update(params, function(err, data) {
   *     if (err) console.log(err);
   *     else console.log(data);
   *  });
   *
   */
  update: function(params, callback) {
    var operation = this.serviceClientOperationsMap['update'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Returns one or more items and item attributes by accessing every item
   * in a table or a secondary index.
   *
   * Supply the same parameters as {AWS.DynamoDB.scan} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.scan
   * @example Scan the table with a filter expression
   *  var params = {
   *    TableName : 'Table',
   *    FilterExpression : 'Year = :this_year',
   *    ExpressionAttributeValues : {':this_year' : 2015}
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.scan(params, function(err, data) {
   *     if (err) console.log(err);
   *     else console.log(data);
   *  });
   *
   */
  scan: function(params, callback) {
    var operation = this.serviceClientOperationsMap['scan'];
    return this.makeServiceRequest(operation, params, callback);
  },

   /**
    * Directly access items from a table by primary key or a secondary index.
    *
    * Supply the same parameters as {AWS.DynamoDB.query} with
    * `AttributeValue`s substituted by native JavaScript types.
    *
    * @see AWS.DynamoDB.query
    * @example Query an index
    *  var params = {
    *    TableName: 'Table',
    *    IndexName: 'Index',
    *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',
    *    ExpressionAttributeValues: {
    *      ':hkey': 'key',
    *      ':rkey': 2015
    *    }
    *  };
    *
    *  var documentClient = new AWS.DynamoDB.DocumentClient();
    *
    *  documentClient.query(params, function(err, data) {
    *     if (err) console.log(err);
    *     else console.log(data);
    *  });
    *
    */
  query: function(params, callback) {
    var operation = this.serviceClientOperationsMap['query'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Synchronous write operation that groups up to 10 action requests
   *
   * Supply the same parameters as {AWS.DynamoDB.transactWriteItems} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.transactWriteItems
   * @example Get items from multiple tables
   *  var params = {
   *    TransactItems: [{
   *      Put: {
   *        TableName : 'Table0',
   *        Item: {
   *          HashKey: 'haskey',
   *          NumAttribute: 1,
   *          BoolAttribute: true,
   *          ListAttribute: [1, 'two', false],
   *          MapAttribute: { foo: 'bar'},
   *          NullAttribute: null
   *        }
   *      }
   *    }, {
   *      Update: {
   *        TableName: 'Table1',
   *        Key: { HashKey : 'hashkey' },
   *        UpdateExpression: 'set #a = :x + :y',
   *        ConditionExpression: '#a < :MAX',
   *        ExpressionAttributeNames: {'#a' : 'Sum'},
   *        ExpressionAttributeValues: {
   *          ':x' : 20,
   *          ':y' : 45,
   *          ':MAX' : 100,
   *        }
   *      }
   *    }]
   *  };
   *
   *  documentClient.transactWrite(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   */
  transactWrite: function(params, callback) {
    var operation = this.serviceClientOperationsMap['transactWrite'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Atomically retrieves multiple items from one or more tables (but not from indexes)
   * in a single account and region.
   *
   * Supply the same parameters as {AWS.DynamoDB.transactGetItems} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.transactGetItems
   * @example Get items from multiple tables
   *  var params = {
   *    TransactItems: [{
   *      Get: {
   *        TableName : 'Table0',
   *        Key: {
   *          HashKey: 'hashkey0'
   *        }
   *      }
   *    }, {
   *      Get: {
   *        TableName : 'Table1',
   *        Key: {
   *          HashKey: 'hashkey1'
   *        }
   *      }
   *    }]
   *  };
   *
   *  documentClient.transactGet(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   */
  transactGet: function(params, callback) {
    var operation = this.serviceClientOperationsMap['transactGet'];
    return this.makeServiceRequest(operation, params, callback);
  },

  /**
   * Creates a set of elements inferring the type of set from
   * the type of the first element. Amazon DynamoDB currently supports
   * the number sets, string sets, and binary sets. For more information
   * about DynamoDB data types see the documentation on the
   * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).
   *
   * @param list [Array] Collection to represent your DynamoDB Set
   * @param options [map]
   *  * **validate** [Boolean] set to true if you want to validate the type
   *    of each element in the set. Defaults to `false`.
   * @example Creating a number set
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  var params = {
   *    Item: {
   *      hashkey: 'hashkey'
   *      numbers: documentClient.createSet([1, 2, 3]);
   *    }
   *  };
   *
   *  documentClient.put(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  createSet: function(list, options) {
    options = options || {};
    return new DynamoDBSet(list, options);
  },

  /**
   * @api private
   */
  getTranslator: function() {
    return new Translator(this.options);
  },

  /**
   * @api private
   */
  setupRequest: function setupRequest(request) {
    var self = this;
    var translator = self.getTranslator();
    var operation = request.operation;
    var inputShape = request.service.api.operations[operation].input;
    request._events.validate.unshift(function(req) {
      req.rawParams = AWS.util.copy(req.params);
      req.params = translator.translateInput(req.rawParams, inputShape);
    });
  },

  /**
   * @api private
   */
  setupResponse: function setupResponse(request) {
    var self = this;
    var translator = self.getTranslator();
    var outputShape = self.service.api.operations[request.operation].output;
    request.on('extractData', function(response) {
      response.data = translator.translateOutput(response.data, outputShape);
    });

    var response = request.response;
    response.nextPage = function(cb) {
      var resp = this;
      var req = resp.request;
      var config;
      var service = req.service;
      var operation = req.operation;
      try {
        config = service.paginationConfig(operation, true);
      } catch (e) { resp.error = e; }

      if (!resp.hasNextPage()) {
        if (cb) cb(resp.error, null);
        else if (resp.error) throw resp.error;
        return null;
      }

      var params = AWS.util.copy(req.rawParams);
      if (!resp.nextPageTokens) {
        return cb ? cb(null, null) : null;
      } else {
        var inputTokens = config.inputToken;
        if (typeof inputTokens === 'string') inputTokens = [inputTokens];
        for (var i = 0; i < inputTokens.length; i++) {
          params[inputTokens[i]] = resp.nextPageTokens[i];
        }
        return self[operation](params, cb);
      }
    };
  }

});

/**
 * @api private
 */
module.exports = AWS.DynamoDB.DocumentClient;

},{"../core":29,"./set":41,"./translator":42}],40:[function(require,module,exports){
var util = require('../core').util;

/**
 * An object recognizable as a numeric value that stores the underlying number
 * as a string.
 *
 * Intended to be a deserialization target for the DynamoDB Document Client when
 * the `wrapNumbers` flag is set. This allows for numeric values that lose
 * precision when converted to JavaScript's `number` type.
 */
var DynamoDBNumberValue = util.inherit({
  constructor: function NumberValue(value) {
    this.wrapperName = 'NumberValue';
    this.value = value.toString();
  },

  /**
   * Render the underlying value as a number when converting to JSON.
   */
  toJSON: function () {
    return this.toNumber();
  },

  /**
   * Convert the underlying value to a JavaScript number.
   */
  toNumber: function () {
    return Number(this.value);
  },

  /**
   * Return a string representing the unaltered value provided to the
   * constructor.
   */
  toString: function () {
    return this.value;
  }
});

/**
 * @api private
 */
module.exports = DynamoDBNumberValue;

},{"../core":29}],41:[function(require,module,exports){
var util = require('../core').util;
var typeOf = require('./types').typeOf;

/**
 * @api private
 */
var memberTypeToSetType = {
  'String': 'String',
  'Number': 'Number',
  'NumberValue': 'Number',
  'Binary': 'Binary'
};

/**
 * @api private
 */
var DynamoDBSet = util.inherit({

  constructor: function Set(list, options) {
    options = options || {};
    this.wrapperName = 'Set';
    this.initialize(list, options.validate);
  },

  initialize: function(list, validate) {
    var self = this;
    self.values = [].concat(list);
    self.detectType();
    if (validate) {
      self.validate();
    }
  },

  detectType: function() {
    this.type = memberTypeToSetType[typeOf(this.values[0])];
    if (!this.type) {
      throw util.error(new Error(), {
        code: 'InvalidSetType',
        message: 'Sets can contain string, number, or binary values'
      });
    }
  },

  validate: function() {
    var self = this;
    var length = self.values.length;
    var values = self.values;
    for (var i = 0; i < length; i++) {
      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {
        throw util.error(new Error(), {
          code: 'InvalidType',
          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'
        });
      }
    }
  }

});

/**
 * @api private
 */
module.exports = DynamoDBSet;

},{"../core":29,"./types":43}],42:[function(require,module,exports){
var util = require('../core').util;
var convert = require('./converter');

var Translator = function(options) {
  options = options || {};
  this.attrValue = options.attrValue;
  this.convertEmptyValues = Boolean(options.convertEmptyValues);
  this.wrapNumbers = Boolean(options.wrapNumbers);
};

Translator.prototype.translateInput = function(value, shape) {
  this.mode = 'input';
  return this.translate(value, shape);
};

Translator.prototype.translateOutput = function(value, shape) {
  this.mode = 'output';
  return this.translate(value, shape);
};

Translator.prototype.translate = function(value, shape) {
  var self = this;
  if (!shape || value === undefined) return undefined;

  if (shape.shape === self.attrValue) {
    return convert[self.mode](value, {
      convertEmptyValues: self.convertEmptyValues,
      wrapNumbers: self.wrapNumbers,
    });
  }
  switch (shape.type) {
    case 'structure': return self.translateStructure(value, shape);
    case 'map': return self.translateMap(value, shape);
    case 'list': return self.translateList(value, shape);
    default: return self.translateScalar(value, shape);
  }
};

Translator.prototype.translateStructure = function(structure, shape) {
  var self = this;
  if (structure == null) return undefined;

  var struct = {};
  util.each(structure, function(name, value) {
    var memberShape = shape.members[name];
    if (memberShape) {
      var result = self.translate(value, memberShape);
      if (result !== undefined) struct[name] = result;
    }
  });
  return struct;
};

Translator.prototype.translateList = function(list, shape) {
  var self = this;
  if (list == null) return undefined;

  var out = [];
  util.arrayEach(list, function(value) {
    var result = self.translate(value, shape.member);
    if (result === undefined) out.push(null);
    else out.push(result);
  });
  return out;
};

Translator.prototype.translateMap = function(map, shape) {
  var self = this;
  if (map == null) return undefined;

  var out = {};
  util.each(map, function(key, value) {
    var result = self.translate(value, shape.value);
    if (result === undefined) out[key] = null;
    else out[key] = result;
  });
  return out;
};

Translator.prototype.translateScalar = function(value, shape) {
  return shape.toType(value);
};

/**
 * @api private
 */
module.exports = Translator;

},{"../core":29,"./converter":38}],43:[function(require,module,exports){
var util = require('../core').util;

function typeOf(data) {
  if (data === null && typeof data === 'object') {
    return 'null';
  } else if (data !== undefined && isBinary(data)) {
    return 'Binary';
  } else if (data !== undefined && data.constructor) {
    return data.wrapperName || util.typeName(data.constructor);
  } else if (data !== undefined && typeof data === 'object') {
    // this object is the result of Object.create(null), hence the absence of a
    // defined constructor
    return 'Object';
  } else {
    return 'undefined';
  }
}

function isBinary(data) {
  var types = [
    'Buffer', 'File', 'Blob', 'ArrayBuffer', 'DataView',
    'Int8Array', 'Uint8Array', 'Uint8ClampedArray',
    'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array',
    'Float32Array', 'Float64Array'
  ];
  if (util.isNode()) {
    var Stream = util.stream.Stream;
    if (util.Buffer.isBuffer(data) || data instanceof Stream) {
      return true;
    }
  }

  for (var i = 0; i < types.length; i++) {
    if (data !== undefined && data.constructor) {
      if (util.isType(data, types[i])) return true;
      if (util.typeName(data.constructor) === types[i]) return true;
    }
  }

  return false;
}

/**
 * @api private
 */
module.exports = {
  typeOf: typeOf,
  isBinary: isBinary
};

},{"../core":29}],44:[function(require,module,exports){
var eventMessageChunker = require('../event-stream/event-message-chunker').eventMessageChunker;
var parseEvent = require('./parse-event').parseEvent;

function createEventStream(body, parser, model) {
    var eventMessages = eventMessageChunker(body);

    var events = [];

    for (var i = 0; i < eventMessages.length; i++) {
        events.push(parseEvent(parser, eventMessages[i], model));
    }

    return events;
}

/**
 * @api private
 */
module.exports = {
    createEventStream: createEventStream
};

},{"../event-stream/event-message-chunker":45,"./parse-event":47}],45:[function(require,module,exports){
/**
 * Takes in a buffer of event messages and splits them into individual messages.
 * @param {Buffer} buffer
 * @api private
 */
function eventMessageChunker(buffer) {
    /** @type Buffer[] */
    var messages = [];
    var offset = 0;

    while (offset < buffer.length) {
        var totalLength = buffer.readInt32BE(offset);

        // create new buffer for individual message (shares memory with original)
        var message = buffer.slice(offset, totalLength + offset);
        // increment offset to it starts at the next message
        offset += totalLength;

        messages.push(message);
    }

    return messages;
}

/**
 * @api private
 */
module.exports = {
    eventMessageChunker: eventMessageChunker
};

},{}],46:[function(require,module,exports){
var util = require('../core').util;
var toBuffer = require('./to-buffer').toBuffer;

/**
 * A lossless representation of a signed, 64-bit integer. Instances of this
 * class may be used in arithmetic expressions as if they were numeric
 * primitives, but the binary representation will be preserved unchanged as the
 * `bytes` property of the object. The bytes should be encoded as big-endian,
 * two's complement integers.
 * @param {Buffer} bytes
 *
 * @api private
 */
function Int64(bytes) {
    if (bytes.length !== 8) {
        throw new Error('Int64 buffers must be exactly 8 bytes');
    }
    if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);

    this.bytes = bytes;
}

/**
 * @param {number} number
 * @returns {Int64}
 *
 * @api private
 */
Int64.fromNumber = function(number) {
    if (number > 9223372036854775807 || number < -9223372036854775808) {
        throw new Error(
            number + ' is too large (or, if negative, too small) to represent as an Int64'
        );
    }

    var bytes = new Uint8Array(8);
    for (
        var i = 7, remaining = Math.abs(Math.round(number));
        i > -1 && remaining > 0;
        i--, remaining /= 256
    ) {
        bytes[i] = remaining;
    }

    if (number < 0) {
        negate(bytes);
    }

    return new Int64(bytes);
};

/**
 * @returns {number}
 *
 * @api private
 */
Int64.prototype.valueOf = function() {
    var bytes = this.bytes.slice(0);
    var negative = bytes[0] & 128;
    if (negative) {
        negate(bytes);
    }

    return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);
};

Int64.prototype.toString = function() {
    return String(this.valueOf());
};

/**
 * @param {Buffer} bytes
 *
 * @api private
 */
function negate(bytes) {
    for (var i = 0; i < 8; i++) {
        bytes[i] ^= 0xFF;
    }
    for (var i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0) {
            break;
        }
    }
}

/**
 * @api private
 */
module.exports = {
    Int64: Int64
};

},{"../core":29,"./to-buffer":50}],47:[function(require,module,exports){
var parseMessage = require('./parse-message').parseMessage;

/**
 *
 * @param {*} parser
 * @param {Buffer} message
 * @param {*} shape
 * @api private
 */
function parseEvent(parser, message, shape) {
    var parsedMessage = parseMessage(message);

    // check if message is an event or error
    var messageType = parsedMessage.headers[':message-type'];
    if (messageType) {
        if (messageType.value === 'error') {
            throw parseError(parsedMessage);
        } else if (messageType.value !== 'event') {
            // not sure how to parse non-events/non-errors, ignore for now
            return;
        }
    }

    // determine event type
    var eventType = parsedMessage.headers[':event-type'];
    // check that the event type is modeled
    var eventModel = shape.members[eventType.value];
    if (!eventModel) {
        return;
    }

    var result = {};
    // check if an event payload exists
    var eventPayloadMemberName = eventModel.eventPayloadMemberName;
    if (eventPayloadMemberName) {
        var payloadShape = eventModel.members[eventPayloadMemberName];
        // if the shape is binary, return the byte array
        if (payloadShape.type === 'binary') {
            result[eventPayloadMemberName] = parsedMessage.body;
        } else {
            result[eventPayloadMemberName] = parser.parse(parsedMessage.body.toString(), payloadShape);
        }
    }

    // read event headers
    var eventHeaderNames = eventModel.eventHeaderMemberNames;
    for (var i = 0; i < eventHeaderNames.length; i++) {
        var name = eventHeaderNames[i];
        if (parsedMessage.headers[name]) {
            // parse the header!
            result[name] = eventModel.members[name].toType(parsedMessage.headers[name].value);
        }
    }

    var output = {};
    output[eventType.value] = result;
    return output;
}

function parseError(message) {
    var errorCode = message.headers[':error-code'];
    var errorMessage = message.headers[':error-message'];
    var error = new Error(errorMessage.value || errorMessage);
    error.code = error.name = errorCode.value || errorCode;
    return error;
}

/**
 * @api private
 */
module.exports = {
    parseEvent: parseEvent
};

},{"./parse-message":48}],48:[function(require,module,exports){
var Int64 = require('./int64').Int64;

var splitMessage = require('./split-message').splitMessage;

var BOOLEAN_TAG = 'boolean';
var BYTE_TAG = 'byte';
var SHORT_TAG = 'short';
var INT_TAG = 'integer';
var LONG_TAG = 'long';
var BINARY_TAG = 'binary';
var STRING_TAG = 'string';
var TIMESTAMP_TAG = 'timestamp';
var UUID_TAG = 'uuid';

/**
 * @api private
 *
 * @param {Buffer} headers
 */
function parseHeaders(headers) {
    var out = {};
    var position = 0;
    while (position < headers.length) {
        var nameLength = headers.readUInt8(position++);
        var name = headers.slice(position, position + nameLength).toString();
        position += nameLength;
        switch (headers.readUInt8(position++)) {
            case 0 /* boolTrue */:
                out[name] = {
                    type: BOOLEAN_TAG,
                    value: true
                };
                break;
            case 1 /* boolFalse */:
                out[name] = {
                    type: BOOLEAN_TAG,
                    value: false
                };
                break;
            case 2 /* byte */:
                out[name] = {
                    type: BYTE_TAG,
                    value: headers.readInt8(position++)
                };
                break;
            case 3 /* short */:
                out[name] = {
                    type: SHORT_TAG,
                    value: headers.readInt16BE(position)
                };
                position += 2;
                break;
            case 4 /* integer */:
                out[name] = {
                    type: INT_TAG,
                    value: headers.readInt32BE(position)
                };
                position += 4;
                break;
            case 5 /* long */:
                out[name] = {
                    type: LONG_TAG,
                    value: new Int64(headers.slice(position, position + 8))
                };
                position += 8;
                break;
            case 6 /* byteArray */:
                var binaryLength = headers.readUInt16BE(position);
                position += 2;
                out[name] = {
                    type: BINARY_TAG,
                    value: headers.slice(position, position + binaryLength)
                };
                position += binaryLength;
                break;
            case 7 /* string */:
                var stringLength = headers.readUInt16BE(position);
                position += 2;
                out[name] = {
                    type: STRING_TAG,
                    value: headers.slice(
                        position,
                        position + stringLength
                    ).toString()
                };
                position += stringLength;
                break;
            case 8 /* timestamp */:
                out[name] = {
                    type: TIMESTAMP_TAG,
                    value: new Date(
                        new Int64(headers.slice(position, position + 8))
                            .valueOf()
                    )
                };
                position += 8;
                break;
            case 9 /* uuid */:
                var uuidChars = headers.slice(position, position + 16)
                    .toString('hex');
                position += 16;
                out[name] = {
                    type: UUID_TAG,
                    value: uuidChars.substr(0, 8) + '-' +
                        uuidChars.substr(8, 4) + '-' +
                        uuidChars.substr(12, 4) + '-' +
                        uuidChars.substr(16, 4) + '-' +
                        uuidChars.substr(20)
                };
                break;
            default:
                throw new Error('Unrecognized header type tag');
        }
    }
    return out;
}

function parseMessage(message) {
    var parsed = splitMessage(message);
    return { headers: parseHeaders(parsed.headers), body: parsed.body };
}

/**
 * @api private
 */
module.exports = {
    parseMessage: parseMessage
};

},{"./int64":46,"./split-message":49}],49:[function(require,module,exports){
var util = require('../core').util;
var toBuffer = require('./to-buffer').toBuffer;

// All prelude components are unsigned, 32-bit integers
var PRELUDE_MEMBER_LENGTH = 4;
// The prelude consists of two components
var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
// Checksums are always CRC32 hashes.
var CHECKSUM_LENGTH = 4;
// Messages must include a full prelude, a prelude checksum, and a message checksum
var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;

/**
 * @api private
 *
 * @param {Buffer} message
 */
function splitMessage(message) {
    if (!util.Buffer.isBuffer(message)) message = toBuffer(message);

    if (message.length < MINIMUM_MESSAGE_LENGTH) {
        throw new Error('Provided message too short to accommodate event stream message overhead');
    }

    if (message.length !== message.readUInt32BE(0)) {
        throw new Error('Reported message length does not match received message length');
    }

    var expectedPreludeChecksum = message.readUInt32BE(PRELUDE_LENGTH);

    if (
        expectedPreludeChecksum !== util.crypto.crc32(
            message.slice(0, PRELUDE_LENGTH)
        )
    ) {
        throw new Error(
            'The prelude checksum specified in the message (' +
            expectedPreludeChecksum +
            ') does not match the calculated CRC32 checksum.'
        );
    }

    var expectedMessageChecksum = message.readUInt32BE(message.length - CHECKSUM_LENGTH);

    if (
        expectedMessageChecksum !== util.crypto.crc32(
            message.slice(0, message.length - CHECKSUM_LENGTH)
        )
    ) {
        throw new Error(
            'The message checksum did not match the expected value of ' +
                expectedMessageChecksum
        );
    }

    var headersStart = PRELUDE_LENGTH + CHECKSUM_LENGTH;
    var headersEnd = headersStart + message.readUInt32BE(PRELUDE_MEMBER_LENGTH);

    return {
        headers: message.slice(headersStart, headersEnd),
        body: message.slice(headersEnd, message.length - CHECKSUM_LENGTH),
    };
}

/**
 * @api private
 */
module.exports = {
    splitMessage: splitMessage
};

},{"../core":29,"./to-buffer":50}],50:[function(require,module,exports){
var Buffer = require('../core').util.Buffer;
/**
 * Converts data into Buffer.
 * @param {ArrayBuffer|string|number[]|Buffer} data Data to convert to a Buffer
 * @param {string} [encoding] String encoding
 * @returns {Buffer}
 */
function toBuffer(data, encoding) {
    return (typeof Buffer.from === 'function' && Buffer.from !== Uint8Array.from) ?
        Buffer.from(data, encoding) : new Buffer(data, encoding);
}

/**
 * @api private
 */
module.exports = {
    toBuffer: toBuffer
};

},{"../core":29}],51:[function(require,module,exports){
var AWS = require('./core');
var SequentialExecutor = require('./sequential_executor');
var DISCOVER_ENDPOINT = require('./discover_endpoint').discoverEndpoint;
/**
 * The namespace used to register global event listeners for request building
 * and sending.
 */
AWS.EventListeners = {
  /**
   * @!attribute VALIDATE_CREDENTIALS
   *   A request listener that validates whether the request is being
   *   sent with credentials.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating credentials
   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;
   *     request.removeListener('validate', listener);
   *   @readonly
   *   @return [Function]
   * @!attribute VALIDATE_REGION
   *   A request listener that validates whether the region is set
   *   for a request.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating region configuration
   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;
   *     request.removeListener('validate', listener);
   *   @readonly
   *   @return [Function]
   * @!attribute VALIDATE_PARAMETERS
   *   A request listener that validates input parameters in a request.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating parameters
   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;
   *     request.removeListener('validate', listener);
   *   @example Disable parameter validation globally
   *     AWS.EventListeners.Core.removeListener('validate',
   *       AWS.EventListeners.Core.VALIDATE_REGION);
   *   @readonly
   *   @return [Function]
   * @!attribute SEND
   *   A request listener that initiates the HTTP connection for a
   *   request being sent. Handles the {AWS.Request~send 'send' Request event}
   *   @example Replacing the HTTP handler
   *     var listener = AWS.EventListeners.Core.SEND;
   *     request.removeListener('send', listener);
   *     request.on('send', function(response) {
   *       customHandler.send(response);
   *     });
   *   @return [Function]
   *   @readonly
   * @!attribute HTTP_DATA
   *   A request listener that reads data from the HTTP connection in order
   *   to build the response data.
   *   Handles the {AWS.Request~httpData 'httpData' Request event}.
   *   Remove this handler if you are overriding the 'httpData' event and
   *   do not want extra data processing and buffering overhead.
   *   @example Disabling default data processing
   *     var listener = AWS.EventListeners.Core.HTTP_DATA;
   *     request.removeListener('httpData', listener);
   *   @return [Function]
   *   @readonly
   */
  Core: {} /* doc hack */
};

/**
 * @api private
 */
function getOperationAuthtype(req) {
  if (!req.service.api.operations) {
    return '';
  }
  var operation = req.service.api.operations[req.operation];
  return operation ? operation.authtype : '';
}

AWS.EventListeners = {
  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {
    addAsync('VALIDATE_CREDENTIALS', 'validate',
        function VALIDATE_CREDENTIALS(req, done) {
      if (!req.service.api.signatureVersion) return done(); // none
      req.service.config.getCredentials(function(err) {
        if (err) {
          req.response.error = AWS.util.error(err,
            {code: 'CredentialsError', message: 'Missing credentials in config'});
        }
        done();
      });
    });

    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {
      if (!req.service.config.region && !req.service.isGlobalEndpoint) {
        req.response.error = AWS.util.error(new Error(),
          {code: 'ConfigError', message: 'Missing region in config'});
      }
    });

    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {
      if (!req.service.api.operations) {
        return;
      }
      var operation = req.service.api.operations[req.operation];
      if (!operation) {
        return;
      }
      var idempotentMembers = operation.idempotentMembers;
      if (!idempotentMembers.length) {
        return;
      }
      // creates a copy of params so user's param object isn't mutated
      var params = AWS.util.copy(req.params);
      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
        if (!params[idempotentMembers[i]]) {
          // add the member
          params[idempotentMembers[i]] = AWS.util.uuid.v4();
        }
      }
      req.params = params;
    });

    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {
      if (!req.service.api.operations) {
        return;
      }
      var rules = req.service.api.operations[req.operation].input;
      var validation = req.service.config.paramValidation;
      new AWS.ParamValidator(validation).validate(rules, req.params);
    });

    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {
      req.haltHandlersOnError();
      if (!req.service.api.operations) {
        return;
      }
      var operation = req.service.api.operations[req.operation];
      var authtype = operation ? operation.authtype : '';
      if (!req.service.api.signatureVersion && !authtype) return done(); // none
      if (req.service.getSignerClass(req) === AWS.Signers.V4) {
        var body = req.httpRequest.body || '';
        if (authtype.indexOf('unsigned-body') >= 0) {
          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';
          return done();
        }
        AWS.util.computeSha256(body, function(err, sha) {
          if (err) {
            done(err);
          }
          else {
            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;
            done();
          }
        });
      } else {
        done();
      }
    });

    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {
      var authtype = getOperationAuthtype(req);
      if (req.httpRequest.headers['Content-Length'] === undefined) {
        try {
          var length = AWS.util.string.byteLength(req.httpRequest.body);
          req.httpRequest.headers['Content-Length'] = length;
        } catch (err) {
          if (authtype.indexOf('unsigned-body') === -1) {
            throw err;
          } else {
            // Body isn't signed and may not need content length (lex)
            return;
          }
        }
      }
    });

    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {
      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;
    });

    add('RESTART', 'restart', function RESTART() {
      var err = this.response.error;
      if (!err || !err.retryable) return;

      this.httpRequest = new AWS.HttpRequest(
        this.service.endpoint,
        this.service.region
      );

      if (this.response.retryCount < this.service.config.maxRetries) {
        this.response.retryCount++;
      } else {
        this.response.error = null;
      }
    });

    var addToHead = true;
    addAsync('DISCOVER_ENDPOINT', 'sign', DISCOVER_ENDPOINT, addToHead);

    addAsync('SIGN', 'sign', function SIGN(req, done) {
      var service = req.service;
      var operations = req.service.api.operations || {};
      var operation = operations[req.operation];
      var authtype = operation ? operation.authtype : '';
      if (!service.api.signatureVersion && !authtype) return done(); // none

      service.config.getCredentials(function (err, credentials) {
        if (err) {
          req.response.error = err;
          return done();
        }

        try {
          var date = service.getSkewCorrectedDate();
          var SignerClass = service.getSignerClass(req);
          var signer = new SignerClass(req.httpRequest,
            service.api.signingName || service.api.endpointPrefix,
            {
              signatureCache: service.config.signatureCache,
              operation: operation,
              signatureVersion: service.api.signatureVersion
            });
          signer.setServiceClientId(service._clientId);

          // clear old authorization headers
          delete req.httpRequest.headers['Authorization'];
          delete req.httpRequest.headers['Date'];
          delete req.httpRequest.headers['X-Amz-Date'];

          // add new authorization
          signer.addAuthorization(credentials, date);
          req.signedAt = date;
        } catch (e) {
          req.response.error = e;
        }
        done();
      });
    });

    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {
      if (this.service.successfulResponse(resp, this)) {
        resp.data = {};
        resp.error = null;
      } else {
        resp.data = null;
        resp.error = AWS.util.error(new Error(),
          {code: 'UnknownError', message: 'An unknown error occurred.'});
      }
    });

    addAsync('SEND', 'send', function SEND(resp, done) {
      resp.httpResponse._abortCallback = done;
      resp.error = null;
      resp.data = null;

      function callback(httpResp) {
        resp.httpResponse.stream = httpResp;
        var stream = resp.request.httpRequest.stream;
        var service = resp.request.service;
        var api = service.api;
        var operationName = resp.request.operation;
        var operation = api.operations[operationName] || {};

        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {
          resp.request.emit(
            'httpHeaders',
            [statusCode, headers, resp, statusMessage]
          );

          if (!resp.httpResponse.streaming) {
            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check
              // if we detect event streams, we're going to have to
              // return the stream immediately
              if (operation.hasEventOutput && service.successfulResponse(resp)) {
                // skip reading the IncomingStream
                resp.request.emit('httpDone');
                done();
                return;
              }

              httpResp.on('readable', function onReadable() {
                var data = httpResp.read();
                if (data !== null) {
                  resp.request.emit('httpData', [data, resp]);
                }
              });
            } else { // legacy streams API
              httpResp.on('data', function onData(data) {
                resp.request.emit('httpData', [data, resp]);
              });
            }
          }
        });

        httpResp.on('end', function onEnd() {
          if (!stream || !stream.didCallback) {
            if (AWS.HttpClient.streamsApiVersion === 2 && (operation.hasEventOutput && service.successfulResponse(resp))) {
              // don't concatenate response chunks when streaming event stream data when response is successful
              return;
            }
            resp.request.emit('httpDone');
            done();
          }
        });
      }

      function progress(httpResp) {
        httpResp.on('sendProgress', function onSendProgress(value) {
          resp.request.emit('httpUploadProgress', [value, resp]);
        });

        httpResp.on('receiveProgress', function onReceiveProgress(value) {
          resp.request.emit('httpDownloadProgress', [value, resp]);
        });
      }

      function error(err) {
        if (err.code !== 'RequestAbortedError') {
          var errCode = err.code === 'TimeoutError' ? err.code : 'NetworkingError';
          err = AWS.util.error(err, {
            code: errCode,
            region: resp.request.httpRequest.region,
            hostname: resp.request.httpRequest.endpoint.hostname,
            retryable: true
          });
        }
        resp.error = err;
        resp.request.emit('httpError', [resp.error, resp], function() {
          done();
        });
      }

      function executeSend() {
        var http = AWS.HttpClient.getInstance();
        var httpOptions = resp.request.service.config.httpOptions || {};
        try {
          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,
                                          callback, error);
          progress(stream);
        } catch (err) {
          error(err);
        }
      }
      var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;
      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign
        this.emit('sign', [this], function(err) {
          if (err) done(err);
          else executeSend();
        });
      } else {
        executeSend();
      }
    });

    add('HTTP_HEADERS', 'httpHeaders',
        function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
      resp.httpResponse.statusCode = statusCode;
      resp.httpResponse.statusMessage = statusMessage;
      resp.httpResponse.headers = headers;
      resp.httpResponse.body = new AWS.util.Buffer('');
      resp.httpResponse.buffers = [];
      resp.httpResponse.numBytes = 0;
      var dateHeader = headers.date || headers.Date;
      var service = resp.request.service;
      if (dateHeader) {
        var serverTime = Date.parse(dateHeader);
        if (service.config.correctClockSkew
            && service.isClockSkewed(serverTime)) {
          service.applyClockOffset(serverTime);
        }
      }
    });

    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {
      if (chunk) {
        if (AWS.util.isNode()) {
          resp.httpResponse.numBytes += chunk.length;

          var total = resp.httpResponse.headers['content-length'];
          var progress = { loaded: resp.httpResponse.numBytes, total: total };
          resp.request.emit('httpDownloadProgress', [progress, resp]);
        }

        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));
      }
    });

    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {
      // convert buffers array into single buffer
      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
        resp.httpResponse.body = body;
      }
      delete resp.httpResponse.numBytes;
      delete resp.httpResponse.buffers;
    });

    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {
      if (resp.httpResponse.statusCode) {
        resp.error.statusCode = resp.httpResponse.statusCode;
        if (resp.error.retryable === undefined) {
          resp.error.retryable = this.service.retryableError(resp.error, this);
        }
      }
    });

    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {
      if (!resp.error) return;
      switch (resp.error.code) {
        case 'RequestExpired': // EC2 only
        case 'ExpiredTokenException':
        case 'ExpiredToken':
          resp.error.retryable = true;
          resp.request.service.config.credentials.expired = true;
      }
    });

    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {
      var err = resp.error;
      if (!err) return;
      if (typeof err.code === 'string' && typeof err.message === 'string') {
        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
          resp.error.retryable = true;
        }
      }
    });

    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {
      if (!resp.error) return;
      if (this.service.clockSkewError(resp.error)
          && this.service.config.correctClockSkew) {
        resp.error.retryable = true;
      }
    });

    add('REDIRECT', 'retry', function REDIRECT(resp) {
      if (resp.error && resp.error.statusCode >= 300 &&
          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {
        this.httpRequest.endpoint =
          new AWS.Endpoint(resp.httpResponse.headers['location']);
        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;
        resp.error.redirect = true;
        resp.error.retryable = true;
      }
    });

    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {
      if (resp.error) {
        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
          resp.error.retryDelay = 0;
        } else if (resp.retryCount < resp.maxRetries) {
          resp.error.retryDelay = this.service.retryDelays(resp.retryCount) || 0;
        }
      }
    });

    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {
      var delay, willRetry = false;

      if (resp.error) {
        delay = resp.error.retryDelay || 0;
        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
          resp.retryCount++;
          willRetry = true;
        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
          resp.redirectCount++;
          willRetry = true;
        }
      }

      if (willRetry) {
        resp.error = null;
        setTimeout(done, delay);
      } else {
        done();
      }
    });
  }),

  CorePost: new SequentialExecutor().addNamedListeners(function(add) {
    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);
    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);

    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {
      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {
        var message = 'Inaccessible host: `' + err.hostname +
          '\'. This service may not be available in the `' + err.region +
          '\' region.';
        this.response.error = AWS.util.error(new Error(message), {
          code: 'UnknownEndpoint',
          region: err.region,
          hostname: err.hostname,
          retryable: true,
          originalError: err
        });
      }
    });
  }),

  Logger: new SequentialExecutor().addNamedListeners(function(add) {
    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {
      var req = resp.request;
      var logger = req.service.config.logger;
      if (!logger) return;
      function filterSensitiveLog(inputShape, shape) {
        if (!shape) {
          return shape;
        }
        switch (inputShape.type) {
          case 'structure':
            var struct = {};
            AWS.util.each(shape, function(subShapeName, subShape) {
              if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {
                struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);
              } else {
                struct[subShapeName] = subShape;
              }
            });
            return struct;
          case 'list':
            var list = [];
            AWS.util.arrayEach(shape, function(subShape, index) {
              list.push(filterSensitiveLog(inputShape.member, subShape));
            });
            return list;
          case 'map':
            var map = {};
            AWS.util.each(shape, function(key, value) {
              map[key] = filterSensitiveLog(inputShape.value, value);
            });
            return map;
          default:
            if (inputShape.isSensitive) {
              return '***SensitiveInformation***';
            } else {
              return shape;
            }
        }
      }

      function buildMessage() {
        var time = resp.request.service.getSkewCorrectedDate().getTime();
        var delta = (time - req.startTime.getTime()) / 1000;
        var ansi = logger.isTTY ? true : false;
        var status = resp.httpResponse.statusCode;
        var censoredParams = req.params;
        if (
          req.service.api.operations &&
              req.service.api.operations[req.operation] &&
              req.service.api.operations[req.operation].input
        ) {
          var inputShape = req.service.api.operations[req.operation].input;
          censoredParams = filterSensitiveLog(inputShape, req.params);
        }
        var params = require('util').inspect(censoredParams, true, null);
        var message = '';
        if (ansi) message += '\x1B[33m';
        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;
        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';
        if (ansi) message += '\x1B[0;1m';
        message += ' ' + AWS.util.string.lowerFirst(req.operation);
        message += '(' + params + ')';
        if (ansi) message += '\x1B[0m';
        return message;
      }

      var line = buildMessage();
      if (typeof logger.log === 'function') {
        logger.log(line);
      } else if (typeof logger.write === 'function') {
        logger.write(line + '\n');
      }
    });
  }),

  Json: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = require('./protocol/json');
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  Rest: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = require('./protocol/rest');
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  RestJson: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = require('./protocol/rest_json');
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  RestXml: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = require('./protocol/rest_xml');
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  Query: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = require('./protocol/query');
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  })
};

},{"./core":29,"./discover_endpoint":37,"./protocol/json":64,"./protocol/query":65,"./protocol/rest":66,"./protocol/rest_json":67,"./protocol/rest_xml":68,"./sequential_executor":76,"util":142}],52:[function(require,module,exports){
var AWS = require('./core');
var inherit = AWS.util.inherit;

/**
 * The endpoint that a service will talk to, for example,
 * `'https://ec2.ap-southeast-1.amazonaws.com'`. If
 * you need to override an endpoint for a service, you can
 * set the endpoint on a service by passing the endpoint
 * object with the `endpoint` option key:
 *
 * ```javascript
 * var ep = new AWS.Endpoint('awsproxy.example.com');
 * var s3 = new AWS.S3({endpoint: ep});
 * s3.service.endpoint.hostname == 'awsproxy.example.com'
 * ```
 *
 * Note that if you do not specify a protocol, the protocol will
 * be selected based on your current {AWS.config} configuration.
 *
 * @!attribute protocol
 *   @return [String] the protocol (http or https) of the endpoint
 *     URL
 * @!attribute hostname
 *   @return [String] the host portion of the endpoint, e.g.,
 *     example.com
 * @!attribute host
 *   @return [String] the host portion of the endpoint including
 *     the port, e.g., example.com:80
 * @!attribute port
 *   @return [Integer] the port of the endpoint
 * @!attribute href
 *   @return [String] the full URL of the endpoint
 */
AWS.Endpoint = inherit({

  /**
   * @overload Endpoint(endpoint)
   *   Constructs a new endpoint given an endpoint URL. If the
   *   URL omits a protocol (http or https), the default protocol
   *   set in the global {AWS.config} will be used.
   *   @param endpoint [String] the URL to construct an endpoint from
   */
  constructor: function Endpoint(endpoint, config) {
    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);

    if (typeof endpoint === 'undefined' || endpoint === null) {
      throw new Error('Invalid endpoint: ' + endpoint);
    } else if (typeof endpoint !== 'string') {
      return AWS.util.copy(endpoint);
    }

    if (!endpoint.match(/^http/)) {
      var useSSL = config && config.sslEnabled !== undefined ?
        config.sslEnabled : AWS.config.sslEnabled;
      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;
    }

    AWS.util.update(this, AWS.util.urlParse(endpoint));

    // Ensure the port property is set as an integer
    if (this.port) {
      this.port = parseInt(this.port, 10);
    } else {
      this.port = this.protocol === 'https:' ? 443 : 80;
    }
  }

});

/**
 * The low level HTTP request object, encapsulating all HTTP header
 * and body data sent by a service request.
 *
 * @!attribute method
 *   @return [String] the HTTP method of the request
 * @!attribute path
 *   @return [String] the path portion of the URI, e.g.,
 *     "/list/?start=5&num=10"
 * @!attribute headers
 *   @return [map<String,String>]
 *     a map of header keys and their respective values
 * @!attribute body
 *   @return [String] the request body payload
 * @!attribute endpoint
 *   @return [AWS.Endpoint] the endpoint for the request
 * @!attribute region
 *   @api private
 *   @return [String] the region, for signing purposes only.
 */
AWS.HttpRequest = inherit({

  /**
   * @api private
   */
  constructor: function HttpRequest(endpoint, region) {
    endpoint = new AWS.Endpoint(endpoint);
    this.method = 'POST';
    this.path = endpoint.path || '/';
    this.headers = {};
    this.body = '';
    this.endpoint = endpoint;
    this.region = region;
    this._userAgent = '';
    this.setUserAgent();
  },

  /**
   * @api private
   */
  setUserAgent: function setUserAgent() {
    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();
  },

  getUserAgentHeaderName: function getUserAgentHeaderName() {
    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';
    return prefix + 'User-Agent';
  },

  /**
   * @api private
   */
  appendToUserAgent: function appendToUserAgent(agentPartial) {
    if (typeof agentPartial === 'string' && agentPartial) {
      this._userAgent += ' ' + agentPartial;
    }
    this.headers[this.getUserAgentHeaderName()] = this._userAgent;
  },

  /**
   * @api private
   */
  getUserAgent: function getUserAgent() {
    return this._userAgent;
  },

  /**
   * @return [String] the part of the {path} excluding the
   *   query string
   */
  pathname: function pathname() {
    return this.path.split('?', 1)[0];
  },

  /**
   * @return [String] the query string portion of the {path}
   */
  search: function search() {
    var query = this.path.split('?', 2)[1];
    if (query) {
      query = AWS.util.queryStringParse(query);
      return AWS.util.queryParamsToString(query);
    }
    return '';
  },

  /**
   * @api private
   * update httpRequest endpoint with endpoint string
   */
  updateEndpoint: function updateEndpoint(endpointStr) {
    var newEndpoint = new AWS.Endpoint(endpointStr);
    this.endpoint = newEndpoint;
    this.path = newEndpoint.path || '/';
  }
});

/**
 * The low level HTTP response object, encapsulating all HTTP header
 * and body data returned from the request.
 *
 * @!attribute statusCode
 *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)
 * @!attribute headers
 *   @return [map<String,String>]
 *      a map of response header keys and their respective values
 * @!attribute body
 *   @return [String] the response body payload
 * @!attribute [r] streaming
 *   @return [Boolean] whether this response is being streamed at a low-level.
 *     Defaults to `false` (buffered reads). Do not modify this manually, use
 *     {createUnbufferedStream} to convert the stream to unbuffered mode
 *     instead.
 */
AWS.HttpResponse = inherit({

  /**
   * @api private
   */
  constructor: function HttpResponse() {
    this.statusCode = undefined;
    this.headers = {};
    this.body = undefined;
    this.streaming = false;
    this.stream = null;
  },

  /**
   * Disables buffering on the HTTP response and returns the stream for reading.
   * @return [Stream, XMLHttpRequest, null] the underlying stream object.
   *   Use this object to directly read data off of the stream.
   * @note This object is only available after the {AWS.Request~httpHeaders}
   *   event has fired. This method must be called prior to
   *   {AWS.Request~httpData}.
   * @example Taking control of a stream
   *   request.on('httpHeaders', function(statusCode, headers) {
   *     if (statusCode < 300) {
   *       if (headers.etag === 'xyz') {
   *         // pipe the stream, disabling buffering
   *         var stream = this.response.httpResponse.createUnbufferedStream();
   *         stream.pipe(process.stdout);
   *       } else { // abort this request and set a better error message
   *         this.abort();
   *         this.response.error = new Error('Invalid ETag');
   *       }
   *     }
   *   }).send(console.log);
   */
  createUnbufferedStream: function createUnbufferedStream() {
    this.streaming = true;
    return this.stream;
  }
});


AWS.HttpClient = inherit({});

/**
 * @api private
 */
AWS.HttpClient.getInstance = function getInstance() {
  if (this.singleton === undefined) {
    this.singleton = new this();
  }
  return this.singleton;
};

},{"./core":29}],53:[function(require,module,exports){
var AWS = require('../core');
var EventEmitter = require('events').EventEmitter;
require('../http');

/**
 * @api private
 */
AWS.XHRClient = AWS.util.inherit({
  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {
    var self = this;
    var endpoint = httpRequest.endpoint;
    var emitter = new EventEmitter();
    var href = endpoint.protocol + '//' + endpoint.hostname;
    if (endpoint.port !== 80 && endpoint.port !== 443) {
      href += ':' + endpoint.port;
    }
    href += httpRequest.path;

    var xhr = new XMLHttpRequest(), headersEmitted = false;
    httpRequest.stream = xhr;

    xhr.addEventListener('readystatechange', function() {
      try {
        if (xhr.status === 0) return; // 0 code is invalid
      } catch (e) { return; }

      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {
        emitter.statusCode = xhr.status;
        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());
        emitter.emit(
          'headers',
          emitter.statusCode,
          emitter.headers,
          xhr.statusText
        );
        headersEmitted = true;
      }
      if (this.readyState === this.DONE) {
        self.finishRequest(xhr, emitter);
      }
    }, false);
    xhr.upload.addEventListener('progress', function (evt) {
      emitter.emit('sendProgress', evt);
    });
    xhr.addEventListener('progress', function (evt) {
      emitter.emit('receiveProgress', evt);
    }, false);
    xhr.addEventListener('timeout', function () {
      errCallback(AWS.util.error(new Error('Timeout'), {code: 'TimeoutError'}));
    }, false);
    xhr.addEventListener('error', function () {
      errCallback(AWS.util.error(new Error('Network Failure'), {
        code: 'NetworkingError'
      }));
    }, false);
    xhr.addEventListener('abort', function () {
      errCallback(AWS.util.error(new Error('Request aborted'), {
        code: 'RequestAbortedError'
      }));
    }, false);

    callback(emitter);
    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);
    AWS.util.each(httpRequest.headers, function (key, value) {
      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host') {
        xhr.setRequestHeader(key, value);
      }
    });

    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {
      xhr.timeout = httpOptions.timeout;
    }

    if (httpOptions.xhrWithCredentials) {
      xhr.withCredentials = true;
    }
    try { xhr.responseType = 'arraybuffer'; } catch (e) {}

    try {
      if (httpRequest.body) {
        xhr.send(httpRequest.body);
      } else {
        xhr.send();
      }
    } catch (err) {
      if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {
        xhr.send(httpRequest.body.buffer); // send ArrayBuffer directly
      } else {
        throw err;
      }
    }

    return emitter;
  },

  parseHeaders: function parseHeaders(rawHeaders) {
    var headers = {};
    AWS.util.arrayEach(rawHeaders.split(/\r?\n/), function (line) {
      var key = line.split(':', 1)[0];
      var value = line.substring(key.length + 2);
      if (key.length > 0) headers[key.toLowerCase()] = value;
    });
    return headers;
  },

  finishRequest: function finishRequest(xhr, emitter) {
    var buffer;
    if (xhr.responseType === 'arraybuffer' && xhr.response) {
      var ab = xhr.response;
      buffer = new AWS.util.Buffer(ab.byteLength);
      var view = new Uint8Array(ab);
      for (var i = 0; i < buffer.length; ++i) {
        buffer[i] = view[i];
      }
    }

    try {
      if (!buffer && typeof xhr.responseText === 'string') {
        buffer = new AWS.util.Buffer(xhr.responseText);
      }
    } catch (e) {}

    if (buffer) emitter.emit('data', buffer);
    emitter.emit('end');
  }
});

/**
 * @api private
 */
AWS.HttpClient.prototype = AWS.XHRClient.prototype;

/**
 * @api private
 */
AWS.HttpClient.streamsApiVersion = 1;

},{"../core":29,"../http":52,"events":105}],54:[function(require,module,exports){
var util = require('../util');

function JsonBuilder() { }

JsonBuilder.prototype.build = function(value, shape) {
  return JSON.stringify(translate(value, shape));
};

function translate(value, shape) {
  if (!shape || value === undefined || value === null) return undefined;

  switch (shape.type) {
    case 'structure': return translateStructure(value, shape);
    case 'map': return translateMap(value, shape);
    case 'list': return translateList(value, shape);
    default: return translateScalar(value, shape);
  }
}

function translateStructure(structure, shape) {
  var struct = {};
  util.each(structure, function(name, value) {
    var memberShape = shape.members[name];
    if (memberShape) {
      if (memberShape.location !== 'body') return;
      var locationName = memberShape.isLocationName ? memberShape.name : name;
      var result = translate(value, memberShape);
      if (result !== undefined) struct[locationName] = result;
    }
  });
  return struct;
}

function translateList(list, shape) {
  var out = [];
  util.arrayEach(list, function(value) {
    var result = translate(value, shape.member);
    if (result !== undefined) out.push(result);
  });
  return out;
}

function translateMap(map, shape) {
  var out = {};
  util.each(map, function(key, value) {
    var result = translate(value, shape.value);
    if (result !== undefined) out[key] = result;
  });
  return out;
}

function translateScalar(value, shape) {
  return shape.toWireFormat(value);
}

/**
 * @api private
 */
module.exports = JsonBuilder;

},{"../util":90}],55:[function(require,module,exports){
var util = require('../util');

function JsonParser() { }

JsonParser.prototype.parse = function(value, shape) {
  return translate(JSON.parse(value), shape);
};

function translate(value, shape) {
  if (!shape || value === undefined) return undefined;

  switch (shape.type) {
    case 'structure': return translateStructure(value, shape);
    case 'map': return translateMap(value, shape);
    case 'list': return translateList(value, shape);
    default: return translateScalar(value, shape);
  }
}

function translateStructure(structure, shape) {
  if (structure == null) return undefined;

  var struct = {};
  var shapeMembers = shape.members;
  util.each(shapeMembers, function(name, memberShape) {
    var locationName = memberShape.isLocationName ? memberShape.name : name;
    if (Object.prototype.hasOwnProperty.call(structure, locationName)) {
      var value = structure[locationName];
      var result = translate(value, memberShape);
      if (result !== undefined) struct[name] = result;
    }
  });
  return struct;
}

function translateList(list, shape) {
  if (list == null) return undefined;

  var out = [];
  util.arrayEach(list, function(value) {
    var result = translate(value, shape.member);
    if (result === undefined) out.push(null);
    else out.push(result);
  });
  return out;
}

function translateMap(map, shape) {
  if (map == null) return undefined;

  var out = {};
  util.each(map, function(key, value) {
    var result = translate(value, shape.value);
    if (result === undefined) out[key] = null;
    else out[key] = result;
  });
  return out;
}

function translateScalar(value, shape) {
  return shape.toType(value);
}

/**
 * @api private
 */
module.exports = JsonParser;

},{"../util":90}],56:[function(require,module,exports){
var Collection = require('./collection');
var Operation = require('./operation');
var Shape = require('./shape');
var Paginator = require('./paginator');
var ResourceWaiter = require('./resource_waiter');

var util = require('../util');
var property = util.property;
var memoizedProperty = util.memoizedProperty;

function Api(api, options) {
  var self = this;
  api = api || {};
  options = options || {};
  options.api = this;

  api.metadata = api.metadata || {};

  property(this, 'isApi', true, false);
  property(this, 'apiVersion', api.metadata.apiVersion);
  property(this, 'endpointPrefix', api.metadata.endpointPrefix);
  property(this, 'signingName', api.metadata.signingName);
  property(this, 'globalEndpoint', api.metadata.globalEndpoint);
  property(this, 'signatureVersion', api.metadata.signatureVersion);
  property(this, 'jsonVersion', api.metadata.jsonVersion);
  property(this, 'targetPrefix', api.metadata.targetPrefix);
  property(this, 'protocol', api.metadata.protocol);
  property(this, 'timestampFormat', api.metadata.timestampFormat);
  property(this, 'xmlNamespaceUri', api.metadata.xmlNamespace);
  property(this, 'abbreviation', api.metadata.serviceAbbreviation);
  property(this, 'fullName', api.metadata.serviceFullName);
  property(this, 'serviceId', api.metadata.serviceId);

  memoizedProperty(this, 'className', function() {
    var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;
    if (!name) return null;

    name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, '');
    if (name === 'ElasticLoadBalancing') name = 'ELB';
    return name;
  });

  function addEndpointOperation(name, operation) {
    if (operation.endpointoperation === true) {
      property(self, 'endpointOperation', util.string.lowerFirst(name));
    }
  }

  property(this, 'operations', new Collection(api.operations, options, function(name, operation) {
    return new Operation(name, operation, options);
  }, util.string.lowerFirst, addEndpointOperation));

  property(this, 'shapes', new Collection(api.shapes, options, function(name, shape) {
    return Shape.create(shape, options);
  }));

  property(this, 'paginators', new Collection(api.paginators, options, function(name, paginator) {
    return new Paginator(name, paginator, options);
  }));

  property(this, 'waiters', new Collection(api.waiters, options, function(name, waiter) {
    return new ResourceWaiter(name, waiter, options);
  }, util.string.lowerFirst));

  if (options.documentation) {
    property(this, 'documentation', api.documentation);
    property(this, 'documentationUrl', api.documentationUrl);
  }
}

/**
 * @api private
 */
module.exports = Api;

},{"../util":90,"./collection":57,"./operation":58,"./paginator":59,"./resource_waiter":60,"./shape":61}],57:[function(require,module,exports){
var memoizedProperty = require('../util').memoizedProperty;

function memoize(name, value, factory, nameTr) {
  memoizedProperty(this, nameTr(name), function() {
    return factory(name, value);
  });
}

function Collection(iterable, options, factory, nameTr, callback) {
  nameTr = nameTr || String;
  var self = this;

  for (var id in iterable) {
    if (Object.prototype.hasOwnProperty.call(iterable, id)) {
      memoize.call(self, id, iterable[id], factory, nameTr);
      if (callback) callback(id, iterable[id]);
    }
  }
}

/**
 * @api private
 */
module.exports = Collection;

},{"../util":90}],58:[function(require,module,exports){
var Shape = require('./shape');

var util = require('../util');
var property = util.property;
var memoizedProperty = util.memoizedProperty;

function Operation(name, operation, options) {
  var self = this;
  options = options || {};

  property(this, 'name', operation.name || name);
  property(this, 'api', options.api, false);

  operation.http = operation.http || {};
  property(this, 'endpoint', operation.endpoint);
  property(this, 'httpMethod', operation.http.method || 'POST');
  property(this, 'httpPath', operation.http.requestUri || '/');
  property(this, 'authtype', operation.authtype || '');
  property(
    this,
    'endpointDiscoveryRequired',
    operation.endpointdiscovery ?
      (operation.endpointdiscovery.required ? 'REQUIRED' : 'OPTIONAL') :
    'NULL'
  );

  memoizedProperty(this, 'input', function() {
    if (!operation.input) {
      return new Shape.create({type: 'structure'}, options);
    }
    return Shape.create(operation.input, options);
  });

  memoizedProperty(this, 'output', function() {
    if (!operation.output) {
      return new Shape.create({type: 'structure'}, options);
    }
    return Shape.create(operation.output, options);
  });

  memoizedProperty(this, 'errors', function() {
    var list = [];
    if (!operation.errors) return null;

    for (var i = 0; i < operation.errors.length; i++) {
      list.push(Shape.create(operation.errors[i], options));
    }

    return list;
  });

  memoizedProperty(this, 'paginator', function() {
    return options.api.paginators[name];
  });

  if (options.documentation) {
    property(this, 'documentation', operation.documentation);
    property(this, 'documentationUrl', operation.documentationUrl);
  }

  // idempotentMembers only tracks top-level input shapes
  memoizedProperty(this, 'idempotentMembers', function() {
    var idempotentMembers = [];
    var input = self.input;
    var members = input.members;
    if (!input.members) {
      return idempotentMembers;
    }
    for (var name in members) {
      if (!members.hasOwnProperty(name)) {
        continue;
      }
      if (members[name].isIdempotent === true) {
        idempotentMembers.push(name);
      }
    }
    return idempotentMembers;
  });

  memoizedProperty(this, 'hasEventOutput', function() {
    var output = self.output;
    return hasEventStream(output);
  });
}

function hasEventStream(topLevelShape) {
  var members = topLevelShape.members;
  var payload = topLevelShape.payload;

  if (!topLevelShape.members) {
    return false;
  }

  if (payload) {
    var payloadMember = members[payload];
    return payloadMember.isEventStream;
  }

  // check if any member is an event stream
  for (var name in members) {
    if (!members.hasOwnProperty(name)) {
      if (members[name].isEventStream === true) {
        return true;
      }
    }
  }
  return false;
}

/**
 * @api private
 */
module.exports = Operation;

},{"../util":90,"./shape":61}],59:[function(require,module,exports){
var property = require('../util').property;

function Paginator(name, paginator) {
  property(this, 'inputToken', paginator.input_token);
  property(this, 'limitKey', paginator.limit_key);
  property(this, 'moreResults', paginator.more_results);
  property(this, 'outputToken', paginator.output_token);
  property(this, 'resultKey', paginator.result_key);
}

/**
 * @api private
 */
module.exports = Paginator;

},{"../util":90}],60:[function(require,module,exports){
var util = require('../util');
var property = util.property;

function ResourceWaiter(name, waiter, options) {
  options = options || {};
  property(this, 'name', name);
  property(this, 'api', options.api, false);

  if (waiter.operation) {
    property(this, 'operation', util.string.lowerFirst(waiter.operation));
  }

  var self = this;
  var keys = [
    'type',
    'description',
    'delay',
    'maxAttempts',
    'acceptors'
  ];

  keys.forEach(function(key) {
    var value = waiter[key];
    if (value) {
      property(self, key, value);
    }
  });
}

/**
 * @api private
 */
module.exports = ResourceWaiter;

},{"../util":90}],61:[function(require,module,exports){
var Collection = require('./collection');

var util = require('../util');

function property(obj, name, value) {
  if (value !== null && value !== undefined) {
    util.property.apply(this, arguments);
  }
}

function memoizedProperty(obj, name) {
  if (!obj.constructor.prototype[name]) {
    util.memoizedProperty.apply(this, arguments);
  }
}

function Shape(shape, options, memberName) {
  options = options || {};

  property(this, 'shape', shape.shape);
  property(this, 'api', options.api, false);
  property(this, 'type', shape.type);
  property(this, 'enum', shape.enum);
  property(this, 'min', shape.min);
  property(this, 'max', shape.max);
  property(this, 'pattern', shape.pattern);
  property(this, 'location', shape.location || this.location || 'body');
  property(this, 'name', this.name || shape.xmlName || shape.queryName ||
    shape.locationName || memberName);
  property(this, 'isStreaming', shape.streaming || this.isStreaming || false);
  property(this, 'isComposite', shape.isComposite || false);
  property(this, 'isShape', true, false);
  property(this, 'isQueryName', Boolean(shape.queryName), false);
  property(this, 'isLocationName', Boolean(shape.locationName), false);
  property(this, 'isIdempotent', shape.idempotencyToken === true);
  property(this, 'isJsonValue', shape.jsonvalue === true);
  property(this, 'isSensitive', shape.sensitive === true || shape.prototype && shape.prototype.sensitive === true);
  property(this, 'isEventStream', Boolean(shape.eventstream), false);
  property(this, 'isEvent', Boolean(shape.event), false);
  property(this, 'isEventPayload', Boolean(shape.eventpayload), false);
  property(this, 'isEventHeader', Boolean(shape.eventheader), false);
  property(this, 'isTimestampFormatSet', Boolean(shape.timestampFormat) || shape.prototype && shape.prototype.isTimestampFormatSet === true, false);
  property(this, 'endpointDiscoveryId', Boolean(shape.endpointdiscoveryid), false);
  property(this, 'hostLabel', Boolean(shape.hostLabel), false);

  if (options.documentation) {
    property(this, 'documentation', shape.documentation);
    property(this, 'documentationUrl', shape.documentationUrl);
  }

  if (shape.xmlAttribute) {
    property(this, 'isXmlAttribute', shape.xmlAttribute || false);
  }

  // type conversion and parsing
  property(this, 'defaultValue', null);
  this.toWireFormat = function(value) {
    if (value === null || value === undefined) return '';
    return value;
  };
  this.toType = function(value) { return value; };
}

/**
 * @api private
 */
Shape.normalizedTypes = {
  character: 'string',
  double: 'float',
  long: 'integer',
  short: 'integer',
  biginteger: 'integer',
  bigdecimal: 'float',
  blob: 'binary'
};

/**
 * @api private
 */
Shape.types = {
  'structure': StructureShape,
  'list': ListShape,
  'map': MapShape,
  'boolean': BooleanShape,
  'timestamp': TimestampShape,
  'float': FloatShape,
  'integer': IntegerShape,
  'string': StringShape,
  'base64': Base64Shape,
  'binary': BinaryShape
};

Shape.resolve = function resolve(shape, options) {
  if (shape.shape) {
    var refShape = options.api.shapes[shape.shape];
    if (!refShape) {
      throw new Error('Cannot find shape reference: ' + shape.shape);
    }

    return refShape;
  } else {
    return null;
  }
};

Shape.create = function create(shape, options, memberName) {
  if (shape.isShape) return shape;

  var refShape = Shape.resolve(shape, options);
  if (refShape) {
    var filteredKeys = Object.keys(shape);
    if (!options.documentation) {
      filteredKeys = filteredKeys.filter(function(name) {
        return !name.match(/documentation/);
      });
    }

    // create an inline shape with extra members
    var InlineShape = function() {
      refShape.constructor.call(this, shape, options, memberName);
    };
    InlineShape.prototype = refShape;
    return new InlineShape();
  } else {
    // set type if not set
    if (!shape.type) {
      if (shape.members) shape.type = 'structure';
      else if (shape.member) shape.type = 'list';
      else if (shape.key) shape.type = 'map';
      else shape.type = 'string';
    }

    // normalize types
    var origType = shape.type;
    if (Shape.normalizedTypes[shape.type]) {
      shape.type = Shape.normalizedTypes[shape.type];
    }

    if (Shape.types[shape.type]) {
      return new Shape.types[shape.type](shape, options, memberName);
    } else {
      throw new Error('Unrecognized shape type: ' + origType);
    }
  }
};

function CompositeShape(shape) {
  Shape.apply(this, arguments);
  property(this, 'isComposite', true);

  if (shape.flattened) {
    property(this, 'flattened', shape.flattened || false);
  }
}

function StructureShape(shape, options) {
  var self = this;
  var requiredMap = null, firstInit = !this.isShape;

  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return {}; });
    property(this, 'members', {});
    property(this, 'memberNames', []);
    property(this, 'required', []);
    property(this, 'isRequired', function() { return false; });
  }

  if (shape.members) {
    property(this, 'members', new Collection(shape.members, options, function(name, member) {
      return Shape.create(member, options, name);
    }));
    memoizedProperty(this, 'memberNames', function() {
      return shape.xmlOrder || Object.keys(shape.members);
    });

    if (shape.event) {
      memoizedProperty(this, 'eventPayloadMemberName', function() {
        var members = self.members;
        var memberNames = self.memberNames;
        // iterate over members to find ones that are event payloads
        for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
          if (members[memberNames[i]].isEventPayload) {
            return memberNames[i];
          }
        }
      });

      memoizedProperty(this, 'eventHeaderMemberNames', function() {
        var members = self.members;
        var memberNames = self.memberNames;
        var eventHeaderMemberNames = [];
        // iterate over members to find ones that are event headers
        for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
          if (members[memberNames[i]].isEventHeader) {
            eventHeaderMemberNames.push(memberNames[i]);
          }
        }
        return eventHeaderMemberNames;
      });
    }
  }

  if (shape.required) {
    property(this, 'required', shape.required);
    property(this, 'isRequired', function(name) {
      if (!requiredMap) {
        requiredMap = {};
        for (var i = 0; i < shape.required.length; i++) {
          requiredMap[shape.required[i]] = true;
        }
      }

      return requiredMap[name];
    }, false, true);
  }

  property(this, 'resultWrapper', shape.resultWrapper || null);

  if (shape.payload) {
    property(this, 'payload', shape.payload);
  }

  if (typeof shape.xmlNamespace === 'string') {
    property(this, 'xmlNamespaceUri', shape.xmlNamespace);
  } else if (typeof shape.xmlNamespace === 'object') {
    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);
    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);
  }
}

function ListShape(shape, options) {
  var self = this, firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return []; });
  }

  if (shape.member) {
    memoizedProperty(this, 'member', function() {
      return Shape.create(shape.member, options);
    });
  }

  if (this.flattened) {
    var oldName = this.name;
    memoizedProperty(this, 'name', function() {
      return self.member.name || oldName;
    });
  }
}

function MapShape(shape, options) {
  var firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return {}; });
    property(this, 'key', Shape.create({type: 'string'}, options));
    property(this, 'value', Shape.create({type: 'string'}, options));
  }

  if (shape.key) {
    memoizedProperty(this, 'key', function() {
      return Shape.create(shape.key, options);
    });
  }
  if (shape.value) {
    memoizedProperty(this, 'value', function() {
      return Shape.create(shape.value, options);
    });
  }
}

function TimestampShape(shape) {
  var self = this;
  Shape.apply(this, arguments);

  if (shape.timestampFormat) {
    property(this, 'timestampFormat', shape.timestampFormat);
  } else if (self.isTimestampFormatSet && this.timestampFormat) {
    property(this, 'timestampFormat', this.timestampFormat);
  } else if (this.location === 'header') {
    property(this, 'timestampFormat', 'rfc822');
  } else if (this.location === 'querystring') {
    property(this, 'timestampFormat', 'iso8601');
  } else if (this.api) {
    switch (this.api.protocol) {
      case 'json':
      case 'rest-json':
        property(this, 'timestampFormat', 'unixTimestamp');
        break;
      case 'rest-xml':
      case 'query':
      case 'ec2':
        property(this, 'timestampFormat', 'iso8601');
        break;
    }
  }

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    if (typeof value.toUTCString === 'function') return value;
    return typeof value === 'string' || typeof value === 'number' ?
           util.date.parseTimestamp(value) : null;
  };

  this.toWireFormat = function(value) {
    return util.date.format(value, self.timestampFormat);
  };
}

function StringShape() {
  Shape.apply(this, arguments);

  var nullLessProtocols = ['rest-xml', 'query', 'ec2'];
  this.toType = function(value) {
    value = this.api && nullLessProtocols.indexOf(this.api.protocol) > -1 ?
      value || '' : value;
    if (this.isJsonValue) {
      return JSON.parse(value);
    }

    return value && typeof value.toString === 'function' ?
      value.toString() : value;
  };

  this.toWireFormat = function(value) {
    return this.isJsonValue ? JSON.stringify(value) : value;
  };
}

function FloatShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    return parseFloat(value);
  };
  this.toWireFormat = this.toType;
}

function IntegerShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    return parseInt(value, 10);
  };
  this.toWireFormat = this.toType;
}

function BinaryShape() {
  Shape.apply(this, arguments);
  this.toType = util.base64.decode;
  this.toWireFormat = util.base64.encode;
}

function Base64Shape() {
  BinaryShape.apply(this, arguments);
}

function BooleanShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (typeof value === 'boolean') return value;
    if (value === null || value === undefined) return null;
    return value === 'true';
  };
}

/**
 * @api private
 */
Shape.shapes = {
  StructureShape: StructureShape,
  ListShape: ListShape,
  MapShape: MapShape,
  StringShape: StringShape,
  BooleanShape: BooleanShape,
  Base64Shape: Base64Shape
};

/**
 * @api private
 */
module.exports = Shape;

},{"../util":90,"./collection":57}],62:[function(require,module,exports){
var AWS = require('./core');

/**
 * @api private
 */
AWS.ParamValidator = AWS.util.inherit({
  /**
   * Create a new validator object.
   *
   * @param validation [Boolean|map] whether input parameters should be
   *     validated against the operation description before sending the
   *     request. Pass a map to enable any of the following specific
   *     validation features:
   *
   *     * **min** [Boolean] &mdash; Validates that a value meets the min
   *       constraint. This is enabled by default when paramValidation is set
   *       to `true`.
   *     * **max** [Boolean] &mdash; Validates that a value meets the max
   *       constraint.
   *     * **pattern** [Boolean] &mdash; Validates that a string value matches a
   *       regular expression.
   *     * **enum** [Boolean] &mdash; Validates that a string value matches one
   *       of the allowable enum values.
   */
  constructor: function ParamValidator(validation) {
    if (validation === true || validation === undefined) {
      validation = {'min': true};
    }
    this.validation = validation;
  },

  validate: function validate(shape, params, context) {
    this.errors = [];
    this.validateMember(shape, params || {}, context || 'params');

    if (this.errors.length > 1) {
      var msg = this.errors.join('\n* ');
      msg = 'There were ' + this.errors.length +
        ' validation errors:\n* ' + msg;
      throw AWS.util.error(new Error(msg),
        {code: 'MultipleValidationErrors', errors: this.errors});
    } else if (this.errors.length === 1) {
      throw this.errors[0];
    } else {
      return true;
    }
  },

  fail: function fail(code, message) {
    this.errors.push(AWS.util.error(new Error(message), {code: code}));
  },

  validateStructure: function validateStructure(shape, params, context) {
    this.validateType(params, context, ['object'], 'structure');

    var paramName;
    for (var i = 0; shape.required && i < shape.required.length; i++) {
      paramName = shape.required[i];
      var value = params[paramName];
      if (value === undefined || value === null) {
        this.fail('MissingRequiredParameter',
          'Missing required key \'' + paramName + '\' in ' + context);
      }
    }

    // validate hash members
    for (paramName in params) {
      if (!Object.prototype.hasOwnProperty.call(params, paramName)) continue;

      var paramValue = params[paramName],
          memberShape = shape.members[paramName];

      if (memberShape !== undefined) {
        var memberContext = [context, paramName].join('.');
        this.validateMember(memberShape, paramValue, memberContext);
      } else {
        this.fail('UnexpectedParameter',
          'Unexpected key \'' + paramName + '\' found in ' + context);
      }
    }

    return true;
  },

  validateMember: function validateMember(shape, param, context) {
    switch (shape.type) {
      case 'structure':
        return this.validateStructure(shape, param, context);
      case 'list':
        return this.validateList(shape, param, context);
      case 'map':
        return this.validateMap(shape, param, context);
      default:
        return this.validateScalar(shape, param, context);
    }
  },

  validateList: function validateList(shape, params, context) {
    if (this.validateType(params, context, [Array])) {
      this.validateRange(shape, params.length, context, 'list member count');
      // validate array members
      for (var i = 0; i < params.length; i++) {
        this.validateMember(shape.member, params[i], context + '[' + i + ']');
      }
    }
  },

  validateMap: function validateMap(shape, params, context) {
    if (this.validateType(params, context, ['object'], 'map')) {
      // Build up a count of map members to validate range traits.
      var mapCount = 0;
      for (var param in params) {
        if (!Object.prototype.hasOwnProperty.call(params, param)) continue;
        // Validate any map key trait constraints
        this.validateMember(shape.key, param,
                            context + '[key=\'' + param + '\']');
        this.validateMember(shape.value, params[param],
                            context + '[\'' + param + '\']');
        mapCount++;
      }
      this.validateRange(shape, mapCount, context, 'map member count');
    }
  },

  validateScalar: function validateScalar(shape, value, context) {
    switch (shape.type) {
      case null:
      case undefined:
      case 'string':
        return this.validateString(shape, value, context);
      case 'base64':
      case 'binary':
        return this.validatePayload(value, context);
      case 'integer':
      case 'float':
        return this.validateNumber(shape, value, context);
      case 'boolean':
        return this.validateType(value, context, ['boolean']);
      case 'timestamp':
        return this.validateType(value, context, [Date,
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, 'number'],
          'Date object, ISO-8601 string, or a UNIX timestamp');
      default:
        return this.fail('UnkownType', 'Unhandled type ' +
                         shape.type + ' for ' + context);
    }
  },

  validateString: function validateString(shape, value, context) {
    var validTypes = ['string'];
    if (shape.isJsonValue) {
      validTypes = validTypes.concat(['number', 'object', 'boolean']);
    }
    if (value !== null && this.validateType(value, context, validTypes)) {
      this.validateEnum(shape, value, context);
      this.validateRange(shape, value.length, context, 'string length');
      this.validatePattern(shape, value, context);
      this.validateUri(shape, value, context);
    }
  },

  validateUri: function validateUri(shape, value, context) {
    if (shape['location'] === 'uri') {
      if (value.length === 0) {
        this.fail('UriParameterError', 'Expected uri parameter to have length >= 1,'
          + ' but found "' + value +'" for ' + context);
      }
    }
  },

  validatePattern: function validatePattern(shape, value, context) {
    if (this.validation['pattern'] && shape['pattern'] !== undefined) {
      if (!(new RegExp(shape['pattern'])).test(value)) {
        this.fail('PatternMatchError', 'Provided value "' + value + '" '
          + 'does not match regex pattern /' + shape['pattern'] + '/ for '
          + context);
      }
    }
  },

  validateRange: function validateRange(shape, value, context, descriptor) {
    if (this.validation['min']) {
      if (shape['min'] !== undefined && value < shape['min']) {
        this.fail('MinRangeError', 'Expected ' + descriptor + ' >= '
          + shape['min'] + ', but found ' + value + ' for ' + context);
      }
    }
    if (this.validation['max']) {
      if (shape['max'] !== undefined && value > shape['max']) {
        this.fail('MaxRangeError', 'Expected ' + descriptor + ' <= '
          + shape['max'] + ', but found ' + value + ' for ' + context);
      }
    }
  },

  validateEnum: function validateRange(shape, value, context) {
    if (this.validation['enum'] && shape['enum'] !== undefined) {
      // Fail if the string value is not present in the enum list
      if (shape['enum'].indexOf(value) === -1) {
        this.fail('EnumError', 'Found string value of ' + value + ', but '
          + 'expected ' + shape['enum'].join('|') + ' for ' + context);
      }
    }
  },

  validateType: function validateType(value, context, acceptedTypes, type) {
    // We will not log an error for null or undefined, but we will return
    // false so that callers know that the expected type was not strictly met.
    if (value === null || value === undefined) return false;

    var foundInvalidType = false;
    for (var i = 0; i < acceptedTypes.length; i++) {
      if (typeof acceptedTypes[i] === 'string') {
        if (typeof value === acceptedTypes[i]) return true;
      } else if (acceptedTypes[i] instanceof RegExp) {
        if ((value || '').toString().match(acceptedTypes[i])) return true;
      } else {
        if (value instanceof acceptedTypes[i]) return true;
        if (AWS.util.isType(value, acceptedTypes[i])) return true;
        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();
        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);
      }
      foundInvalidType = true;
    }

    var acceptedType = type;
    if (!acceptedType) {
      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');
    }

    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';
    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +
              vowel + ' ' + acceptedType);
    return false;
  },

  validateNumber: function validateNumber(shape, value, context) {
    if (value === null || value === undefined) return;
    if (typeof value === 'string') {
      var castedValue = parseFloat(value);
      if (castedValue.toString() === value) value = castedValue;
    }
    if (this.validateType(value, context, ['number'])) {
      this.validateRange(shape, value, context, 'numeric value');
    }
  },

  validatePayload: function validatePayload(value, context) {
    if (value === null || value === undefined) return;
    if (typeof value === 'string') return;
    if (value && typeof value.byteLength === 'number') return; // typed arrays
    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js
      var Stream = AWS.util.stream.Stream;
      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;
    } else {
      if (typeof Blob !== void 0 && value instanceof Blob) return;
    }

    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];
    if (value) {
      for (var i = 0; i < types.length; i++) {
        if (AWS.util.isType(value, types[i])) return;
        if (AWS.util.typeName(value.constructor) === types[i]) return;
      }
    }

    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +
      'string, Buffer, Stream, Blob, or typed array object');
  }
});

},{"./core":29}],63:[function(require,module,exports){
var util =  require('../util');
var AWS = require('../core');

/**
 * Prepend prefix defined by API model to endpoint that's already
 * constructed. This feature does not apply to operations using
 * endpoint discovery and can be disabled.
 * @api private
 */
function populateHostPrefix(request)  {
  var enabled = request.service.config.hostPrefixEnabled;
  if (!enabled) return request;
  var operationModel = request.service.api.operations[request.operation];
  //don't marshal host prefix when operation has endpoint discovery traits
  if (hasEndpointDiscover(request)) return request;
  if (operationModel.endpoint && operationModel.endpoint.hostPrefix) {
    var hostPrefixNotation = operationModel.endpoint.hostPrefix;
    var hostPrefix = expandHostPrefix(hostPrefixNotation, request.params, operationModel.input);
    prependEndpointPrefix(request.httpRequest.endpoint, hostPrefix);
    validateHostname(request.httpRequest.endpoint.hostname);
  }
  return request;
}

/**
 * @api private
 */
function hasEndpointDiscover(request) {
  var api = request.service.api;
  var operationModel = api.operations[request.operation];
  var isEndpointOperation = api.endpointOperation && (api.endpointOperation === util.string.lowerFirst(operationModel.name));
  return (operationModel.endpointDiscoveryRequired !== 'NULL' || isEndpointOperation === true);
}

/**
 * @api private
 */
function expandHostPrefix(hostPrefixNotation, params, shape) {
  util.each(shape.members, function(name, member) {
    if (member.hostLabel === true) {
      if (typeof params[name] !== 'string' || params[name] === '') {
        throw util.error(new Error(), {
          message: 'Parameter ' + name + ' should be a non-empty string.',
          code: 'InvalidParameter'
        });
      }
      var regex = new RegExp('\\{' + name + '\\}', 'g');
      hostPrefixNotation = hostPrefixNotation.replace(regex, params[name]);
    }
  });
  return hostPrefixNotation;
}

/**
 * @api private
 */
function prependEndpointPrefix(endpoint, prefix) {
  if (endpoint.host) {
    endpoint.host = prefix + endpoint.host;
  }
  if (endpoint.hostname) {
    endpoint.hostname = prefix + endpoint.hostname;
  }
}

/**
 * @api private
 */
function validateHostname(hostname) {
  var labels = hostname.split('.');
  //Reference: https://tools.ietf.org/html/rfc1123#section-2
  var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/;
  util.arrayEach(labels, function(label) {
    if (!label.length || label.length < 1 || label.length > 63) {
      throw util.error(new Error(), {
        code: 'ValidationError',
        message: 'Hostname label length should be between 1 to 63 characters, inclusive.'
      });
    }
    if (!hostPattern.test(label)) {
      throw AWS.util.error(new Error(),
        {code: 'ValidationError', message: label + ' is not hostname compatible.'});
    }
  });
}

module.exports = {
  populateHostPrefix: populateHostPrefix
};

},{"../core":29,"../util":90}],64:[function(require,module,exports){
var util = require('../util');
var JsonBuilder = require('../json/builder');
var JsonParser = require('../json/parser');
var populateHostPrefix = require('./helpers').populateHostPrefix;

function buildRequest(req) {
  var httpRequest = req.httpRequest;
  var api = req.service.api;
  var target = api.targetPrefix + '.' + api.operations[req.operation].name;
  var version = api.jsonVersion || '1.0';
  var input = api.operations[req.operation].input;
  var builder = new JsonBuilder();

  if (version === 1) version = '1.0';
  httpRequest.body = builder.build(req.params || {}, input);
  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;
  httpRequest.headers['X-Amz-Target'] = target;

  populateHostPrefix(req);
}

function extractError(resp) {
  var error = {};
  var httpResponse = resp.httpResponse;

  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';
  if (typeof error.code === 'string') {
    error.code = error.code.split(':')[0];
  }

  if (httpResponse.body.length > 0) {
    try {
      var e = JSON.parse(httpResponse.body.toString());
      if (e.__type || e.code) {
        error.code = (e.__type || e.code).split('#').pop();
      }
      if (error.code === 'RequestEntityTooLarge') {
        error.message = 'Request body must be less than 1 MB';
      } else {
        error.message = (e.message || e.Message || null);
      }
    } catch (e) {
      error.statusCode = httpResponse.statusCode;
      error.message = httpResponse.statusMessage;
    }
  } else {
    error.statusCode = httpResponse.statusCode;
    error.message = httpResponse.statusCode.toString();
  }

  resp.error = util.error(new Error(), error);
}

function extractData(resp) {
  var body = resp.httpResponse.body.toString() || '{}';
  if (resp.request.service.config.convertResponseTypes === false) {
    resp.data = JSON.parse(body);
  } else {
    var operation = resp.request.service.api.operations[resp.request.operation];
    var shape = operation.output || {};
    var parser = new JsonParser();
    resp.data = parser.parse(body, shape);
  }
}

/**
 * @api private
 */
module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};

},{"../json/builder":54,"../json/parser":55,"../util":90,"./helpers":63}],65:[function(require,module,exports){
var AWS = require('../core');
var util = require('../util');
var QueryParamSerializer = require('../query/query_param_serializer');
var Shape = require('../model/shape');
var populateHostPrefix = require('./helpers').populateHostPrefix;

function buildRequest(req) {
  var operation = req.service.api.operations[req.operation];
  var httpRequest = req.httpRequest;
  httpRequest.headers['Content-Type'] =
    'application/x-www-form-urlencoded; charset=utf-8';
  httpRequest.params = {
    Version: req.service.api.apiVersion,
    Action: operation.name
  };

  // convert the request parameters into a list of query params,
  // e.g. Deeply.NestedParam.0.Name=value
  var builder = new QueryParamSerializer();
  builder.serialize(req.params, operation.input, function(name, value) {
    httpRequest.params[name] = value;
  });
  httpRequest.body = util.queryParamsToString(httpRequest.params);

  populateHostPrefix(req);
}

function extractError(resp) {
  var data, body = resp.httpResponse.body.toString();
  if (body.match('<UnknownOperationException')) {
    data = {
      Code: 'UnknownOperation',
      Message: 'Unknown operation ' + resp.request.operation
    };
  } else {
    try {
      data = new AWS.XML.Parser().parse(body);
    } catch (e) {
      data = {
        Code: resp.httpResponse.statusCode,
        Message: resp.httpResponse.statusMessage
      };
    }
  }

  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;
  if (data.Errors) data = data.Errors;
  if (data.Error) data = data.Error;
  if (data.Code) {
    resp.error = util.error(new Error(), {
      code: data.Code,
      message: data.Message
    });
  } else {
    resp.error = util.error(new Error(), {
      code: resp.httpResponse.statusCode,
      message: null
    });
  }
}

function extractData(resp) {
  var req = resp.request;
  var operation = req.service.api.operations[req.operation];
  var shape = operation.output || {};
  var origRules = shape;

  if (origRules.resultWrapper) {
    var tmp = Shape.create({type: 'structure'});
    tmp.members[origRules.resultWrapper] = shape;
    tmp.memberNames = [origRules.resultWrapper];
    util.property(shape, 'name', shape.resultWrapper);
    shape = tmp;
  }

  var parser = new AWS.XML.Parser();

  // TODO: Refactor XML Parser to parse RequestId from response.
  if (shape && shape.members && !shape.members._XAMZRequestId) {
    var requestIdShape = Shape.create(
      { type: 'string' },
      { api: { protocol: 'query' } },
      'requestId'
    );
    shape.members._XAMZRequestId = requestIdShape;
  }

  var data = parser.parse(resp.httpResponse.body.toString(), shape);
  resp.requestId = data._XAMZRequestId || data.requestId;

  if (data._XAMZRequestId) delete data._XAMZRequestId;

  if (origRules.resultWrapper) {
    if (data[origRules.resultWrapper]) {
      util.update(data, data[origRules.resultWrapper]);
      delete data[origRules.resultWrapper];
    }
  }

  resp.data = data;
}

/**
 * @api private
 */
module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};

},{"../core":29,"../model/shape":61,"../query/query_param_serializer":69,"../util":90,"./helpers":63}],66:[function(require,module,exports){
var util = require('../util');
var populateHostPrefix = require('./helpers').populateHostPrefix;

function populateMethod(req) {
  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
}

function generateURI(endpointPath, operationPath, input, params) {
  var uri = [endpointPath, operationPath].join('/');
  uri = uri.replace(/\/+/g, '/');

  var queryString = {}, queryStringSet = false;
  util.each(input.members, function (name, member) {
    var paramValue = params[name];
    if (paramValue === null || paramValue === undefined) return;
    if (member.location === 'uri') {
      var regex = new RegExp('\\{' + member.name + '(\\+)?\\}');
      uri = uri.replace(regex, function(_, plus) {
        var fn = plus ? util.uriEscapePath : util.uriEscape;
        return fn(String(paramValue));
      });
    } else if (member.location === 'querystring') {
      queryStringSet = true;

      if (member.type === 'list') {
        queryString[member.name] = paramValue.map(function(val) {
          return util.uriEscape(member.member.toWireFormat(val).toString());
        });
      } else if (member.type === 'map') {
        util.each(paramValue, function(key, value) {
          if (Array.isArray(value)) {
            queryString[key] = value.map(function(val) {
              return util.uriEscape(String(val));
            });
          } else {
            queryString[key] = util.uriEscape(String(value));
          }
        });
      } else {
        queryString[member.name] = util.uriEscape(member.toWireFormat(paramValue).toString());
      }
    }
  });

  if (queryStringSet) {
    uri += (uri.indexOf('?') >= 0 ? '&' : '?');
    var parts = [];
    util.arrayEach(Object.keys(queryString).sort(), function(key) {
      if (!Array.isArray(queryString[key])) {
        queryString[key] = [queryString[key]];
      }
      for (var i = 0; i < queryString[key].length; i++) {
        parts.push(util.uriEscape(String(key)) + '=' + queryString[key][i]);
      }
    });
    uri += parts.join('&');
  }

  return uri;
}

function populateURI(req) {
  var operation = req.service.api.operations[req.operation];
  var input = operation.input;

  var uri = generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
  req.httpRequest.path = uri;
}

function populateHeaders(req) {
  var operation = req.service.api.operations[req.operation];
  util.each(operation.input.members, function (name, member) {
    var value = req.params[name];
    if (value === null || value === undefined) return;

    if (member.location === 'headers' && member.type === 'map') {
      util.each(value, function(key, memberValue) {
        req.httpRequest.headers[member.name + key] = memberValue;
      });
    } else if (member.location === 'header') {
      value = member.toWireFormat(value).toString();
      if (member.isJsonValue) {
        value = util.base64.encode(value);
      }
      req.httpRequest.headers[member.name] = value;
    }
  });
}

function buildRequest(req) {
  populateMethod(req);
  populateURI(req);
  populateHeaders(req);
  populateHostPrefix(req);
}

function extractError() {
}

function extractData(resp) {
  var req = resp.request;
  var data = {};
  var r = resp.httpResponse;
  var operation = req.service.api.operations[req.operation];
  var output = operation.output;

  // normalize headers names to lower-cased keys for matching
  var headers = {};
  util.each(r.headers, function (k, v) {
    headers[k.toLowerCase()] = v;
  });

  util.each(output.members, function(name, member) {
    var header = (member.name || name).toLowerCase();
    if (member.location === 'headers' && member.type === 'map') {
      data[name] = {};
      var location = member.isLocationName ? member.name : '';
      var pattern = new RegExp('^' + location + '(.+)', 'i');
      util.each(r.headers, function (k, v) {
        var result = k.match(pattern);
        if (result !== null) {
          data[name][result[1]] = v;
        }
      });
    } else if (member.location === 'header') {
      if (headers[header] !== undefined) {
        var value = member.isJsonValue ?
          util.base64.decode(headers[header]) :
          headers[header];
        data[name] = member.toType(value);
      }
    } else if (member.location === 'statusCode') {
      data[name] = parseInt(r.statusCode, 10);
    }
  });

  resp.data = data;
}

/**
 * @api private
 */
module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData,
  generateURI: generateURI
};

},{"../util":90,"./helpers":63}],67:[function(require,module,exports){
var util = require('../util');
var Rest = require('./rest');
var Json = require('./json');
var JsonBuilder = require('../json/builder');
var JsonParser = require('../json/parser');

function populateBody(req) {
  var builder = new JsonBuilder();
  var input = req.service.api.operations[req.operation].input;

  if (input.payload) {
    var params = {};
    var payloadShape = input.members[input.payload];
    params = req.params[input.payload];
    if (params === undefined) return;

    if (payloadShape.type === 'structure') {
      req.httpRequest.body = builder.build(params, payloadShape);
      applyContentTypeHeader(req);
    } else { // non-JSON payload
      req.httpRequest.body = params;
      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {
        applyContentTypeHeader(req, true);
      }
    }
  } else {
    var body = builder.build(req.params, input);
    if (body !== '{}' || req.httpRequest.method !== 'GET') { //don't send empty body for GET method
      req.httpRequest.body = body;
    }
    applyContentTypeHeader(req);
  }
}

function applyContentTypeHeader(req, isBinary) {
  var operation = req.service.api.operations[req.operation];
  var input = operation.input;

  if (!req.httpRequest.headers['Content-Type']) {
    var type = isBinary ? 'binary/octet-stream' : 'application/json';
    req.httpRequest.headers['Content-Type'] = type;
  }
}

function buildRequest(req) {
  Rest.buildRequest(req);

  // never send body payload on HEAD/DELETE
  if (['HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {
    populateBody(req);
  }
}

function extractError(resp) {
  Json.extractError(resp);
}

function extractData(resp) {
  Rest.extractData(resp);

  var req = resp.request;
  var operation = req.service.api.operations[req.operation];
  var rules = req.service.api.operations[req.operation].output || {};
  var parser;
  var hasEventOutput = operation.hasEventOutput;

  if (rules.payload) {
    var payloadMember = rules.members[rules.payload];
    var body = resp.httpResponse.body;
    if (payloadMember.isEventStream) {
      parser = new JsonParser();
      resp.data[payload] = util.createEventStream(
        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body,
        parser,
        payloadMember
      );
    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {
      var parser = new JsonParser();
      resp.data[rules.payload] = parser.parse(body, payloadMember);
    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {
      resp.data[rules.payload] = body;
    } else {
      resp.data[rules.payload] = payloadMember.toType(body);
    }
  } else {
    var data = resp.data;
    Json.extractData(resp);
    resp.data = util.merge(data, resp.data);
  }
}

/**
 * @api private
 */
module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};

},{"../json/builder":54,"../json/parser":55,"../util":90,"./json":64,"./rest":66}],68:[function(require,module,exports){
var AWS = require('../core');
var util = require('../util');
var Rest = require('./rest');

function populateBody(req) {
  var input = req.service.api.operations[req.operation].input;
  var builder = new AWS.XML.Builder();
  var params = req.params;

  var payload = input.payload;
  if (payload) {
    var payloadMember = input.members[payload];
    params = params[payload];
    if (params === undefined) return;

    if (payloadMember.type === 'structure') {
      var rootElement = payloadMember.name;
      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);
    } else { // non-xml payload
      req.httpRequest.body = params;
    }
  } else {
    req.httpRequest.body = builder.toXML(params, input, input.name ||
      input.shape || util.string.upperFirst(req.operation) + 'Request');
  }
}

function buildRequest(req) {
  Rest.buildRequest(req);

  // never send body payload on GET/HEAD
  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {
    populateBody(req);
  }
}

function extractError(resp) {
  Rest.extractError(resp);

  var data;
  try {
    data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());
  } catch (e) {
    data = {
      Code: resp.httpResponse.statusCode,
      Message: resp.httpResponse.statusMessage
    };
  }

  if (data.Errors) data = data.Errors;
  if (data.Error) data = data.Error;
  if (data.Code) {
    resp.error = util.error(new Error(), {
      code: data.Code,
      message: data.Message
    });
  } else {
    resp.error = util.error(new Error(), {
      code: resp.httpResponse.statusCode,
      message: null
    });
  }
}

function extractData(resp) {
  Rest.extractData(resp);

  var parser;
  var req = resp.request;
  var body = resp.httpResponse.body;
  var operation = req.service.api.operations[req.operation];
  var output = operation.output;

  var hasEventOutput = operation.hasEventOutput;

  var payload = output.payload;
  if (payload) {
    var payloadMember = output.members[payload];
    if (payloadMember.isEventStream) {
      parser = new AWS.XML.Parser();
      resp.data[payload] = util.createEventStream(
        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body,
        parser,
        payloadMember
      );
    } else if (payloadMember.type === 'structure') {
      parser = new AWS.XML.Parser();
      resp.data[payload] = parser.parse(body.toString(), payloadMember);
    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {
      resp.data[payload] = body;
    } else {
      resp.data[payload] = payloadMember.toType(body);
    }
  } else if (body.length > 0) {
    parser = new AWS.XML.Parser();
    var data = parser.parse(body.toString(), output);
    util.update(resp.data, data);
  }
}

/**
 * @api private
 */
module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};

},{"../core":29,"../util":90,"./rest":66}],69:[function(require,module,exports){
var util = require('../util');

function QueryParamSerializer() {
}

QueryParamSerializer.prototype.serialize = function(params, shape, fn) {
  serializeStructure('', params, shape, fn);
};

function ucfirst(shape) {
  if (shape.isQueryName || shape.api.protocol !== 'ec2') {
    return shape.name;
  } else {
    return shape.name[0].toUpperCase() + shape.name.substr(1);
  }
}

function serializeStructure(prefix, struct, rules, fn) {
  util.each(rules.members, function(name, member) {
    var value = struct[name];
    if (value === null || value === undefined) return;

    var memberName = ucfirst(member);
    memberName = prefix ? prefix + '.' + memberName : memberName;
    serializeMember(memberName, value, member, fn);
  });
}

function serializeMap(name, map, rules, fn) {
  var i = 1;
  util.each(map, function (key, value) {
    var prefix = rules.flattened ? '.' : '.entry.';
    var position = prefix + (i++) + '.';
    var keyName = position + (rules.key.name || 'key');
    var valueName = position + (rules.value.name || 'value');
    serializeMember(name + keyName, key, rules.key, fn);
    serializeMember(name + valueName, value, rules.value, fn);
  });
}

function serializeList(name, list, rules, fn) {
  var memberRules = rules.member || {};

  if (list.length === 0) {
    fn.call(this, name, null);
    return;
  }

  util.arrayEach(list, function (v, n) {
    var suffix = '.' + (n + 1);
    if (rules.api.protocol === 'ec2') {
      // Do nothing for EC2
      suffix = suffix + ''; // make linter happy
    } else if (rules.flattened) {
      if (memberRules.name) {
        var parts = name.split('.');
        parts.pop();
        parts.push(ucfirst(memberRules));
        name = parts.join('.');
      }
    } else {
      suffix = '.' + (memberRules.name ? memberRules.name : 'member') + suffix;
    }
    serializeMember(name + suffix, v, memberRules, fn);
  });
}

function serializeMember(name, value, rules, fn) {
  if (value === null || value === undefined) return;
  if (rules.type === 'structure') {
    serializeStructure(name, value, rules, fn);
  } else if (rules.type === 'list') {
    serializeList(name, value, rules, fn);
  } else if (rules.type === 'map') {
    serializeMap(name, value, rules, fn);
  } else {
    fn(name, rules.toWireFormat(value).toString());
  }
}

/**
 * @api private
 */
module.exports = QueryParamSerializer;

},{"../util":90}],70:[function(require,module,exports){
module.exports = {
  //provide realtime clock for performance measurement
  now: function now() {
    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
      return performance.now();
    }
    return Date.now();
  }
};

},{}],71:[function(require,module,exports){
var util = require('./util');
var regionConfig = require('./region_config_data.json');

function generateRegionPrefix(region) {
  if (!region) return null;

  var parts = region.split('-');
  if (parts.length < 3) return null;
  return parts.slice(0, parts.length - 2).join('-') + '-*';
}

function derivedKeys(service) {
  var region = service.config.region;
  var regionPrefix = generateRegionPrefix(region);
  var endpointPrefix = service.api.endpointPrefix;

  return [
    [region, endpointPrefix],
    [regionPrefix, endpointPrefix],
    [region, '*'],
    [regionPrefix, '*'],
    ['*', endpointPrefix],
    ['*', '*']
  ].map(function(item) {
    return item[0] && item[1] ? item.join('/') : null;
  });
}

function applyConfig(service, config) {
  util.each(config, function(key, value) {
    if (key === 'globalEndpoint') return;
    if (service.config[key] === undefined || service.config[key] === null) {
      service.config[key] = value;
    }
  });
}

function configureEndpoint(service) {
  var keys = derivedKeys(service);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!key) continue;

    if (Object.prototype.hasOwnProperty.call(regionConfig.rules, key)) {
      var config = regionConfig.rules[key];
      if (typeof config === 'string') {
        config = regionConfig.patterns[config];
      }

      // set dualstack endpoint
      if (service.config.useDualstack && util.isDualstackAvailable(service)) {
        config = util.copy(config);
        config.endpoint = '{service}.dualstack.{region}.amazonaws.com';
      }

      // set global endpoint
      service.isGlobalEndpoint = !!config.globalEndpoint;

      // signature version
      if (!config.signatureVersion) config.signatureVersion = 'v4';

      // merge config
      applyConfig(service, config);
      return;
    }
  }
}

/**
 * @api private
 */
module.exports = configureEndpoint;

},{"./region_config_data.json":72,"./util":90}],72:[function(require,module,exports){
module.exports={
  "rules": {
    "*/*": {
      "endpoint": "{service}.{region}.amazonaws.com"
    },
    "cn-*/*": {
      "endpoint": "{service}.{region}.amazonaws.com.cn"
    },
    "*/budgets": "globalSSL",
    "*/cloudfront": "globalSSL",
    "*/iam": "globalSSL",
    "*/sts": "globalSSL",
    "*/importexport": {
      "endpoint": "{service}.amazonaws.com",
      "signatureVersion": "v2",
      "globalEndpoint": true
    },
    "*/route53": {
      "endpoint": "https://{service}.amazonaws.com",
      "signatureVersion": "v3https",
      "globalEndpoint": true
    },
    "*/waf": "globalSSL",
    "us-gov-*/iam": "globalGovCloud",
    "us-gov-*/sts": {
      "endpoint": "{service}.{region}.amazonaws.com"
    },
    "us-gov-west-1/s3": "s3signature",
    "us-west-1/s3": "s3signature",
    "us-west-2/s3": "s3signature",
    "eu-west-1/s3": "s3signature",
    "ap-southeast-1/s3": "s3signature",
    "ap-southeast-2/s3": "s3signature",
    "ap-northeast-1/s3": "s3signature",
    "sa-east-1/s3": "s3signature",
    "us-east-1/s3": {
      "endpoint": "{service}.amazonaws.com",
      "signatureVersion": "s3"
    },
    "us-east-1/sdb": {
      "endpoint": "{service}.amazonaws.com",
      "signatureVersion": "v2"
    },
    "*/sdb": {
      "endpoint": "{service}.{region}.amazonaws.com",
      "signatureVersion": "v2"
    }
  },

  "patterns": {
    "globalSSL": {
      "endpoint": "https://{service}.amazonaws.com",
      "globalEndpoint": true
    },
    "globalGovCloud": {
      "endpoint": "{service}.us-gov.amazonaws.com"
    },
    "s3signature": {
      "endpoint": "{service}.{region}.amazonaws.com",
      "signatureVersion": "s3"
    }
  }
}

},{}],73:[function(require,module,exports){
(function (process){
var AWS = require('./core');
var AcceptorStateMachine = require('./state_machine');
var inherit = AWS.util.inherit;
var domain = AWS.util.domain;
var jmespath = require('jmespath');

/**
 * @api private
 */
var hardErrorStates = {success: 1, error: 1, complete: 1};

function isTerminalState(machine) {
  return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);
}

var fsm = new AcceptorStateMachine();
fsm.setupStates = function() {
  var transition = function(_, done) {
    var self = this;
    self._haltHandlersOnError = false;

    self.emit(self._asm.currentState, function(err) {
      if (err) {
        if (isTerminalState(self)) {
          if (domain && self.domain instanceof domain.Domain) {
            err.domainEmitter = self;
            err.domain = self.domain;
            err.domainThrown = false;
            self.domain.emit('error', err);
          } else {
            throw err;
          }
        } else {
          self.response.error = err;
          done(err);
        }
      } else {
        done(self.response.error);
      }
    });

  };

  this.addState('validate', 'build', 'error', transition);
  this.addState('build', 'afterBuild', 'restart', transition);
  this.addState('afterBuild', 'sign', 'restart', transition);
  this.addState('sign', 'send', 'retry', transition);
  this.addState('retry', 'afterRetry', 'afterRetry', transition);
  this.addState('afterRetry', 'sign', 'error', transition);
  this.addState('send', 'validateResponse', 'retry', transition);
  this.addState('validateResponse', 'extractData', 'extractError', transition);
  this.addState('extractError', 'extractData', 'retry', transition);
  this.addState('extractData', 'success', 'retry', transition);
  this.addState('restart', 'build', 'error', transition);
  this.addState('success', 'complete', 'complete', transition);
  this.addState('error', 'complete', 'complete', transition);
  this.addState('complete', null, null, transition);
};
fsm.setupStates();

/**
 * ## Asynchronous Requests
 *
 * All requests made through the SDK are asynchronous and use a
 * callback interface. Each service method that kicks off a request
 * returns an `AWS.Request` object that you can use to register
 * callbacks.
 *
 * For example, the following service method returns the request
 * object as "request", which can be used to register callbacks:
 *
 * ```javascript
 * // request is an AWS.Request object
 * var request = ec2.describeInstances();
 *
 * // register callbacks on request to retrieve response data
 * request.on('success', function(response) {
 *   console.log(response.data);
 * });
 * ```
 *
 * When a request is ready to be sent, the {send} method should
 * be called:
 *
 * ```javascript
 * request.send();
 * ```
 *
 * Since registered callbacks may or may not be idempotent, requests should only
 * be sent once. To perform the same operation multiple times, you will need to
 * create multiple request objects, each with its own registered callbacks.
 *
 * ## Removing Default Listeners for Events
 *
 * Request objects are built with default listeners for the various events,
 * depending on the service type. In some cases, you may want to remove
 * some built-in listeners to customize behaviour. Doing this requires
 * access to the built-in listener functions, which are exposed through
 * the {AWS.EventListeners.Core} namespace. For instance, you may
 * want to customize the HTTP handler used when sending a request. In this
 * case, you can remove the built-in listener associated with the 'send'
 * event, the {AWS.EventListeners.Core.SEND} listener and add your own.
 *
 * ## Multiple Callbacks and Chaining
 *
 * You can register multiple callbacks on any request object. The
 * callbacks can be registered for different events, or all for the
 * same event. In addition, you can chain callback registration, for
 * example:
 *
 * ```javascript
 * request.
 *   on('success', function(response) {
 *     console.log("Success!");
 *   }).
 *   on('error', function(response) {
 *     console.log("Error!");
 *   }).
 *   on('complete', function(response) {
 *     console.log("Always!");
 *   }).
 *   send();
 * ```
 *
 * The above example will print either "Success! Always!", or "Error! Always!",
 * depending on whether the request succeeded or not.
 *
 * @!attribute httpRequest
 *   @readonly
 *   @!group HTTP Properties
 *   @return [AWS.HttpRequest] the raw HTTP request object
 *     containing request headers and body information
 *     sent by the service.
 *
 * @!attribute startTime
 *   @readonly
 *   @!group Operation Properties
 *   @return [Date] the time that the request started
 *
 * @!group Request Building Events
 *
 * @!event validate(request)
 *   Triggered when a request is being validated. Listeners
 *   should throw an error if the request should not be sent.
 *   @param request [Request] the request object being sent
 *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS
 *   @see AWS.EventListeners.Core.VALIDATE_REGION
 *   @example Ensuring that a certain parameter is set before sending a request
 *     var req = s3.putObject(params);
 *     req.on('validate', function() {
 *       if (!req.params.Body.match(/^Hello\s/)) {
 *         throw new Error('Body must start with "Hello "');
 *       }
 *     });
 *     req.send(function(err, data) { ... });
 *
 * @!event build(request)
 *   Triggered when the request payload is being built. Listeners
 *   should fill the necessary information to send the request
 *   over HTTP.
 *   @param (see AWS.Request~validate)
 *   @example Add a custom HTTP header to a request
 *     var req = s3.putObject(params);
 *     req.on('build', function() {
 *       req.httpRequest.headers['Custom-Header'] = 'value';
 *     });
 *     req.send(function(err, data) { ... });
 *
 * @!event sign(request)
 *   Triggered when the request is being signed. Listeners should
 *   add the correct authentication headers and/or adjust the body,
 *   depending on the authentication mechanism being used.
 *   @param (see AWS.Request~validate)
 *
 * @!group Request Sending Events
 *
 * @!event send(response)
 *   Triggered when the request is ready to be sent. Listeners
 *   should call the underlying transport layer to initiate
 *   the sending of the request.
 *   @param response [Response] the response object
 *   @context [Request] the request object that was sent
 *   @see AWS.EventListeners.Core.SEND
 *
 * @!event retry(response)
 *   Triggered when a request failed and might need to be retried or redirected.
 *   If the response is retryable, the listener should set the
 *   `response.error.retryable` property to `true`, and optionally set
 *   `response.error.retryDelay` to the millisecond delay for the next attempt.
 *   In the case of a redirect, `response.error.redirect` should be set to
 *   `true` with `retryDelay` set to an optional delay on the next request.
 *
 *   If a listener decides that a request should not be retried,
 *   it should set both `retryable` and `redirect` to false.
 *
 *   Note that a retryable error will be retried at most
 *   {AWS.Config.maxRetries} times (based on the service object's config).
 *   Similarly, a request that is redirected will only redirect at most
 *   {AWS.Config.maxRedirects} times.
 *
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @example Adding a custom retry for a 404 response
 *     request.on('retry', function(response) {
 *       // this resource is not yet available, wait 10 seconds to get it again
 *       if (response.httpResponse.statusCode === 404 && response.error) {
 *         response.error.retryable = true;   // retry this error
 *         response.error.retryDelay = 10000; // wait 10 seconds
 *       }
 *     });
 *
 * @!group Data Parsing Events
 *
 * @!event extractError(response)
 *   Triggered on all non-2xx requests so that listeners can extract
 *   error details from the response body. Listeners to this event
 *   should set the `response.error` property.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event extractData(response)
 *   Triggered in successful requests to allow listeners to
 *   de-serialize the response body into `response.data`.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group Completion Events
 *
 * @!event success(response)
 *   Triggered when the request completed successfully.
 *   `response.data` will contain the response data and
 *   `response.error` will be null.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event error(error, response)
 *   Triggered when an error occurs at any point during the
 *   request. `response.error` will contain details about the error
 *   that occurred. `response.data` will be null.
 *   @param error [Error] the error object containing details about
 *     the error that occurred.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event complete(response)
 *   Triggered whenever a request cycle completes. `response.error`
 *   should be checked, since the request may have failed.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group HTTP Events
 *
 * @!event httpHeaders(statusCode, headers, response, statusMessage)
 *   Triggered when headers are sent by the remote server
 *   @param statusCode [Integer] the HTTP response code
 *   @param headers [map<String,String>] the response headers
 *   @param (see AWS.Request~send)
 *   @param statusMessage [String] A status message corresponding to the HTTP
 *                                 response code
 *   @context (see AWS.Request~send)
 *
 * @!event httpData(chunk, response)
 *   Triggered when data is sent by the remote server
 *   @param chunk [Buffer] the buffer data containing the next data chunk
 *     from the server
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @see AWS.EventListeners.Core.HTTP_DATA
 *
 * @!event httpUploadProgress(progress, response)
 *   Triggered when the HTTP request has uploaded more data
 *   @param progress [map] An object containing the `loaded` and `total` bytes
 *     of the request.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @note This event will not be emitted in Node.js 0.8.x.
 *
 * @!event httpDownloadProgress(progress, response)
 *   Triggered when the HTTP request has downloaded more data
 *   @param progress [map] An object containing the `loaded` and `total` bytes
 *     of the request.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @note This event will not be emitted in Node.js 0.8.x.
 *
 * @!event httpError(error, response)
 *   Triggered when the HTTP request failed
 *   @param error [Error] the error object that was thrown
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event httpDone(response)
 *   Triggered when the server is finished sending data
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @see AWS.Response
 */
AWS.Request = inherit({

  /**
   * Creates a request for an operation on a given service with
   * a set of input parameters.
   *
   * @param service [AWS.Service] the service to perform the operation on
   * @param operation [String] the operation to perform on the service
   * @param params [Object] parameters to send to the operation.
   *   See the operation's documentation for the format of the
   *   parameters.
   */
  constructor: function Request(service, operation, params) {
    var endpoint = service.endpoint;
    var region = service.config.region;
    var customUserAgent = service.config.customUserAgent;

    // global endpoints sign as us-east-1
    if (service.isGlobalEndpoint) region = 'us-east-1';

    this.domain = domain && domain.active;
    this.service = service;
    this.operation = operation;
    this.params = params || {};
    this.httpRequest = new AWS.HttpRequest(endpoint, region);
    this.httpRequest.appendToUserAgent(customUserAgent);
    this.startTime = service.getSkewCorrectedDate();

    this.response = new AWS.Response(this);
    this._asm = new AcceptorStateMachine(fsm.states, 'validate');
    this._haltHandlersOnError = false;

    AWS.SequentialExecutor.call(this);
    this.emit = this.emitEvent;
  },

  /**
   * @!group Sending a Request
   */

  /**
   * @overload send(callback = null)
   *   Sends the request object.
   *
   *   @callback callback function(err, data)
   *     If a callback is supplied, it is called when a response is returned
   *     from the service.
   *     @context [AWS.Request] the request object being sent.
   *     @param err [Error] the error object returned from the request.
   *       Set to `null` if the request is successful.
   *     @param data [Object] the de-serialized data returned from
   *       the request. Set to `null` if a request error occurs.
   *   @example Sending a request with a callback
   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     request.send(function(err, data) { console.log(err, data); });
   *   @example Sending a request with no callback (using event handlers)
   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     request.on('complete', function(response) { ... }); // register a callback
   *     request.send();
   */
  send: function send(callback) {
    if (callback) {
      // append to user agent
      this.httpRequest.appendToUserAgent('callback');
      this.on('complete', function (resp) {
        callback.call(resp, resp.error, resp.data);
      });
    }
    this.runTo();

    return this.response;
  },

  /**
   * @!method  promise()
   *   Sends the request and returns a 'thenable' promise.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function(data)
   *     Called if the promise is fulfilled.
   *     @param data [Object] the de-serialized data returned from the request.
   *   @callback rejectedCallback function(error)
   *     Called if the promise is rejected.
   *     @param error [Error] the error object returned from the request.
   *   @return [Promise] A promise that represents the state of the request.
   *   @example Sending a request using promises.
   *     var request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     var result = request.promise();
   *     result.then(function(data) { ... }, function(error) { ... });
   */

  /**
   * @api private
   */
  build: function build(callback) {
    return this.runTo('send', callback);
  },

  /**
   * @api private
   */
  runTo: function runTo(state, done) {
    this._asm.runTo(state, done, this);
    return this;
  },

  /**
   * Aborts a request, emitting the error and complete events.
   *
   * @!macro nobrowser
   * @example Aborting a request after sending
   *   var params = {
   *     Bucket: 'bucket', Key: 'key',
   *     Body: new Buffer(1024 * 1024 * 5) // 5MB payload
   *   };
   *   var request = s3.putObject(params);
   *   request.send(function (err, data) {
   *     if (err) console.log("Error:", err.code, err.message);
   *     else console.log(data);
   *   });
   *
   *   // abort request in 1 second
   *   setTimeout(request.abort.bind(request), 1000);
   *
   *   // prints "Error: RequestAbortedError Request aborted by user"
   * @return [AWS.Request] the same request object, for chaining.
   * @since v1.4.0
   */
  abort: function abort() {
    this.removeAllListeners('validateResponse');
    this.removeAllListeners('extractError');
    this.on('validateResponse', function addAbortedError(resp) {
      resp.error = AWS.util.error(new Error('Request aborted by user'), {
         code: 'RequestAbortedError', retryable: false
      });
    });

    if (this.httpRequest.stream && !this.httpRequest.stream.didCallback) { // abort HTTP stream
      this.httpRequest.stream.abort();
      if (this.httpRequest._abortCallback) {
         this.httpRequest._abortCallback();
      } else {
        this.removeAllListeners('send'); // haven't sent yet, so let's not
      }
    }

    return this;
  },

  /**
   * Iterates over each page of results given a pageable request, calling
   * the provided callback with each page of data. After all pages have been
   * retrieved, the callback is called with `null` data.
   *
   * @note This operation can generate multiple requests to a service.
   * @example Iterating over multiple pages of objects in an S3 bucket
   *   var pages = 1;
   *   s3.listObjects().eachPage(function(err, data) {
   *     if (err) return;
   *     console.log("Page", pages++);
   *     console.log(data);
   *   });
   * @example Iterating over multiple pages with an asynchronous callback
   *   s3.listObjects(params).eachPage(function(err, data, done) {
   *     doSomethingAsyncAndOrExpensive(function() {
   *       // The next page of results isn't fetched until done is called
   *       done();
   *     });
   *   });
   * @callback callback function(err, data, [doneCallback])
   *   Called with each page of resulting data from the request. If the
   *   optional `doneCallback` is provided in the function, it must be called
   *   when the callback is complete.
   *
   *   @param err [Error] an error object, if an error occurred.
   *   @param data [Object] a single page of response data. If there is no
   *     more data, this object will be `null`.
   *   @param doneCallback [Function] an optional done callback. If this
   *     argument is defined in the function declaration, it should be called
   *     when the next page is ready to be retrieved. This is useful for
   *     controlling serial pagination across asynchronous operations.
   *   @return [Boolean] if the callback returns `false`, pagination will
   *     stop.
   *
   * @see AWS.Request.eachItem
   * @see AWS.Response.nextPage
   * @since v1.4.0
   */
  eachPage: function eachPage(callback) {
    // Make all callbacks async-ish
    callback = AWS.util.fn.makeAsync(callback, 3);

    function wrappedCallback(response) {
      callback.call(response, response.error, response.data, function (result) {
        if (result === false) return;

        if (response.hasNextPage()) {
          response.nextPage().on('complete', wrappedCallback).send();
        } else {
          callback.call(response, null, null, AWS.util.fn.noop);
        }
      });
    }

    this.on('complete', wrappedCallback).send();
  },

  /**
   * Enumerates over individual items of a request, paging the responses if
   * necessary.
   *
   * @api experimental
   * @since v1.4.0
   */
  eachItem: function eachItem(callback) {
    var self = this;
    function wrappedCallback(err, data) {
      if (err) return callback(err, null);
      if (data === null) return callback(null, null);

      var config = self.service.paginationConfig(self.operation);
      var resultKey = config.resultKey;
      if (Array.isArray(resultKey)) resultKey = resultKey[0];
      var items = jmespath.search(data, resultKey);
      var continueIteration = true;
      AWS.util.arrayEach(items, function(item) {
        continueIteration = callback(null, item);
        if (continueIteration === false) {
          return AWS.util.abort;
        }
      });
      return continueIteration;
    }

    this.eachPage(wrappedCallback);
  },

  /**
   * @return [Boolean] whether the operation can return multiple pages of
   *   response data.
   * @see AWS.Response.eachPage
   * @since v1.4.0
   */
  isPageable: function isPageable() {
    return this.service.paginationConfig(this.operation) ? true : false;
  },

  /**
   * Sends the request and converts the request object into a readable stream
   * that can be read from or piped into a writable stream.
   *
   * @note The data read from a readable stream contains only
   *   the raw HTTP body contents.
   * @example Manually reading from a stream
   *   request.createReadStream().on('data', function(data) {
   *     console.log("Got data:", data.toString());
   *   });
   * @example Piping a request body into a file
   *   var out = fs.createWriteStream('/path/to/outfile.jpg');
   *   s3.service.getObject(params).createReadStream().pipe(out);
   * @return [Stream] the readable stream object that can be piped
   *   or read from (by registering 'data' event listeners).
   * @!macro nobrowser
   */
  createReadStream: function createReadStream() {
    var streams = AWS.util.stream;
    var req = this;
    var stream = null;

    if (AWS.HttpClient.streamsApiVersion === 2) {
      stream = new streams.PassThrough();
      process.nextTick(function() { req.send(); });
    } else {
      stream = new streams.Stream();
      stream.readable = true;

      stream.sent = false;
      stream.on('newListener', function(event) {
        if (!stream.sent && event === 'data') {
          stream.sent = true;
          process.nextTick(function() { req.send(); });
        }
      });
    }

    this.on('error', function(err) {
      stream.emit('error', err);
    });

    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {
      if (statusCode < 300) {
        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);
        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);
        req.on('httpError', function streamHttpError(error) {
          resp.error = error;
          resp.error.retryable = false;
        });

        var shouldCheckContentLength = false;
        var expectedLen;
        if (req.httpRequest.method !== 'HEAD') {
          expectedLen = parseInt(headers['content-length'], 10);
        }
        if (expectedLen !== undefined && !isNaN(expectedLen) && expectedLen >= 0) {
          shouldCheckContentLength = true;
          var receivedLen = 0;
        }

        var checkContentLengthAndEmit = function checkContentLengthAndEmit() {
          if (shouldCheckContentLength && receivedLen !== expectedLen) {
            stream.emit('error', AWS.util.error(
              new Error('Stream content length mismatch. Received ' +
                receivedLen + ' of ' + expectedLen + ' bytes.'),
              { code: 'StreamContentLengthMismatch' }
            ));
          } else if (AWS.HttpClient.streamsApiVersion === 2) {
            stream.end();
          } else {
            stream.emit('end');
          }
        };

        var httpStream = resp.httpResponse.createUnbufferedStream();

        if (AWS.HttpClient.streamsApiVersion === 2) {
          if (shouldCheckContentLength) {
            var lengthAccumulator = new streams.PassThrough();
            lengthAccumulator._write = function(chunk) {
              if (chunk && chunk.length) {
                receivedLen += chunk.length;
              }
              return streams.PassThrough.prototype._write.apply(this, arguments);
            };

            lengthAccumulator.on('end', checkContentLengthAndEmit);
            stream.on('error', function(err) {
              shouldCheckContentLength = false;
              httpStream.unpipe(lengthAccumulator);
              lengthAccumulator.emit('end');
              lengthAccumulator.end();
            });
            httpStream.pipe(lengthAccumulator).pipe(stream, { end: false });
          } else {
            httpStream.pipe(stream);
          }
        } else {

          if (shouldCheckContentLength) {
            httpStream.on('data', function(arg) {
              if (arg && arg.length) {
                receivedLen += arg.length;
              }
            });
          }

          httpStream.on('data', function(arg) {
            stream.emit('data', arg);
          });
          httpStream.on('end', checkContentLengthAndEmit);
        }

        httpStream.on('error', function(err) {
          shouldCheckContentLength = false;
          stream.emit('error', err);
        });
      }
    });

    return stream;
  },

  /**
   * @param [Array,Response] args This should be the response object,
   *   or an array of args to send to the event.
   * @api private
   */
  emitEvent: function emit(eventName, args, done) {
    if (typeof args === 'function') { done = args; args = null; }
    if (!done) done = function() { };
    if (!args) args = this.eventParameters(eventName, this.response);

    var origEmit = AWS.SequentialExecutor.prototype.emit;
    origEmit.call(this, eventName, args, function (err) {
      if (err) this.response.error = err;
      done.call(this, err);
    });
  },

  /**
   * @api private
   */
  eventParameters: function eventParameters(eventName) {
    switch (eventName) {
      case 'restart':
      case 'validate':
      case 'sign':
      case 'build':
      case 'afterValidate':
      case 'afterBuild':
        return [this];
      case 'error':
        return [this.response.error, this.response];
      default:
        return [this.response];
    }
  },

  /**
   * @api private
   */
  presign: function presign(expires, callback) {
    if (!callback && typeof expires === 'function') {
      callback = expires;
      expires = null;
    }
    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);
  },

  /**
   * @api private
   */
  isPresigned: function isPresigned() {
    return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, 'presigned-expires');
  },

  /**
   * @api private
   */
  toUnauthenticated: function toUnauthenticated() {
    this._unAuthenticated = true;
    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);
    this.removeListener('sign', AWS.EventListeners.Core.SIGN);
    return this;
  },

  /**
   * @api private
   */
  toGet: function toGet() {
    if (this.service.api.protocol === 'query' ||
        this.service.api.protocol === 'ec2') {
      this.removeListener('build', this.buildAsGet);
      this.addListener('build', this.buildAsGet);
    }
    return this;
  },

  /**
   * @api private
   */
  buildAsGet: function buildAsGet(request) {
    request.httpRequest.method = 'GET';
    request.httpRequest.path = request.service.endpoint.path +
                               '?' + request.httpRequest.body;
    request.httpRequest.body = '';

    // don't need these headers on a GET request
    delete request.httpRequest.headers['Content-Length'];
    delete request.httpRequest.headers['Content-Type'];
  },

  /**
   * @api private
   */
  haltHandlersOnError: function haltHandlersOnError() {
    this._haltHandlersOnError = true;
  }
});

/**
 * @api private
 */
AWS.Request.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.promise = function promise() {
    var self = this;
    // append to user agent
    this.httpRequest.appendToUserAgent('promise');
    return new PromiseDependency(function(resolve, reject) {
      self.on('complete', function(resp) {
        if (resp.error) {
          reject(resp.error);
        } else {
          // define $response property so that it is not enumberable
          // this prevents circular reference errors when stringifying the JSON object
          resolve(Object.defineProperty(
            resp.data || {},
            '$response',
            {value: resp}
          ));
        }
      });
      self.runTo();
    });
  };
};

/**
 * @api private
 */
AWS.Request.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.promise;
};

AWS.util.addPromises(AWS.Request);

AWS.util.mixin(AWS.Request, AWS.SequentialExecutor);

}).call(this,require('_process'))
},{"./core":29,"./state_machine":89,"_process":113,"jmespath":110}],74:[function(require,module,exports){
/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
var inherit = AWS.util.inherit;
var jmespath = require('jmespath');

/**
 * @api private
 */
function CHECK_ACCEPTORS(resp) {
  var waiter = resp.request._waiter;
  var acceptors = waiter.config.acceptors;
  var acceptorMatched = false;
  var state = 'retry';

  acceptors.forEach(function(acceptor) {
    if (!acceptorMatched) {
      var matcher = waiter.matchers[acceptor.matcher];
      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {
        acceptorMatched = true;
        state = acceptor.state;
      }
    }
  });

  if (!acceptorMatched && resp.error) state = 'failure';

  if (state === 'success') {
    waiter.setSuccess(resp);
  } else {
    waiter.setError(resp, state === 'retry');
  }
}

/**
 * @api private
 */
AWS.ResourceWaiter = inherit({
  /**
   * Waits for a given state on a service object
   * @param service [Service] the service object to wait on
   * @param state [String] the state (defined in waiter configuration) to wait
   *   for.
   * @example Create a waiter for running EC2 instances
   *   var ec2 = new AWS.EC2;
   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');
   */
  constructor: function constructor(service, state) {
    this.service = service;
    this.state = state;
    this.loadWaiterConfig(this.state);
  },

  service: null,

  state: null,

  config: null,

  matchers: {
    path: function(resp, expected, argument) {
      try {
        var result = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }

      return jmespath.strictDeepEqual(result,expected);
    },

    pathAll: function(resp, expected, argument) {
      try {
        var results = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }

      if (!Array.isArray(results)) results = [results];
      var numResults = results.length;
      if (!numResults) return false;
      for (var ind = 0 ; ind < numResults; ind++) {
        if (!jmespath.strictDeepEqual(results[ind], expected)) {
          return false;
        }
      }
      return true;
    },

    pathAny: function(resp, expected, argument) {
      try {
        var results = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }

      if (!Array.isArray(results)) results = [results];
      var numResults = results.length;
      for (var ind = 0 ; ind < numResults; ind++) {
        if (jmespath.strictDeepEqual(results[ind], expected)) {
          return true;
        }
      }
      return false;
    },

    status: function(resp, expected) {
      var statusCode = resp.httpResponse.statusCode;
      return (typeof statusCode === 'number') && (statusCode === expected);
    },

    error: function(resp, expected) {
      if (typeof expected === 'string' && resp.error) {
        return expected === resp.error.code;
      }
      // if expected is not string, can be boolean indicating presence of error
      return expected === !!resp.error;
    }
  },

  listeners: new AWS.SequentialExecutor().addNamedListeners(function(add) {
    add('RETRY_CHECK', 'retry', function(resp) {
      var waiter = resp.request._waiter;
      if (resp.error && resp.error.code === 'ResourceNotReady') {
        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;
      }
    });

    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);

    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);
  }),

  /**
   * @return [AWS.Request]
   */
  wait: function wait(params, callback) {
    if (typeof params === 'function') {
      callback = params; params = undefined;
    }

    if (params && params.$waiter) {
      params = AWS.util.copy(params);
      if (typeof params.$waiter.delay === 'number') {
        this.config.delay = params.$waiter.delay;
      }
      if (typeof params.$waiter.maxAttempts === 'number') {
        this.config.maxAttempts = params.$waiter.maxAttempts;
      }
      delete params.$waiter;
    }

    var request = this.service.makeRequest(this.config.operation, params);
    request._waiter = this;
    request.response.maxRetries = this.config.maxAttempts;
    request.addListeners(this.listeners);

    if (callback) request.send(callback);
    return request;
  },

  setSuccess: function setSuccess(resp) {
    resp.error = null;
    resp.data = resp.data || {};
    resp.request.removeAllListeners('extractData');
  },

  setError: function setError(resp, retryable) {
    resp.data = null;
    resp.error = AWS.util.error(resp.error || new Error(), {
      code: 'ResourceNotReady',
      message: 'Resource is not in the state ' + this.state,
      retryable: retryable
    });
  },

  /**
   * Loads waiter configuration from API configuration
   *
   * @api private
   */
  loadWaiterConfig: function loadWaiterConfig(state) {
    if (!this.service.api.waiters[state]) {
      throw new AWS.util.error(new Error(), {
        code: 'StateNotFoundError',
        message: 'State ' + state + ' not found.'
      });
    }

    this.config = AWS.util.copy(this.service.api.waiters[state]);
  }
});

},{"./core":29,"jmespath":110}],75:[function(require,module,exports){
var AWS = require('./core');
var inherit = AWS.util.inherit;
var jmespath = require('jmespath');

/**
 * This class encapsulates the response information
 * from a service request operation sent through {AWS.Request}.
 * The response object has two main properties for getting information
 * back from a request:
 *
 * ## The `data` property
 *
 * The `response.data` property contains the serialized object data
 * retrieved from the service request. For instance, for an
 * Amazon DynamoDB `listTables` method call, the response data might
 * look like:
 *
 * ```
 * > resp.data
 * { TableNames:
 *    [ 'table1', 'table2', ... ] }
 * ```
 *
 * The `data` property can be null if an error occurs (see below).
 *
 * ## The `error` property
 *
 * In the event of a service error (or transfer error), the
 * `response.error` property will be filled with the given
 * error data in the form:
 *
 * ```
 * { code: 'SHORT_UNIQUE_ERROR_CODE',
 *   message: 'Some human readable error message' }
 * ```
 *
 * In the case of an error, the `data` property will be `null`.
 * Note that if you handle events that can be in a failure state,
 * you should always check whether `response.error` is set
 * before attempting to access the `response.data` property.
 *
 * @!attribute data
 *   @readonly
 *   @!group Data Properties
 *   @note Inside of a {AWS.Request~httpData} event, this
 *     property contains a single raw packet instead of the
 *     full de-serialized service response.
 *   @return [Object] the de-serialized response data
 *     from the service.
 *
 * @!attribute error
 *   An structure containing information about a service
 *   or networking error.
 *   @readonly
 *   @!group Data Properties
 *   @note This attribute is only filled if a service or
 *     networking error occurs.
 *   @return [Error]
 *     * code [String] a unique short code representing the
 *       error that was emitted.
 *     * message [String] a longer human readable error message
 *     * retryable [Boolean] whether the error message is
 *       retryable.
 *     * statusCode [Numeric] in the case of a request that reached the service,
 *       this value contains the response status code.
 *     * time [Date] the date time object when the error occurred.
 *     * hostname [String] set when a networking error occurs to easily
 *       identify the endpoint of the request.
 *     * region [String] set when a networking error occurs to easily
 *       identify the region of the request.
 *
 * @!attribute requestId
 *   @readonly
 *   @!group Data Properties
 *   @return [String] the unique request ID associated with the response.
 *     Log this value when debugging requests for AWS support.
 *
 * @!attribute retryCount
 *   @readonly
 *   @!group Operation Properties
 *   @return [Integer] the number of retries that were
 *     attempted before the request was completed.
 *
 * @!attribute redirectCount
 *   @readonly
 *   @!group Operation Properties
 *   @return [Integer] the number of redirects that were
 *     followed before the request was completed.
 *
 * @!attribute httpResponse
 *   @readonly
 *   @!group HTTP Properties
 *   @return [AWS.HttpResponse] the raw HTTP response object
 *     containing the response headers and body information
 *     from the server.
 *
 * @see AWS.Request
 */
AWS.Response = inherit({

  /**
   * @api private
   */
  constructor: function Response(request) {
    this.request = request;
    this.data = null;
    this.error = null;
    this.retryCount = 0;
    this.redirectCount = 0;
    this.httpResponse = new AWS.HttpResponse();
    if (request) {
      this.maxRetries = request.service.numRetries();
      this.maxRedirects = request.service.config.maxRedirects;
    }
  },

  /**
   * Creates a new request for the next page of response data, calling the
   * callback with the page data if a callback is provided.
   *
   * @callback callback function(err, data)
   *   Called when a page of data is returned from the next request.
   *
   *   @param err [Error] an error object, if an error occurred in the request
   *   @param data [Object] the next page of data, or null, if there are no
   *     more pages left.
   * @return [AWS.Request] the request object for the next page of data
   * @return [null] if no callback is provided and there are no pages left
   *   to retrieve.
   * @since v1.4.0
   */
  nextPage: function nextPage(callback) {
    var config;
    var service = this.request.service;
    var operation = this.request.operation;
    try {
      config = service.paginationConfig(operation, true);
    } catch (e) { this.error = e; }

    if (!this.hasNextPage()) {
      if (callback) callback(this.error, null);
      else if (this.error) throw this.error;
      return null;
    }

    var params = AWS.util.copy(this.request.params);
    if (!this.nextPageTokens) {
      return callback ? callback(null, null) : null;
    } else {
      var inputTokens = config.inputToken;
      if (typeof inputTokens === 'string') inputTokens = [inputTokens];
      for (var i = 0; i < inputTokens.length; i++) {
        params[inputTokens[i]] = this.nextPageTokens[i];
      }
      return service.makeRequest(this.request.operation, params, callback);
    }
  },

  /**
   * @return [Boolean] whether more pages of data can be returned by further
   *   requests
   * @since v1.4.0
   */
  hasNextPage: function hasNextPage() {
    this.cacheNextPageTokens();
    if (this.nextPageTokens) return true;
    if (this.nextPageTokens === undefined) return undefined;
    else return false;
  },

  /**
   * @api private
   */
  cacheNextPageTokens: function cacheNextPageTokens() {
    if (Object.prototype.hasOwnProperty.call(this, 'nextPageTokens')) return this.nextPageTokens;
    this.nextPageTokens = undefined;

    var config = this.request.service.paginationConfig(this.request.operation);
    if (!config) return this.nextPageTokens;

    this.nextPageTokens = null;
    if (config.moreResults) {
      if (!jmespath.search(this.data, config.moreResults)) {
        return this.nextPageTokens;
      }
    }

    var exprs = config.outputToken;
    if (typeof exprs === 'string') exprs = [exprs];
    AWS.util.arrayEach.call(this, exprs, function (expr) {
      var output = jmespath.search(this.data, expr);
      if (output) {
        this.nextPageTokens = this.nextPageTokens || [];
        this.nextPageTokens.push(output);
      }
    });

    return this.nextPageTokens;
  }

});

},{"./core":29,"jmespath":110}],76:[function(require,module,exports){
var AWS = require('./core');

/**
 * @api private
 * @!method on(eventName, callback)
 *   Registers an event listener callback for the event given by `eventName`.
 *   Parameters passed to the callback function depend on the individual event
 *   being triggered. See the event documentation for those parameters.
 *
 *   @param eventName [String] the event name to register the listener for
 *   @param callback [Function] the listener callback function
 *   @param toHead [Boolean] attach the listener callback to the head of callback array if set to true.
 *     Default to be false.
 *   @return [AWS.SequentialExecutor] the same object for chaining
 */
AWS.SequentialExecutor = AWS.util.inherit({

  constructor: function SequentialExecutor() {
    this._events = {};
  },

  /**
   * @api private
   */
  listeners: function listeners(eventName) {
    return this._events[eventName] ? this._events[eventName].slice(0) : [];
  },

  on: function on(eventName, listener, toHead) {
    if (this._events[eventName]) {
      toHead ?
        this._events[eventName].unshift(listener) :
        this._events[eventName].push(listener);
    } else {
      this._events[eventName] = [listener];
    }
    return this;
  },

  onAsync: function onAsync(eventName, listener, toHead) {
    listener._isAsync = true;
    return this.on(eventName, listener, toHead);
  },

  removeListener: function removeListener(eventName, listener) {
    var listeners = this._events[eventName];
    if (listeners) {
      var length = listeners.length;
      var position = -1;
      for (var i = 0; i < length; ++i) {
        if (listeners[i] === listener) {
          position = i;
        }
      }
      if (position > -1) {
        listeners.splice(position, 1);
      }
    }
    return this;
  },

  removeAllListeners: function removeAllListeners(eventName) {
    if (eventName) {
      delete this._events[eventName];
    } else {
      this._events = {};
    }
    return this;
  },

  /**
   * @api private
   */
  emit: function emit(eventName, eventArgs, doneCallback) {
    if (!doneCallback) doneCallback = function() { };
    var listeners = this.listeners(eventName);
    var count = listeners.length;
    this.callListeners(listeners, eventArgs, doneCallback);
    return count > 0;
  },

  /**
   * @api private
   */
  callListeners: function callListeners(listeners, args, doneCallback, prevError) {
    var self = this;
    var error = prevError || null;

    function callNextListener(err) {
      if (err) {
        error = AWS.util.error(error || new Error(), err);
        if (self._haltHandlersOnError) {
          return doneCallback.call(self, error);
        }
      }
      self.callListeners(listeners, args, doneCallback, error);
    }

    while (listeners.length > 0) {
      var listener = listeners.shift();
      if (listener._isAsync) { // asynchronous listener
        listener.apply(self, args.concat([callNextListener]));
        return; // stop here, callNextListener will continue
      } else { // synchronous listener
        try {
          listener.apply(self, args);
        } catch (err) {
          error = AWS.util.error(error || new Error(), err);
        }
        if (error && self._haltHandlersOnError) {
          doneCallback.call(self, error);
          return;
        }
      }
    }
    doneCallback.call(self, error);
  },

  /**
   * Adds or copies a set of listeners from another list of
   * listeners or SequentialExecutor object.
   *
   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]
   *   a list of events and callbacks, or an event emitter object
   *   containing listeners to add to this emitter object.
   * @return [AWS.SequentialExecutor] the emitter object, for chaining.
   * @example Adding listeners from a map of listeners
   *   emitter.addListeners({
   *     event1: [function() { ... }, function() { ... }],
   *     event2: [function() { ... }]
   *   });
   *   emitter.emit('event1'); // emitter has event1
   *   emitter.emit('event2'); // emitter has event2
   * @example Adding listeners from another emitter object
   *   var emitter1 = new AWS.SequentialExecutor();
   *   emitter1.on('event1', function() { ... });
   *   emitter1.on('event2', function() { ... });
   *   var emitter2 = new AWS.SequentialExecutor();
   *   emitter2.addListeners(emitter1);
   *   emitter2.emit('event1'); // emitter2 has event1
   *   emitter2.emit('event2'); // emitter2 has event2
   */
  addListeners: function addListeners(listeners) {
    var self = this;

    // extract listeners if parameter is an SequentialExecutor object
    if (listeners._events) listeners = listeners._events;

    AWS.util.each(listeners, function(event, callbacks) {
      if (typeof callbacks === 'function') callbacks = [callbacks];
      AWS.util.arrayEach(callbacks, function(callback) {
        self.on(event, callback);
      });
    });

    return self;
  },

  /**
   * Registers an event with {on} and saves the callback handle function
   * as a property on the emitter object using a given `name`.
   *
   * @param name [String] the property name to set on this object containing
   *   the callback function handle so that the listener can be removed in
   *   the future.
   * @param (see on)
   * @return (see on)
   * @example Adding a named listener DATA_CALLBACK
   *   var listener = function() { doSomething(); };
   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);
   *
   *   // the following prints: true
   *   console.log(emitter.DATA_CALLBACK == listener);
   */
  addNamedListener: function addNamedListener(name, eventName, callback, toHead) {
    this[name] = callback;
    this.addListener(eventName, callback, toHead);
    return this;
  },

  /**
   * @api private
   */
  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback, toHead) {
    callback._isAsync = true;
    return this.addNamedListener(name, eventName, callback, toHead);
  },

  /**
   * Helper method to add a set of named listeners using
   * {addNamedListener}. The callback contains a parameter
   * with a handle to the `addNamedListener` method.
   *
   * @callback callback function(add)
   *   The callback function is called immediately in order to provide
   *   the `add` function to the block. This simplifies the addition of
   *   a large group of named listeners.
   *   @param add [Function] the {addNamedListener} function to call
   *     when registering listeners.
   * @example Adding a set of named listeners
   *   emitter.addNamedListeners(function(add) {
   *     add('DATA_CALLBACK', 'data', function() { ... });
   *     add('OTHER', 'otherEvent', function() { ... });
   *     add('LAST', 'lastEvent', function() { ... });
   *   });
   *
   *   // these properties are now set:
   *   emitter.DATA_CALLBACK;
   *   emitter.OTHER;
   *   emitter.LAST;
   */
  addNamedListeners: function addNamedListeners(callback) {
    var self = this;
    callback(
      function() {
        self.addNamedListener.apply(self, arguments);
      },
      function() {
        self.addNamedAsyncListener.apply(self, arguments);
      }
    );
    return this;
  }
});

/**
 * {on} is the prefered method.
 * @api private
 */
AWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;

/**
 * @api private
 */
module.exports = AWS.SequentialExecutor;

},{"./core":29}],77:[function(require,module,exports){
(function (process){
var AWS = require('./core');
var Api = require('./model/api');
var regionConfig = require('./region_config');

var inherit = AWS.util.inherit;
var clientCount = 0;

/**
 * The service class representing an AWS service.
 *
 * @class_abstract This class is an abstract class.
 *
 * @!attribute apiVersions
 *   @return [Array<String>] the list of API versions supported by this service.
 *   @readonly
 */
AWS.Service = inherit({
  /**
   * Create a new service object with a configuration object
   *
   * @param config [map] a map of configuration options
   */
  constructor: function Service(config) {
    if (!this.loadServiceClass) {
      throw AWS.util.error(new Error(),
        'Service must be constructed with `new\' operator');
    }
    var ServiceClass = this.loadServiceClass(config || {});
    if (ServiceClass) {
      var originalConfig = AWS.util.copy(config);
      var svc = new ServiceClass(config);
      Object.defineProperty(svc, '_originalConfig', {
        get: function() { return originalConfig; },
        enumerable: false,
        configurable: true
      });
      svc._clientId = ++clientCount;
      return svc;
    }
    this.initialize(config);
  },

  /**
   * @api private
   */
  initialize: function initialize(config) {
    var svcConfig = AWS.config[this.serviceIdentifier];
    this.config = new AWS.Config(AWS.config);
    if (svcConfig) this.config.update(svcConfig, true);
    if (config) this.config.update(config, true);

    this.validateService();
    if (!this.config.endpoint) regionConfig(this);

    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
    this.setEndpoint(this.config.endpoint);
    //enable attaching listeners to service client
    AWS.SequentialExecutor.call(this);
    AWS.Service.addDefaultMonitoringListeners(this);
    if ((this.config.clientSideMonitoring || AWS.Service._clientSideMonitoring) && this.publisher) {
      var publisher = this.publisher;
      this.addNamedListener('PUBLISH_API_CALL', 'apiCall', function PUBLISH_API_CALL(event) {
        process.nextTick(function() {publisher.eventHandler(event);});
      });
      this.addNamedListener('PUBLISH_API_ATTEMPT', 'apiCallAttempt', function PUBLISH_API_ATTEMPT(event) {
        process.nextTick(function() {publisher.eventHandler(event);});
      });
    }
  },

  /**
   * @api private
   */
  validateService: function validateService() {
  },

  /**
   * @api private
   */
  loadServiceClass: function loadServiceClass(serviceConfig) {
    var config = serviceConfig;
    if (!AWS.util.isEmpty(this.api)) {
      return null;
    } else if (config.apiConfig) {
      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);
    } else if (!this.constructor.services) {
      return null;
    } else {
      config = new AWS.Config(AWS.config);
      config.update(serviceConfig, true);
      var version = config.apiVersions[this.constructor.serviceIdentifier];
      version = version || config.apiVersion;
      return this.getLatestServiceClass(version);
    }
  },

  /**
   * @api private
   */
  getLatestServiceClass: function getLatestServiceClass(version) {
    version = this.getLatestServiceVersion(version);
    if (this.constructor.services[version] === null) {
      AWS.Service.defineServiceApi(this.constructor, version);
    }

    return this.constructor.services[version];
  },

  /**
   * @api private
   */
  getLatestServiceVersion: function getLatestServiceVersion(version) {
    if (!this.constructor.services || this.constructor.services.length === 0) {
      throw new Error('No services defined on ' +
                      this.constructor.serviceIdentifier);
    }

    if (!version) {
      version = 'latest';
    } else if (AWS.util.isType(version, Date)) {
      version = AWS.util.date.iso8601(version).split('T')[0];
    }

    if (Object.hasOwnProperty(this.constructor.services, version)) {
      return version;
    }

    var keys = Object.keys(this.constructor.services).sort();
    var selectedVersion = null;
    for (var i = keys.length - 1; i >= 0; i--) {
      // versions that end in "*" are not available on disk and can be
      // skipped, so do not choose these as selectedVersions
      if (keys[i][keys[i].length - 1] !== '*') {
        selectedVersion = keys[i];
      }
      if (keys[i].substr(0, 10) <= version) {
        return selectedVersion;
      }
    }

    throw new Error('Could not find ' + this.constructor.serviceIdentifier +
                    ' API to satisfy version constraint `' + version + '\'');
  },

  /**
   * @api private
   */
  api: {},

  /**
   * @api private
   */
  defaultRetryCount: 3,

  /**
   * @api private
   */
  customizeRequests: function customizeRequests(callback) {
    if (!callback) {
      this.customRequestHandler = null;
    } else if (typeof callback === 'function') {
      this.customRequestHandler = callback;
    } else {
      throw new Error('Invalid callback type \'' + typeof callback + '\' provided in customizeRequests');
    }
  },

  /**
   * Calls an operation on a service with the given input parameters.
   *
   * @param operation [String] the name of the operation to call on the service.
   * @param params [map] a map of input options for the operation
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  makeRequest: function makeRequest(operation, params, callback) {
    if (typeof params === 'function') {
      callback = params;
      params = null;
    }

    params = params || {};
    if (this.config.params) { // copy only toplevel bound params
      var rules = this.api.operations[operation];
      if (rules) {
        params = AWS.util.copy(params);
        AWS.util.each(this.config.params, function(key, value) {
          if (rules.input.members[key]) {
            if (params[key] === undefined || params[key] === null) {
              params[key] = value;
            }
          }
        });
      }
    }

    var request = new AWS.Request(this, operation, params);
    this.addAllRequestListeners(request);
    this.attachMonitoringEmitter(request);
    if (callback) request.send(callback);
    return request;
  },

  /**
   * Calls an operation on a service with the given input parameters, without
   * any authentication data. This method is useful for "public" API operations.
   *
   * @param operation [String] the name of the operation to call on the service.
   * @param params [map] a map of input options for the operation
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {
    if (typeof params === 'function') {
      callback = params;
      params = {};
    }

    var request = this.makeRequest(operation, params).toUnauthenticated();
    return callback ? request.send(callback) : request;
  },

  /**
   * Waits for a given state
   *
   * @param state [String] the state on the service to wait for
   * @param params [map] a map of parameters to pass with each request
   * @option params $waiter [map] a map of configuration options for the waiter
   * @option params $waiter.delay [Number] The number of seconds to wait between
   *                                       requests
   * @option params $waiter.maxAttempts [Number] The maximum number of requests
   *                                             to send while waiting
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  waitFor: function waitFor(state, params, callback) {
    var waiter = new AWS.ResourceWaiter(this, state);
    return waiter.wait(params, callback);
  },

  /**
   * @api private
   */
  addAllRequestListeners: function addAllRequestListeners(request) {
    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),
                AWS.EventListeners.CorePost];
    for (var i = 0; i < list.length; i++) {
      if (list[i]) request.addListeners(list[i]);
    }

    // disable parameter validation
    if (!this.config.paramValidation) {
      request.removeListener('validate',
        AWS.EventListeners.Core.VALIDATE_PARAMETERS);
    }

    if (this.config.logger) { // add logging events
      request.addListeners(AWS.EventListeners.Logger);
    }

    this.setupRequestListeners(request);
    // call prototype's customRequestHandler
    if (typeof this.constructor.prototype.customRequestHandler === 'function') {
      this.constructor.prototype.customRequestHandler(request);
    }
    // call instance's customRequestHandler
    if (Object.prototype.hasOwnProperty.call(this, 'customRequestHandler') && typeof this.customRequestHandler === 'function') {
      this.customRequestHandler(request);
    }
  },

  /**
   * Event recording metrics for a whole API call.
   * @returns {object} a subset of api call metrics
   * @api private
   */
  apiCallEvent: function apiCallEvent(request) {
    var api = request.service.api.operations[request.operation];
    var monitoringEvent = {
      Type: 'ApiCall',
      Api: api ? api.name : request.operation,
      Version: 1,
      Service: request.service.api.serviceId || request.service.api.endpointPrefix,
      Region: request.httpRequest.region,
      MaxRetriesExceeded: 0,
      UserAgent: request.httpRequest.getUserAgent(),
    };
    var response = request.response;
    if (response.httpResponse.statusCode) {
      monitoringEvent.FinalHttpStatusCode = response.httpResponse.statusCode;
    }
    if (response.error) {
      var error = response.error;
      var statusCode = response.httpResponse.statusCode;
      if (statusCode > 299) {
        if (error.code) monitoringEvent.FinalAwsException = error.code;
        if (error.message) monitoringEvent.FinalAwsExceptionMessage = error.message;
      } else {
        if (error.code || error.name) monitoringEvent.FinalSdkException = error.code || error.name;
        if (error.message) monitoringEvent.FinalSdkExceptionMessage = error.message;
      }
    }
    return monitoringEvent;
  },

  /**
   * Event recording metrics for an API call attempt.
   * @returns {object} a subset of api call attempt metrics
   * @api private
   */
  apiAttemptEvent: function apiAttemptEvent(request) {
    var api = request.service.api.operations[request.operation];
    var monitoringEvent = {
      Type: 'ApiCallAttempt',
      Api: api ? api.name : request.operation,
      Version: 1,
      Service: request.service.api.serviceId || request.service.api.endpointPrefix,
      Fqdn: request.httpRequest.endpoint.hostname,
      UserAgent: request.httpRequest.getUserAgent(),
    };
    var response = request.response;
    if (response.httpResponse.statusCode) {
      monitoringEvent.HttpStatusCode = response.httpResponse.statusCode;
    }
    if (
      !request._unAuthenticated &&
      request.service.config.credentials &&
      request.service.config.credentials.accessKeyId
    ) {
      monitoringEvent.AccessKey = request.service.config.credentials.accessKeyId;
    }
    if (!response.httpResponse.headers) return monitoringEvent;
    if (request.httpRequest.headers['x-amz-security-token']) {
      monitoringEvent.SessionToken = request.httpRequest.headers['x-amz-security-token'];
    }
    if (response.httpResponse.headers['x-amzn-requestid']) {
      monitoringEvent.XAmznRequestId = response.httpResponse.headers['x-amzn-requestid'];
    }
    if (response.httpResponse.headers['x-amz-request-id']) {
      monitoringEvent.XAmzRequestId = response.httpResponse.headers['x-amz-request-id'];
    }
    if (response.httpResponse.headers['x-amz-id-2']) {
      monitoringEvent.XAmzId2 = response.httpResponse.headers['x-amz-id-2'];
    }
    return monitoringEvent;
  },

  /**
   * Add metrics of failed request.
   * @api private
   */
  attemptFailEvent: function attemptFailEvent(request) {
    var monitoringEvent = this.apiAttemptEvent(request);
    var response = request.response;
    var error = response.error;
    if (response.httpResponse.statusCode > 299 ) {
      if (error.code) monitoringEvent.AwsException = error.code;
      if (error.message) monitoringEvent.AwsExceptionMessage = error.message;
    } else {
      if (error.code || error.name) monitoringEvent.SdkException = error.code || error.name;
      if (error.message) monitoringEvent.SdkExceptionMessage = error.message;
    }
    return monitoringEvent;
  },

  /**
   * Attach listeners to request object to fetch metrics of each request
   * and emit data object through \'ApiCall\' and \'ApiCallAttempt\' events.
   * @api private
   */
  attachMonitoringEmitter: function attachMonitoringEmitter(request) {
    var attemptTimestamp; //timestamp marking the beginning of a request attempt
    var attemptStartRealTime; //Start time of request attempt. Used to calculating attemptLatency
    var attemptLatency; //latency from request sent out to http response reaching SDK
    var callStartRealTime; //Start time of API call. Used to calculating API call latency
    var attemptCount = 0; //request.retryCount is not reliable here
    var region; //region cache region for each attempt since it can be updated in plase (e.g. s3)
    var callTimestamp; //timestamp when the request is created
    var self = this;
    var addToHead = true;

    request.on('validate', function () {
      callStartRealTime = AWS.util.realClock.now();
      callTimestamp = Date.now();
    }, addToHead);
    request.on('sign', function () {
      attemptStartRealTime = AWS.util.realClock.now();
      attemptTimestamp = Date.now();
      region = request.httpRequest.region;
      attemptCount++;
    }, addToHead);
    request.on('validateResponse', function() {
      attemptLatency = Math.round(AWS.util.realClock.now() - attemptStartRealTime);
    });
    request.addNamedListener('API_CALL_ATTEMPT', 'success', function API_CALL_ATTEMPT() {
      var apiAttemptEvent = self.apiAttemptEvent(request);
      apiAttemptEvent.Timestamp = attemptTimestamp;
      apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
      apiAttemptEvent.Region = region;
      self.emit('apiCallAttempt', [apiAttemptEvent]);
    });
    request.addNamedListener('API_CALL_ATTEMPT_RETRY', 'retry', function API_CALL_ATTEMPT_RETRY() {
      var apiAttemptEvent = self.attemptFailEvent(request);
      apiAttemptEvent.Timestamp = attemptTimestamp;
      //attemptLatency may not be available if fail before response
      attemptLatency = attemptLatency ||
        Math.round(AWS.util.realClock.now() - attemptStartRealTime);
      apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
      apiAttemptEvent.Region = region;
      self.emit('apiCallAttempt', [apiAttemptEvent]);
    });
    request.addNamedListener('API_CALL', 'complete', function API_CALL() {
      var apiCallEvent = self.apiCallEvent(request);
      apiCallEvent.AttemptCount = attemptCount;
      if (apiCallEvent.AttemptCount <= 0) return;
      apiCallEvent.Timestamp = callTimestamp;
      var latency = Math.round(AWS.util.realClock.now() - callStartRealTime);
      apiCallEvent.Latency = latency >= 0 ? latency : 0;
      var response = request.response;
      if (
        typeof response.retryCount === 'number' &&
        typeof response.maxRetries === 'number' &&
        (response.retryCount >= response.maxRetries)
      ) {
        apiCallEvent.MaxRetriesExceeded = 1;
      }
      self.emit('apiCall', [apiCallEvent]);
    });
  },

  /**
   * Override this method to setup any custom request listeners for each
   * new request to the service.
   *
   * @method_abstract This is an abstract method.
   */
  setupRequestListeners: function setupRequestListeners(request) {
  },

  /**
   * Gets the signer class for a given request
   * @api private
   */
  getSignerClass: function getSignerClass(request) {
    var version;
    // get operation authtype if present
    var operation = null;
    var authtype = '';
    if (request) {
      var operations = request.service.api.operations || {};
      operation = operations[request.operation] || null;
      authtype = operation ? operation.authtype : '';
    }
    if (this.config.signatureVersion) {
      version = this.config.signatureVersion;
    } else if (authtype === 'v4' || authtype === 'v4-unsigned-body') {
      version = 'v4';
    } else {
      version = this.api.signatureVersion;
    }
    return AWS.Signers.RequestSigner.getVersion(version);
  },

  /**
   * @api private
   */
  serviceInterface: function serviceInterface() {
    switch (this.api.protocol) {
      case 'ec2': return AWS.EventListeners.Query;
      case 'query': return AWS.EventListeners.Query;
      case 'json': return AWS.EventListeners.Json;
      case 'rest-json': return AWS.EventListeners.RestJson;
      case 'rest-xml': return AWS.EventListeners.RestXml;
    }
    if (this.api.protocol) {
      throw new Error('Invalid service `protocol\' ' +
        this.api.protocol + ' in API config');
    }
  },

  /**
   * @api private
   */
  successfulResponse: function successfulResponse(resp) {
    return resp.httpResponse.statusCode < 300;
  },

  /**
   * How many times a failed request should be retried before giving up.
   * the defaultRetryCount can be overriden by service classes.
   *
   * @api private
   */
  numRetries: function numRetries() {
    if (this.config.maxRetries !== undefined) {
      return this.config.maxRetries;
    } else {
      return this.defaultRetryCount;
    }
  },

  /**
   * @api private
   */
  retryDelays: function retryDelays(retryCount) {
    return AWS.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions);
  },

  /**
   * @api private
   */
  retryableError: function retryableError(error) {
    if (this.timeoutError(error)) return true;
    if (this.networkingError(error)) return true;
    if (this.expiredCredentialsError(error)) return true;
    if (this.throttledError(error)) return true;
    if (error.statusCode >= 500) return true;
    return false;
  },

  /**
   * @api private
   */
  networkingError: function networkingError(error) {
    return error.code === 'NetworkingError';
  },

  /**
   * @api private
   */
  timeoutError: function timeoutError(error) {
    return error.code === 'TimeoutError';
  },

  /**
   * @api private
   */
  expiredCredentialsError: function expiredCredentialsError(error) {
    // TODO : this only handles *one* of the expired credential codes
    return (error.code === 'ExpiredTokenException');
  },

  /**
   * @api private
   */
  clockSkewError: function clockSkewError(error) {
    switch (error.code) {
      case 'RequestTimeTooSkewed':
      case 'RequestExpired':
      case 'InvalidSignatureException':
      case 'SignatureDoesNotMatch':
      case 'AuthFailure':
      case 'RequestInTheFuture':
        return true;
      default: return false;
    }
  },

  /**
   * @api private
   */
  getSkewCorrectedDate: function getSkewCorrectedDate() {
    return new Date(Date.now() + this.config.systemClockOffset);
  },

  /**
   * @api private
   */
  applyClockOffset: function applyClockOffset(newServerTime) {
    if (newServerTime) {
      this.config.systemClockOffset = newServerTime - Date.now();
    }
  },

  /**
   * @api private
   */
  isClockSkewed: function isClockSkewed(newServerTime) {
    if (newServerTime) {
      return Math.abs(this.getSkewCorrectedDate().getTime() - newServerTime) >= 30000;
    }
  },

  /**
   * @api private
   */
  throttledError: function throttledError(error) {
    // this logic varies between services
    switch (error.code) {
      case 'ProvisionedThroughputExceededException':
      case 'Throttling':
      case 'ThrottlingException':
      case 'RequestLimitExceeded':
      case 'RequestThrottled':
      case 'RequestThrottledException':
      case 'TooManyRequestsException':
      case 'TransactionInProgressException': //dynamodb
        return true;
      default:
        return false;
    }
  },

  /**
   * @api private
   */
  endpointFromTemplate: function endpointFromTemplate(endpoint) {
    if (typeof endpoint !== 'string') return endpoint;

    var e = endpoint;
    e = e.replace(/\{service\}/g, this.api.endpointPrefix);
    e = e.replace(/\{region\}/g, this.config.region);
    e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? 'https' : 'http');
    return e;
  },

  /**
   * @api private
   */
  setEndpoint: function setEndpoint(endpoint) {
    this.endpoint = new AWS.Endpoint(endpoint, this.config);
  },

  /**
   * @api private
   */
  paginationConfig: function paginationConfig(operation, throwException) {
    var paginator = this.api.operations[operation].paginator;
    if (!paginator) {
      if (throwException) {
        var e = new Error();
        throw AWS.util.error(e, 'No pagination configuration for ' + operation);
      }
      return null;
    }

    return paginator;
  }
});

AWS.util.update(AWS.Service, {

  /**
   * Adds one method for each operation described in the api configuration
   *
   * @api private
   */
  defineMethods: function defineMethods(svc) {
    AWS.util.each(svc.prototype.api.operations, function iterator(method) {
      if (svc.prototype[method]) return;
      var operation = svc.prototype.api.operations[method];
      if (operation.authtype === 'none') {
        svc.prototype[method] = function (params, callback) {
          return this.makeUnauthenticatedRequest(method, params, callback);
        };
      } else {
        svc.prototype[method] = function (params, callback) {
          return this.makeRequest(method, params, callback);
        };
      }
    });
  },

  /**
   * Defines a new Service class using a service identifier and list of versions
   * including an optional set of features (functions) to apply to the class
   * prototype.
   *
   * @param serviceIdentifier [String] the identifier for the service
   * @param versions [Array<String>] a list of versions that work with this
   *   service
   * @param features [Object] an object to attach to the prototype
   * @return [Class<Service>] the service class defined by this function.
   */
  defineService: function defineService(serviceIdentifier, versions, features) {
    AWS.Service._serviceMap[serviceIdentifier] = true;
    if (!Array.isArray(versions)) {
      features = versions;
      versions = [];
    }

    var svc = inherit(AWS.Service, features || {});

    if (typeof serviceIdentifier === 'string') {
      AWS.Service.addVersions(svc, versions);

      var identifier = svc.serviceIdentifier || serviceIdentifier;
      svc.serviceIdentifier = identifier;
    } else { // defineService called with an API
      svc.prototype.api = serviceIdentifier;
      AWS.Service.defineMethods(svc);
    }
    AWS.SequentialExecutor.call(this.prototype);
    //util.clientSideMonitoring is only available in node
    if (!this.prototype.publisher && AWS.util.clientSideMonitoring) {
      var Publisher = AWS.util.clientSideMonitoring.Publisher;
      var configProvider = AWS.util.clientSideMonitoring.configProvider;
      var publisherConfig = configProvider();
      this.prototype.publisher = new Publisher(publisherConfig);
      if (publisherConfig.enabled) {
        //if csm is enabled in environment, SDK should send all metrics
        AWS.Service._clientSideMonitoring = true;
      }
    }
    AWS.SequentialExecutor.call(svc.prototype);
    AWS.Service.addDefaultMonitoringListeners(svc.prototype);
    return svc;
  },

  /**
   * @api private
   */
  addVersions: function addVersions(svc, versions) {
    if (!Array.isArray(versions)) versions = [versions];

    svc.services = svc.services || {};
    for (var i = 0; i < versions.length; i++) {
      if (svc.services[versions[i]] === undefined) {
        svc.services[versions[i]] = null;
      }
    }

    svc.apiVersions = Object.keys(svc.services).sort();
  },

  /**
   * @api private
   */
  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {
    var svc = inherit(superclass, {
      serviceIdentifier: superclass.serviceIdentifier
    });

    function setApi(api) {
      if (api.isApi) {
        svc.prototype.api = api;
      } else {
        svc.prototype.api = new Api(api);
      }
    }

    if (typeof version === 'string') {
      if (apiConfig) {
        setApi(apiConfig);
      } else {
        try {
          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));
        } catch (err) {
          throw AWS.util.error(err, {
            message: 'Could not find API configuration ' +
              superclass.serviceIdentifier + '-' + version
          });
        }
      }
      if (!Object.prototype.hasOwnProperty.call(superclass.services, version)) {
        superclass.apiVersions = superclass.apiVersions.concat(version).sort();
      }
      superclass.services[version] = svc;
    } else {
      setApi(version);
    }

    AWS.Service.defineMethods(svc);
    return svc;
  },

  /**
   * @api private
   */
  hasService: function(identifier) {
    return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap, identifier);
  },

  /**
   * @param attachOn attach default monitoring listeners to object
   *
   * Each monitoring event should be emitted from service client to service constructor prototype and then
   * to global service prototype like bubbling up. These default monitoring events listener will transfer
   * the monitoring events to the upper layer.
   * @api private
   */
  addDefaultMonitoringListeners: function addDefaultMonitoringListeners(attachOn) {
    attachOn.addNamedListener('MONITOR_EVENTS_BUBBLE', 'apiCallAttempt', function EVENTS_BUBBLE(event) {
      var baseClass = Object.getPrototypeOf(attachOn);
      if (baseClass._events) baseClass.emit('apiCallAttempt', [event]);
    });
    attachOn.addNamedListener('CALL_EVENTS_BUBBLE', 'apiCall', function CALL_EVENTS_BUBBLE(event) {
      var baseClass = Object.getPrototypeOf(attachOn);
      if (baseClass._events) baseClass.emit('apiCall', [event]);
    });
  },

  /**
   * @api private
   */
  _serviceMap: {}
});

AWS.util.mixin(AWS.Service, AWS.SequentialExecutor);

/**
 * @api private
 */
module.exports = AWS.Service;

}).call(this,require('_process'))
},{"./core":29,"./model/api":56,"./region_config":71,"_process":113}],78:[function(require,module,exports){
var AWS = require('../core');

AWS.util.update(AWS.CognitoIdentity.prototype, {
  getOpenIdToken: function getOpenIdToken(params, callback) {
    return this.makeUnauthenticatedRequest('getOpenIdToken', params, callback);
  },

  getId: function getId(params, callback) {
    return this.makeUnauthenticatedRequest('getId', params, callback);
  },

  getCredentialsForIdentity: function getCredentialsForIdentity(params, callback) {
    return this.makeUnauthenticatedRequest('getCredentialsForIdentity', params, callback);
  }
});

},{"../core":29}],79:[function(require,module,exports){
var AWS = require('../core');
require('../dynamodb/document_client');

AWS.util.update(AWS.DynamoDB.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    if (request.service.config.dynamoDbCrc32) {
      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);
      request.addListener('extractData', this.checkCrc32);
      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);
    }
  },

  /**
   * @api private
   */
  checkCrc32: function checkCrc32(resp) {
    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {
      resp.data = null;
      resp.error = AWS.util.error(new Error(), {
        code: 'CRC32CheckFailed',
        message: 'CRC32 integrity check failed',
        retryable: true
      });
      resp.request.haltHandlersOnError();
      throw (resp.error);
    }
  },

  /**
   * @api private
   */
  crc32IsValid: function crc32IsValid(resp) {
    var crc = resp.httpResponse.headers['x-amz-crc32'];
    if (!crc) return true; // no (valid) CRC32 header
    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);
  },

  /**
   * @api private
   */
  defaultRetryCount: 10,

  /**
   * @api private
   */
  retryDelays: function retryDelays(retryCount) {
    var retryDelayOptions = AWS.util.copy(this.config.retryDelayOptions);

    if (typeof retryDelayOptions.base !== 'number') {
        retryDelayOptions.base = 50; // default for dynamodb
    }
    var delay = AWS.util.calculateRetryDelay(retryCount, retryDelayOptions);
    return delay;
  }
});

},{"../core":29,"../dynamodb/document_client":39}],80:[function(require,module,exports){
var AWS = require('../core');

AWS.util.update(AWS.STS.prototype, {
  /**
   * @overload credentialsFrom(data, credentials = null)
   *   Creates a credentials object from STS response data containing
   *   credentials information. Useful for quickly setting AWS credentials.
   *
   *   @note This is a low-level utility function. If you want to load temporary
   *     credentials into your process for subsequent requests to AWS resources,
   *     you should use {AWS.TemporaryCredentials} instead.
   *   @param data [map] data retrieved from a call to {getFederatedToken},
   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.
   *   @param credentials [AWS.Credentials] an optional credentials object to
   *     fill instead of creating a new object. Useful when modifying an
   *     existing credentials object from a refresh call.
   *   @return [AWS.TemporaryCredentials] the set of temporary credentials
   *     loaded from a raw STS operation response.
   *   @example Using credentialsFrom to load global AWS credentials
   *     var sts = new AWS.STS();
   *     sts.getSessionToken(function (err, data) {
   *       if (err) console.log("Error getting credentials");
   *       else {
   *         AWS.config.credentials = sts.credentialsFrom(data);
   *       }
   *     });
   *   @see AWS.TemporaryCredentials
   */
  credentialsFrom: function credentialsFrom(data, credentials) {
    if (!data) return null;
    if (!credentials) credentials = new AWS.TemporaryCredentials();
    credentials.expired = false;
    credentials.accessKeyId = data.Credentials.AccessKeyId;
    credentials.secretAccessKey = data.Credentials.SecretAccessKey;
    credentials.sessionToken = data.Credentials.SessionToken;
    credentials.expireTime = data.Credentials.Expiration;
    return credentials;
  },

  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {
    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);
  },

  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {
    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);
  }
});

},{"../core":29}],81:[function(require,module,exports){
var AWS = require('../core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
var expiresHeader = 'presigned-expires';

/**
 * @api private
 */
function signedUrlBuilder(request) {
  var expires = request.httpRequest.headers[expiresHeader];
  var signerClass = request.service.getSignerClass(request);

  delete request.httpRequest.headers['User-Agent'];
  delete request.httpRequest.headers['X-Amz-User-Agent'];

  if (signerClass === AWS.Signers.V4) {
    if (expires > 604800) { // one week expiry is invalid
      var message = 'Presigning does not support expiry time greater ' +
                    'than a week with SigV4 signing.';
      throw AWS.util.error(new Error(), {
        code: 'InvalidExpiryTime', message: message, retryable: false
      });
    }
    request.httpRequest.headers[expiresHeader] = expires;
  } else if (signerClass === AWS.Signers.S3) {
    var now = request.service ? request.service.getSkewCorrectedDate() : AWS.util.date.getDate();
    request.httpRequest.headers[expiresHeader] = parseInt(
      AWS.util.date.unixTimestamp(now) + expires, 10).toString();
  } else {
    throw AWS.util.error(new Error(), {
      message: 'Presigning only supports S3 or SigV4 signing.',
      code: 'UnsupportedSigner', retryable: false
    });
  }
}

/**
 * @api private
 */
function signedUrlSigner(request) {
  var endpoint = request.httpRequest.endpoint;
  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);
  var queryParams = {};

  if (parsedUrl.search) {
    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));
  }

  var auth = request.httpRequest.headers['Authorization'].split(' ');
  if (auth[0] === 'AWS') {
    auth = auth[1].split(':');
    queryParams['AWSAccessKeyId'] = auth[0];
    queryParams['Signature'] = auth[1];

    AWS.util.each(request.httpRequest.headers, function (key, value) {
      if (key === expiresHeader) key = 'Expires';
      if (key.indexOf('x-amz-meta-') === 0) {
        // Delete existing, potentially not normalized key
        delete queryParams[key];
        key = key.toLowerCase();
      }
      queryParams[key] = value;
    });
    delete request.httpRequest.headers[expiresHeader];
    delete queryParams['Authorization'];
    delete queryParams['Host'];
  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing
    auth.shift();
    var rest = auth.join(' ');
    var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
    queryParams['X-Amz-Signature'] = signature;
    delete queryParams['Expires'];
  }

  // build URL
  endpoint.pathname = parsedUrl.pathname;
  endpoint.search = AWS.util.queryParamsToString(queryParams);
}

/**
 * @api private
 */
AWS.Signers.Presign = inherit({
  /**
   * @api private
   */
  sign: function sign(request, expireTime, callback) {
    request.httpRequest.headers[expiresHeader] = expireTime || 3600;
    request.on('build', signedUrlBuilder);
    request.on('sign', signedUrlSigner);
    request.removeListener('afterBuild',
      AWS.EventListeners.Core.SET_CONTENT_LENGTH);
    request.removeListener('afterBuild',
      AWS.EventListeners.Core.COMPUTE_SHA256);

    request.emit('beforePresign', [request]);

    if (callback) {
      request.build(function() {
        if (this.response.error) callback(this.response.error);
        else {
          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));
        }
      });
    } else {
      request.build();
      if (request.response.error) throw request.response.error;
      return AWS.util.urlFormat(request.httpRequest.endpoint);
    }
  }
});

/**
 * @api private
 */
module.exports = AWS.Signers.Presign;

},{"../core":29}],82:[function(require,module,exports){
var AWS = require('../core');

var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.RequestSigner = inherit({
  constructor: function RequestSigner(request) {
    this.request = request;
  },

  setServiceClientId: function setServiceClientId(id) {
    this.serviceClientId = id;
  },

  getServiceClientId: function getServiceClientId() {
    return this.serviceClientId;
  }
});

AWS.Signers.RequestSigner.getVersion = function getVersion(version) {
  switch (version) {
    case 'v2': return AWS.Signers.V2;
    case 'v3': return AWS.Signers.V3;
    case 's3v4': return AWS.Signers.V4;
    case 'v4': return AWS.Signers.V4;
    case 's3': return AWS.Signers.S3;
    case 'v3https': return AWS.Signers.V3Https;
  }
  throw new Error('Unknown signing version ' + version);
};

require('./v2');
require('./v3');
require('./v3https');
require('./v4');
require('./s3');
require('./presign');

},{"../core":29,"./presign":81,"./s3":83,"./v2":84,"./v3":85,"./v3https":86,"./v4":87}],83:[function(require,module,exports){
var AWS = require('../core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {
  /**
   * When building the stringToSign, these sub resource params should be
   * part of the canonical resource string with their NON-decoded values
   */
  subResources: {
    'acl': 1,
    'accelerate': 1,
    'analytics': 1,
    'cors': 1,
    'lifecycle': 1,
    'delete': 1,
    'inventory': 1,
    'location': 1,
    'logging': 1,
    'metrics': 1,
    'notification': 1,
    'partNumber': 1,
    'policy': 1,
    'requestPayment': 1,
    'replication': 1,
    'restore': 1,
    'tagging': 1,
    'torrent': 1,
    'uploadId': 1,
    'uploads': 1,
    'versionId': 1,
    'versioning': 1,
    'versions': 1,
    'website': 1
  },

  // when building the stringToSign, these querystring params should be
  // part of the canonical resource string with their NON-encoded values
  responseHeaders: {
    'response-content-type': 1,
    'response-content-language': 1,
    'response-expires': 1,
    'response-cache-control': 1,
    'response-content-disposition': 1,
    'response-content-encoding': 1
  },

  addAuthorization: function addAuthorization(credentials, date) {
    if (!this.request.headers['presigned-expires']) {
      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);
    }

    if (credentials.sessionToken) {
      // presigned URLs require this header to be lowercased
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }

    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;

    this.request.headers['Authorization'] = auth;
  },

  stringToSign: function stringToSign() {
    var r = this.request;

    var parts = [];
    parts.push(r.method);
    parts.push(r.headers['Content-MD5'] || '');
    parts.push(r.headers['Content-Type'] || '');

    // This is the "Date" header, but we use X-Amz-Date.
    // The S3 signing mechanism requires us to pass an empty
    // string for this Date header regardless.
    parts.push(r.headers['presigned-expires'] || '');

    var headers = this.canonicalizedAmzHeaders();
    if (headers) parts.push(headers);
    parts.push(this.canonicalizedResource());

    return parts.join('\n');

  },

  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {

    var amzHeaders = [];

    AWS.util.each(this.request.headers, function (name) {
      if (name.match(/^x-amz-/i))
        amzHeaders.push(name);
    });

    amzHeaders.sort(function (a, b) {
      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
    });

    var parts = [];
    AWS.util.arrayEach.call(this, amzHeaders, function (name) {
      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));
    });

    return parts.join('\n');

  },

  canonicalizedResource: function canonicalizedResource() {

    var r = this.request;

    var parts = r.path.split('?');
    var path = parts[0];
    var querystring = parts[1];

    var resource = '';

    if (r.virtualHostedBucket)
      resource += '/' + r.virtualHostedBucket;

    resource += path;

    if (querystring) {

      // collect a list of sub resources and query params that need to be signed
      var resources = [];

      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {
        var name = param.split('=')[0];
        var value = param.split('=')[1];
        if (this.subResources[name] || this.responseHeaders[name]) {
          var subresource = { name: name };
          if (value !== undefined) {
            if (this.subResources[name]) {
              subresource.value = value;
            } else {
              subresource.value = decodeURIComponent(value);
            }
          }
          resources.push(subresource);
        }
      });

      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });

      if (resources.length) {

        querystring = [];
        AWS.util.arrayEach(resources, function (res) {
          if (res.value === undefined) {
            querystring.push(res.name);
          } else {
            querystring.push(res.name + '=' + res.value);
          }
        });

        resource += '?' + querystring.join('&');
      }

    }

    return resource;

  },

  sign: function sign(secret, string) {
    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');
  }
});

/**
 * @api private
 */
module.exports = AWS.Signers.S3;

},{"../core":29}],84:[function(require,module,exports){
var AWS = require('../core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {

    if (!date) date = AWS.util.date.getDate();

    var r = this.request;

    r.params.Timestamp = AWS.util.date.iso8601(date);
    r.params.SignatureVersion = '2';
    r.params.SignatureMethod = 'HmacSHA256';
    r.params.AWSAccessKeyId = credentials.accessKeyId;

    if (credentials.sessionToken) {
      r.params.SecurityToken = credentials.sessionToken;
    }

    delete r.params.Signature; // delete old Signature for re-signing
    r.params.Signature = this.signature(credentials);

    r.body = AWS.util.queryParamsToString(r.params);
    r.headers['Content-Length'] = r.body.length;
  },

  signature: function signature(credentials) {
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
  },

  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push(this.request.endpoint.host.toLowerCase());
    parts.push(this.request.pathname());
    parts.push(AWS.util.queryParamsToString(this.request.params));
    return parts.join('\n');
  }

});

/**
 * @api private
 */
module.exports = AWS.Signers.V2;

},{"../core":29}],85:[function(require,module,exports){
var AWS = require('../core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {

    var datetime = AWS.util.date.rfc822(date);

    this.request.headers['X-Amz-Date'] = datetime;

    if (credentials.sessionToken) {
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }

    this.request.headers['X-Amzn-Authorization'] =
      this.authorization(credentials, datetime);

  },

  authorization: function authorization(credentials) {
    return 'AWS3 ' +
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
      'Algorithm=HmacSHA256,' +
      'SignedHeaders=' + this.signedHeaders() + ',' +
      'Signature=' + this.signature(credentials);
  },

  signedHeaders: function signedHeaders() {
    var headers = [];
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
      headers.push(h.toLowerCase());
    });
    return headers.sort().join(';');
  },

  canonicalHeaders: function canonicalHeaders() {
    var headers = this.request.headers;
    var parts = [];
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());
    });
    return parts.sort().join('\n') + '\n';
  },

  headersToSign: function headersToSign() {
    var headers = [];
    AWS.util.each(this.request.headers, function iterator(k) {
      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {
        headers.push(k);
      }
    });
    return headers;
  },

  signature: function signature(credentials) {
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
  },

  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push('/');
    parts.push('');
    parts.push(this.canonicalHeaders());
    parts.push(this.request.body);
    return AWS.util.crypto.sha256(parts.join('\n'));
  }

});

/**
 * @api private
 */
module.exports = AWS.Signers.V3;

},{"../core":29}],86:[function(require,module,exports){
var AWS = require('../core');
var inherit = AWS.util.inherit;

require('./v3');

/**
 * @api private
 */
AWS.Signers.V3Https = inherit(AWS.Signers.V3, {
  authorization: function authorization(credentials) {
    return 'AWS3-HTTPS ' +
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
      'Algorithm=HmacSHA256,' +
      'Signature=' + this.signature(credentials);
  },

  stringToSign: function stringToSign() {
    return this.request.headers['X-Amz-Date'];
  }
});

/**
 * @api private
 */
module.exports = AWS.Signers.V3Https;

},{"../core":29,"./v3":85}],87:[function(require,module,exports){
var AWS = require('../core');
var v4Credentials = require('./v4_credentials');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
var expiresHeader = 'presigned-expires';

/**
 * @api private
 */
AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {
  constructor: function V4(request, serviceName, options) {
    AWS.Signers.RequestSigner.call(this, request);
    this.serviceName = serviceName;
    options = options || {};
    this.signatureCache = typeof options.signatureCache === 'boolean' ? options.signatureCache : true;
    this.operation = options.operation;
    this.signatureVersion = options.signatureVersion;
  },

  algorithm: 'AWS4-HMAC-SHA256',

  addAuthorization: function addAuthorization(credentials, date) {
    var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');

    if (this.isPresigned()) {
      this.updateForPresigned(credentials, datetime);
    } else {
      this.addHeaders(credentials, datetime);
    }

    this.request.headers['Authorization'] =
      this.authorization(credentials, datetime);
  },

  addHeaders: function addHeaders(credentials, datetime) {
    this.request.headers['X-Amz-Date'] = datetime;
    if (credentials.sessionToken) {
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }
  },

  updateForPresigned: function updateForPresigned(credentials, datetime) {
    var credString = this.credentialString(datetime);
    var qs = {
      'X-Amz-Date': datetime,
      'X-Amz-Algorithm': this.algorithm,
      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,
      'X-Amz-Expires': this.request.headers[expiresHeader],
      'X-Amz-SignedHeaders': this.signedHeaders()
    };

    if (credentials.sessionToken) {
      qs['X-Amz-Security-Token'] = credentials.sessionToken;
    }

    if (this.request.headers['Content-Type']) {
      qs['Content-Type'] = this.request.headers['Content-Type'];
    }
    if (this.request.headers['Content-MD5']) {
      qs['Content-MD5'] = this.request.headers['Content-MD5'];
    }
    if (this.request.headers['Cache-Control']) {
      qs['Cache-Control'] = this.request.headers['Cache-Control'];
    }

    // need to pull in any other X-Amz-* headers
    AWS.util.each.call(this, this.request.headers, function(key, value) {
      if (key === expiresHeader) return;
      if (this.isSignableHeader(key)) {
        var lowerKey = key.toLowerCase();
        // Metadata should be normalized
        if (lowerKey.indexOf('x-amz-meta-') === 0) {
          qs[lowerKey] = value;
        } else if (lowerKey.indexOf('x-amz-') === 0) {
          qs[key] = value;
        }
      }
    });

    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';
    this.request.path += sep + AWS.util.queryParamsToString(qs);
  },

  authorization: function authorization(credentials, datetime) {
    var parts = [];
    var credString = this.credentialString(datetime);
    parts.push(this.algorithm + ' Credential=' +
      credentials.accessKeyId + '/' + credString);
    parts.push('SignedHeaders=' + this.signedHeaders());
    parts.push('Signature=' + this.signature(credentials, datetime));
    return parts.join(', ');
  },

  signature: function signature(credentials, datetime) {
    var signingKey = v4Credentials.getSigningKey(
      credentials,
      datetime.substr(0, 8),
      this.request.region,
      this.serviceName,
      this.signatureCache
    );
    return AWS.util.crypto.hmac(signingKey, this.stringToSign(datetime), 'hex');
  },

  stringToSign: function stringToSign(datetime) {
    var parts = [];
    parts.push('AWS4-HMAC-SHA256');
    parts.push(datetime);
    parts.push(this.credentialString(datetime));
    parts.push(this.hexEncodedHash(this.canonicalString()));
    return parts.join('\n');
  },

  canonicalString: function canonicalString() {
    var parts = [], pathname = this.request.pathname();
    if (this.serviceName !== 's3' && this.signatureVersion !== 's3v4') pathname = AWS.util.uriEscapePath(pathname);

    parts.push(this.request.method);
    parts.push(pathname);
    parts.push(this.request.search());
    parts.push(this.canonicalHeaders() + '\n');
    parts.push(this.signedHeaders());
    parts.push(this.hexEncodedBodyHash());
    return parts.join('\n');
  },

  canonicalHeaders: function canonicalHeaders() {
    var headers = [];
    AWS.util.each.call(this, this.request.headers, function (key, item) {
      headers.push([key, item]);
    });
    headers.sort(function (a, b) {
      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
    });
    var parts = [];
    AWS.util.arrayEach.call(this, headers, function (item) {
      var key = item[0].toLowerCase();
      if (this.isSignableHeader(key)) {
        var value = item[1];
        if (typeof value === 'undefined' || value === null || typeof value.toString !== 'function') {
          throw AWS.util.error(new Error('Header ' + key + ' contains invalid value'), {
            code: 'InvalidHeader'
          });
        }
        parts.push(key + ':' +
          this.canonicalHeaderValues(value.toString()));
      }
    });
    return parts.join('\n');
  },

  canonicalHeaderValues: function canonicalHeaderValues(values) {
    return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
  },

  signedHeaders: function signedHeaders() {
    var keys = [];
    AWS.util.each.call(this, this.request.headers, function (key) {
      key = key.toLowerCase();
      if (this.isSignableHeader(key)) keys.push(key);
    });
    return keys.sort().join(';');
  },

  credentialString: function credentialString(datetime) {
    return v4Credentials.createScope(
      datetime.substr(0, 8),
      this.request.region,
      this.serviceName
    );
  },

  hexEncodedHash: function hash(string) {
    return AWS.util.crypto.sha256(string, 'hex');
  },

  hexEncodedBodyHash: function hexEncodedBodyHash() {
    var request = this.request;
    if (this.isPresigned() && this.serviceName === 's3' && !request.body) {
      return 'UNSIGNED-PAYLOAD';
    } else if (request.headers['X-Amz-Content-Sha256']) {
      return request.headers['X-Amz-Content-Sha256'];
    } else {
      return this.hexEncodedHash(this.request.body || '');
    }
  },

  unsignableHeaders: [
    'authorization',
    'content-type',
    'content-length',
    'user-agent',
    expiresHeader,
    'expect',
    'x-amzn-trace-id'
  ],

  isSignableHeader: function isSignableHeader(key) {
    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;
    return this.unsignableHeaders.indexOf(key) < 0;
  },

  isPresigned: function isPresigned() {
    return this.request.headers[expiresHeader] ? true : false;
  }

});

/**
 * @api private
 */
module.exports = AWS.Signers.V4;

},{"../core":29,"./v4_credentials":88}],88:[function(require,module,exports){
var AWS = require('../core');

/**
 * @api private
 */
var cachedSecret = {};

/**
 * @api private
 */
var cacheQueue = [];

/**
 * @api private
 */
var maxCacheEntries = 50;

/**
 * @api private
 */
var v4Identifier = 'aws4_request';

/**
 * @api private
 */
module.exports = {
  /**
   * @api private
   *
   * @param date [String]
   * @param region [String]
   * @param serviceName [String]
   * @return [String]
   */
  createScope: function createScope(date, region, serviceName) {
    return [
      date.substr(0, 8),
      region,
      serviceName,
      v4Identifier
    ].join('/');
  },

  /**
   * @api private
   *
   * @param credentials [Credentials]
   * @param date [String]
   * @param region [String]
   * @param service [String]
   * @param shouldCache [Boolean]
   * @return [String]
   */
  getSigningKey: function getSigningKey(
    credentials,
    date,
    region,
    service,
    shouldCache
  ) {
    var credsIdentifier = AWS.util.crypto
      .hmac(credentials.secretAccessKey, credentials.accessKeyId, 'base64');
    var cacheKey = [credsIdentifier, date, region, service].join('_');
    shouldCache = shouldCache !== false;
    if (shouldCache && (cacheKey in cachedSecret)) {
      return cachedSecret[cacheKey];
    }

    var kDate = AWS.util.crypto.hmac(
      'AWS4' + credentials.secretAccessKey,
      date,
      'buffer'
    );
    var kRegion = AWS.util.crypto.hmac(kDate, region, 'buffer');
    var kService = AWS.util.crypto.hmac(kRegion, service, 'buffer');

    var signingKey = AWS.util.crypto.hmac(kService, v4Identifier, 'buffer');
    if (shouldCache) {
      cachedSecret[cacheKey] = signingKey;
      cacheQueue.push(cacheKey);
      if (cacheQueue.length > maxCacheEntries) {
        // remove the oldest entry (not the least recently used)
        delete cachedSecret[cacheQueue.shift()];
      }
    }

    return signingKey;
  },

  /**
   * @api private
   *
   * Empties the derived signing key cache. Made available for testing purposes
   * only.
   */
  emptyCache: function emptyCache() {
    cachedSecret = {};
    cacheQueue = [];
  }
};

},{"../core":29}],89:[function(require,module,exports){
function AcceptorStateMachine(states, state) {
  this.currentState = state || null;
  this.states = states || {};
}

AcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {
  if (typeof finalState === 'function') {
    inputError = bindObject; bindObject = done;
    done = finalState; finalState = null;
  }

  var self = this;
  var state = self.states[self.currentState];
  state.fn.call(bindObject || self, inputError, function(err) {
    if (err) {
      if (state.fail) self.currentState = state.fail;
      else return done ? done.call(bindObject, err) : null;
    } else {
      if (state.accept) self.currentState = state.accept;
      else return done ? done.call(bindObject) : null;
    }
    if (self.currentState === finalState) {
      return done ? done.call(bindObject, err) : null;
    }

    self.runTo(finalState, done, bindObject, err);
  });
};

AcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {
  if (typeof acceptState === 'function') {
    fn = acceptState; acceptState = null; failState = null;
  } else if (typeof failState === 'function') {
    fn = failState; failState = null;
  }

  if (!this.currentState) this.currentState = name;
  this.states[name] = { accept: acceptState, fail: failState, fn: fn };
  return this;
};

/**
 * @api private
 */
module.exports = AcceptorStateMachine;

},{}],90:[function(require,module,exports){
(function (process,setImmediate){
/* eslint guard-for-in:0 */
var AWS;

/**
 * A set of utility methods for use with the AWS SDK.
 *
 * @!attribute abort
 *   Return this value from an iterator function {each} or {arrayEach}
 *   to break out of the iteration.
 *   @example Breaking out of an iterator function
 *     AWS.util.each({a: 1, b: 2, c: 3}, function(key, value) {
 *       if (key == 'b') return AWS.util.abort;
 *     });
 *   @see each
 *   @see arrayEach
 * @api private
 */
var util = {
  environment: 'nodejs',
  engine: function engine() {
    if (util.isBrowser() && typeof navigator !== 'undefined') {
      return navigator.userAgent;
    } else {
      var engine = process.platform + '/' + process.version;
      if (process.env.AWS_EXECUTION_ENV) {
        engine += ' exec-env/' + process.env.AWS_EXECUTION_ENV;
      }
      return engine;
    }
  },

  userAgent: function userAgent() {
    var name = util.environment;
    var agent = 'aws-sdk-' + name + '/' + require('./core').VERSION;
    if (name === 'nodejs') agent += ' ' + util.engine();
    return agent;
  },

  uriEscape: function uriEscape(string) {
    var output = encodeURIComponent(string);
    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);

    // AWS percent-encodes some extra non-standard characters in a URI
    output = output.replace(/[*]/g, function(ch) {
      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();
    });

    return output;
  },

  uriEscapePath: function uriEscapePath(string) {
    var parts = [];
    util.arrayEach(string.split('/'), function (part) {
      parts.push(util.uriEscape(part));
    });
    return parts.join('/');
  },

  urlParse: function urlParse(url) {
    return util.url.parse(url);
  },

  urlFormat: function urlFormat(url) {
    return util.url.format(url);
  },

  queryStringParse: function queryStringParse(qs) {
    return util.querystring.parse(qs);
  },

  queryParamsToString: function queryParamsToString(params) {
    var items = [];
    var escape = util.uriEscape;
    var sortedKeys = Object.keys(params).sort();

    util.arrayEach(sortedKeys, function(name) {
      var value = params[name];
      var ename = escape(name);
      var result = ename + '=';
      if (Array.isArray(value)) {
        var vals = [];
        util.arrayEach(value, function(item) { vals.push(escape(item)); });
        result = ename + '=' + vals.sort().join('&' + ename + '=');
      } else if (value !== undefined && value !== null) {
        result = ename + '=' + escape(value);
      }
      items.push(result);
    });

    return items.join('&');
  },

  readFileSync: function readFileSync(path) {
    if (util.isBrowser()) return null;
    return require('fs').readFileSync(path, 'utf-8');
  },

  base64: {
    encode: function encode64(string) {
      if (typeof string === 'number') {
        throw util.error(new Error('Cannot base64 encode number ' + string));
      }
      if (string === null || typeof string === 'undefined') {
        return string;
      }
      var buf = (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(string) : new util.Buffer(string);
      return buf.toString('base64');
    },

    decode: function decode64(string) {
      if (typeof string === 'number') {
        throw util.error(new Error('Cannot base64 decode number ' + string));
      }
      if (string === null || typeof string === 'undefined') {
        return string;
      }
      return (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(string, 'base64') : new util.Buffer(string, 'base64');
    }

  },

  buffer: {
    toStream: function toStream(buffer) {
      if (!util.Buffer.isBuffer(buffer)) buffer = new util.Buffer(buffer);

      var readable = new (util.stream.Readable)();
      var pos = 0;
      readable._read = function(size) {
        if (pos >= buffer.length) return readable.push(null);

        var end = pos + size;
        if (end > buffer.length) end = buffer.length;
        readable.push(buffer.slice(pos, end));
        pos = end;
      };

      return readable;
    },

    /**
     * Concatenates a list of Buffer objects.
     */
    concat: function(buffers) {
      var length = 0,
          offset = 0,
          buffer = null, i;

      for (i = 0; i < buffers.length; i++) {
        length += buffers[i].length;
      }

      buffer = new util.Buffer(length);

      for (i = 0; i < buffers.length; i++) {
        buffers[i].copy(buffer, offset);
        offset += buffers[i].length;
      }

      return buffer;
    }
  },

  string: {
    byteLength: function byteLength(string) {
      if (string === null || string === undefined) return 0;
      if (typeof string === 'string') string = new util.Buffer(string);

      if (typeof string.byteLength === 'number') {
        return string.byteLength;
      } else if (typeof string.length === 'number') {
        return string.length;
      } else if (typeof string.size === 'number') {
        return string.size;
      } else if (typeof string.path === 'string') {
        return require('fs').lstatSync(string.path).size;
      } else {
        throw util.error(new Error('Cannot determine length of ' + string),
          { object: string });
      }
    },

    upperFirst: function upperFirst(string) {
      return string[0].toUpperCase() + string.substr(1);
    },

    lowerFirst: function lowerFirst(string) {
      return string[0].toLowerCase() + string.substr(1);
    }
  },

  ini: {
    parse: function string(ini) {
      var currentSection, map = {};
      util.arrayEach(ini.split(/\r?\n/), function(line) {
        line = line.split(/(^|\s)[;#]/)[0]; // remove comments
        var section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
        if (section) {
          currentSection = section[1];
        } else if (currentSection) {
          var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
          if (item) {
            map[currentSection] = map[currentSection] || {};
            map[currentSection][item[1]] = item[2];
          }
        }
      });

      return map;
    }
  },

  fn: {
    noop: function() {},
    callback: function (err) { if (err) throw err; },

    /**
     * Turn a synchronous function into as "async" function by making it call
     * a callback. The underlying function is called with all but the last argument,
     * which is treated as the callback. The callback is passed passed a first argument
     * of null on success to mimick standard node callbacks.
     */
    makeAsync: function makeAsync(fn, expectedArgs) {
      if (expectedArgs && expectedArgs <= fn.length) {
        return fn;
      }

      return function() {
        var args = Array.prototype.slice.call(arguments, 0);
        var callback = args.pop();
        var result = fn.apply(null, args);
        callback(result);
      };
    }
  },

  /**
   * Date and time utility functions.
   */
  date: {

    /**
     * @return [Date] the current JavaScript date object. Since all
     *   AWS services rely on this date object, you can override
     *   this function to provide a special time value to AWS service
     *   requests.
     */
    getDate: function getDate() {
      if (!AWS) AWS = require('./core');
      if (AWS.config.systemClockOffset) { // use offset when non-zero
        return new Date(new Date().getTime() + AWS.config.systemClockOffset);
      } else {
        return new Date();
      }
    },

    /**
     * @return [String] the date in ISO-8601 format
     */
    iso8601: function iso8601(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.toISOString().replace(/\.\d{3}Z$/, 'Z');
    },

    /**
     * @return [String] the date in RFC 822 format
     */
    rfc822: function rfc822(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.toUTCString();
    },

    /**
     * @return [Integer] the UNIX timestamp value for the current time
     */
    unixTimestamp: function unixTimestamp(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.getTime() / 1000;
    },

    /**
     * @param [String,number,Date] date
     * @return [Date]
     */
    from: function format(date) {
      if (typeof date === 'number') {
        return new Date(date * 1000); // unix timestamp
      } else {
        return new Date(date);
      }
    },

    /**
     * Given a Date or date-like value, this function formats the
     * date into a string of the requested value.
     * @param [String,number,Date] date
     * @param [String] formatter Valid formats are:
     #   * 'iso8601'
     #   * 'rfc822'
     #   * 'unixTimestamp'
     * @return [String]
     */
    format: function format(date, formatter) {
      if (!formatter) formatter = 'iso8601';
      return util.date[formatter](util.date.from(date));
    },

    parseTimestamp: function parseTimestamp(value) {
      if (typeof value === 'number') { // unix timestamp (number)
        return new Date(value * 1000);
      } else if (value.match(/^\d+$/)) { // unix timestamp
        return new Date(value * 1000);
      } else if (value.match(/^\d{4}/)) { // iso8601
        return new Date(value);
      } else if (value.match(/^\w{3},/)) { // rfc822
        return new Date(value);
      } else {
        throw util.error(
          new Error('unhandled timestamp format: ' + value),
          {code: 'TimestampParserError'});
      }
    }

  },

  crypto: {
    crc32Table: [
     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,
     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,
     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,
     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,
     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,
     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,
     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,
     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,
     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,
     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,
     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,
     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,
     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,
     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,
     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,
     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,
     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,
     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,
     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,
     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,
     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,
     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,
     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,
     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,
     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,
     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,
     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,
     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,
     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,
     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,
     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,
     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,
     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,
     0x2D02EF8D],

    crc32: function crc32(data) {
      var tbl = util.crypto.crc32Table;
      var crc = 0 ^ -1;

      if (typeof data === 'string') {
        data = new util.Buffer(data);
      }

      for (var i = 0; i < data.length; i++) {
        var code = data.readUInt8(i);
        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 0xFF];
      }
      return (crc ^ -1) >>> 0;
    },

    hmac: function hmac(key, string, digest, fn) {
      if (!digest) digest = 'binary';
      if (digest === 'buffer') { digest = undefined; }
      if (!fn) fn = 'sha256';
      if (typeof string === 'string') string = new util.Buffer(string);
      return util.crypto.lib.createHmac(fn, key).update(string).digest(digest);
    },

    md5: function md5(data, digest, callback) {
      return util.crypto.hash('md5', data, digest, callback);
    },

    sha256: function sha256(data, digest, callback) {
      return util.crypto.hash('sha256', data, digest, callback);
    },

    hash: function(algorithm, data, digest, callback) {
      var hash = util.crypto.createHash(algorithm);
      if (!digest) { digest = 'binary'; }
      if (digest === 'buffer') { digest = undefined; }
      if (typeof data === 'string') data = new util.Buffer(data);
      var sliceFn = util.arraySliceFn(data);
      var isBuffer = util.Buffer.isBuffer(data);
      //Identifying objects with an ArrayBuffer as buffers
      if (util.isBrowser() && typeof ArrayBuffer !== 'undefined' && data && data.buffer instanceof ArrayBuffer) isBuffer = true;

      if (callback && typeof data === 'object' &&
          typeof data.on === 'function' && !isBuffer) {
        data.on('data', function(chunk) { hash.update(chunk); });
        data.on('error', function(err) { callback(err); });
        data.on('end', function() { callback(null, hash.digest(digest)); });
      } else if (callback && sliceFn && !isBuffer &&
                 typeof FileReader !== 'undefined') {
        // this might be a File/Blob
        var index = 0, size = 1024 * 512;
        var reader = new FileReader();
        reader.onerror = function() {
          callback(new Error('Failed to read data.'));
        };
        reader.onload = function() {
          var buf = new util.Buffer(new Uint8Array(reader.result));
          hash.update(buf);
          index += buf.length;
          reader._continueReading();
        };
        reader._continueReading = function() {
          if (index >= data.size) {
            callback(null, hash.digest(digest));
            return;
          }

          var back = index + size;
          if (back > data.size) back = data.size;
          reader.readAsArrayBuffer(sliceFn.call(data, index, back));
        };

        reader._continueReading();
      } else {
        if (util.isBrowser() && typeof data === 'object' && !isBuffer) {
          data = new util.Buffer(new Uint8Array(data));
        }
        var out = hash.update(data).digest(digest);
        if (callback) callback(null, out);
        return out;
      }
    },

    toHex: function toHex(data) {
      var out = [];
      for (var i = 0; i < data.length; i++) {
        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));
      }
      return out.join('');
    },

    createHash: function createHash(algorithm) {
      return util.crypto.lib.createHash(algorithm);
    }

  },

  /** @!ignore */

  /* Abort constant */
  abort: {},

  each: function each(object, iterFunction) {
    for (var key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        var ret = iterFunction.call(this, key, object[key]);
        if (ret === util.abort) break;
      }
    }
  },

  arrayEach: function arrayEach(array, iterFunction) {
    for (var idx in array) {
      if (Object.prototype.hasOwnProperty.call(array, idx)) {
        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
        if (ret === util.abort) break;
      }
    }
  },

  update: function update(obj1, obj2) {
    util.each(obj2, function iterator(key, item) {
      obj1[key] = item;
    });
    return obj1;
  },

  merge: function merge(obj1, obj2) {
    return util.update(util.copy(obj1), obj2);
  },

  copy: function copy(object) {
    if (object === null || object === undefined) return object;
    var dupe = {};
    // jshint forin:false
    for (var key in object) {
      dupe[key] = object[key];
    }
    return dupe;
  },

  isEmpty: function isEmpty(obj) {
    for (var prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        return false;
      }
    }
    return true;
  },

  arraySliceFn: function arraySliceFn(obj) {
    var fn = obj.slice || obj.webkitSlice || obj.mozSlice;
    return typeof fn === 'function' ? fn : null;
  },

  isType: function isType(obj, type) {
    // handle cross-"frame" objects
    if (typeof type === 'function') type = util.typeName(type);
    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
  },

  typeName: function typeName(type) {
    if (Object.prototype.hasOwnProperty.call(type, 'name')) return type.name;
    var str = type.toString();
    var match = str.match(/^\s*function (.+)\(/);
    return match ? match[1] : str;
  },

  error: function error(err, options) {
    var originalError = null;
    if (typeof err.message === 'string' && err.message !== '') {
      if (typeof options === 'string' || (options && options.message)) {
        originalError = util.copy(err);
        originalError.message = err.message;
      }
    }
    err.message = err.message || null;

    if (typeof options === 'string') {
      err.message = options;
    } else if (typeof options === 'object' && options !== null) {
      util.update(err, options);
      if (options.message)
        err.message = options.message;
      if (options.code || options.name)
        err.code = options.code || options.name;
      if (options.stack)
        err.stack = options.stack;
    }

    if (typeof Object.defineProperty === 'function') {
      Object.defineProperty(err, 'name', {writable: true, enumerable: false});
      Object.defineProperty(err, 'message', {enumerable: true});
    }

    err.name = options && options.name || err.name || err.code || 'Error';
    err.time = new Date();

    if (originalError) err.originalError = originalError;

    return err;
  },

  /**
   * @api private
   */
  inherit: function inherit(klass, features) {
    var newObject = null;
    if (features === undefined) {
      features = klass;
      klass = Object;
      newObject = {};
    } else {
      var ctor = function ConstructorWrapper() {};
      ctor.prototype = klass.prototype;
      newObject = new ctor();
    }

    // constructor not supplied, create pass-through ctor
    if (features.constructor === Object) {
      features.constructor = function() {
        if (klass !== Object) {
          return klass.apply(this, arguments);
        }
      };
    }

    features.constructor.prototype = newObject;
    util.update(features.constructor.prototype, features);
    features.constructor.__super__ = klass;
    return features.constructor;
  },

  /**
   * @api private
   */
  mixin: function mixin() {
    var klass = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      // jshint forin:false
      for (var prop in arguments[i].prototype) {
        var fn = arguments[i].prototype[prop];
        if (prop !== 'constructor') {
          klass.prototype[prop] = fn;
        }
      }
    }
    return klass;
  },

  /**
   * @api private
   */
  hideProperties: function hideProperties(obj, props) {
    if (typeof Object.defineProperty !== 'function') return;

    util.arrayEach(props, function (key) {
      Object.defineProperty(obj, key, {
        enumerable: false, writable: true, configurable: true });
    });
  },

  /**
   * @api private
   */
  property: function property(obj, name, value, enumerable, isValue) {
    var opts = {
      configurable: true,
      enumerable: enumerable !== undefined ? enumerable : true
    };
    if (typeof value === 'function' && !isValue) {
      opts.get = value;
    }
    else {
      opts.value = value; opts.writable = true;
    }

    Object.defineProperty(obj, name, opts);
  },

  /**
   * @api private
   */
  memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {
    var cachedValue = null;

    // build enumerable attribute for each value with lazy accessor.
    util.property(obj, name, function() {
      if (cachedValue === null) {
        cachedValue = get();
      }
      return cachedValue;
    }, enumerable);
  },

  /**
   * TODO Remove in major version revision
   * This backfill populates response data without the
   * top-level payload name.
   *
   * @api private
   */
  hoistPayloadMember: function hoistPayloadMember(resp) {
    var req = resp.request;
    var operationName = req.operation;
    var operation = req.service.api.operations[operationName];
    var output = operation.output;
    if (output.payload && !operation.hasEventOutput) {
      var payloadMember = output.members[output.payload];
      var responsePayload = resp.data[output.payload];
      if (payloadMember.type === 'structure') {
        util.each(responsePayload, function(key, value) {
          util.property(resp.data, key, value, false);
        });
      }
    }
  },

  /**
   * Compute SHA-256 checksums of streams
   *
   * @api private
   */
  computeSha256: function computeSha256(body, done) {
    if (util.isNode()) {
      var Stream = util.stream.Stream;
      var fs = require('fs');
      if (body instanceof Stream) {
        if (typeof body.path === 'string') { // assume file object
          var settings = {};
          if (typeof body.start === 'number') {
            settings.start = body.start;
          }
          if (typeof body.end === 'number') {
            settings.end = body.end;
          }
          body = fs.createReadStream(body.path, settings);
        } else { // TODO support other stream types
          return done(new Error('Non-file stream objects are ' +
                                'not supported with SigV4'));
        }
      }
    }

    util.crypto.sha256(body, 'hex', function(err, sha) {
      if (err) done(err);
      else done(null, sha);
    });
  },

  /**
   * @api private
   */
  isClockSkewed: function isClockSkewed(serverTime) {
    if (serverTime) {
      util.property(AWS.config, 'isClockSkewed',
        Math.abs(new Date().getTime() - serverTime) >= 300000, false);
      return AWS.config.isClockSkewed;
    }
  },

  applyClockOffset: function applyClockOffset(serverTime) {
    if (serverTime)
      AWS.config.systemClockOffset = serverTime - new Date().getTime();
  },

  /**
   * @api private
   */
  extractRequestId: function extractRequestId(resp) {
    var requestId = resp.httpResponse.headers['x-amz-request-id'] ||
                     resp.httpResponse.headers['x-amzn-requestid'];

    if (!requestId && resp.data && resp.data.ResponseMetadata) {
      requestId = resp.data.ResponseMetadata.RequestId;
    }

    if (requestId) {
      resp.requestId = requestId;
    }

    if (resp.error) {
      resp.error.requestId = requestId;
    }
  },

  /**
   * @api private
   */
  addPromises: function addPromises(constructors, PromiseDependency) {
    var deletePromises = false;
    if (PromiseDependency === undefined && AWS && AWS.config) {
      PromiseDependency = AWS.config.getPromisesDependency();
    }
    if (PromiseDependency === undefined && typeof Promise !== 'undefined') {
      PromiseDependency = Promise;
    }
    if (typeof PromiseDependency !== 'function') deletePromises = true;
    if (!Array.isArray(constructors)) constructors = [constructors];

    for (var ind = 0; ind < constructors.length; ind++) {
      var constructor = constructors[ind];
      if (deletePromises) {
        if (constructor.deletePromisesFromClass) {
          constructor.deletePromisesFromClass();
        }
      } else if (constructor.addPromisesToClass) {
        constructor.addPromisesToClass(PromiseDependency);
      }
    }
  },

  /**
   * @api private
   */
  promisifyMethod: function promisifyMethod(methodName, PromiseDependency) {
    return function promise() {
      var self = this;
      return new PromiseDependency(function(resolve, reject) {
        self[methodName](function(err, data) {
          if (err) {
            reject(err);
          } else {
            resolve(data);
          }
        });
      });
    };
  },

  /**
   * @api private
   */
  isDualstackAvailable: function isDualstackAvailable(service) {
    if (!service) return false;
    var metadata = require('../apis/metadata.json');
    if (typeof service !== 'string') service = service.serviceIdentifier;
    if (typeof service !== 'string' || !metadata.hasOwnProperty(service)) return false;
    return !!metadata[service].dualstackAvailable;
  },

  /**
   * @api private
   */
  calculateRetryDelay: function calculateRetryDelay(retryCount, retryDelayOptions) {
    if (!retryDelayOptions) retryDelayOptions = {};
    var customBackoff = retryDelayOptions.customBackoff || null;
    if (typeof customBackoff === 'function') {
      return customBackoff(retryCount);
    }
    var base = typeof retryDelayOptions.base === 'number' ? retryDelayOptions.base : 100;
    var delay = Math.random() * (Math.pow(2, retryCount) * base);
    return delay;
  },

  /**
   * @api private
   */
  handleRequestWithRetries: function handleRequestWithRetries(httpRequest, options, cb) {
    if (!options) options = {};
    var http = AWS.HttpClient.getInstance();
    var httpOptions = options.httpOptions || {};
    var retryCount = 0;

    var errCallback = function(err) {
      var maxRetries = options.maxRetries || 0;
      if (err && err.code === 'TimeoutError') err.retryable = true;
      if (err && err.retryable && retryCount < maxRetries) {
        retryCount++;
        var delay = util.calculateRetryDelay(retryCount, options.retryDelayOptions);
        setTimeout(sendRequest, delay + (err.retryAfter || 0));
      } else {
        cb(err);
      }
    };

    var sendRequest = function() {
      var data = '';
      http.handleRequest(httpRequest, httpOptions, function(httpResponse) {
        httpResponse.on('data', function(chunk) { data += chunk.toString(); });
        httpResponse.on('end', function() {
          var statusCode = httpResponse.statusCode;
          if (statusCode < 300) {
            cb(null, data);
          } else {
            var retryAfter = parseInt(httpResponse.headers['retry-after'], 10) * 1000 || 0;
            var err = util.error(new Error(),
              { retryable: statusCode >= 500 || statusCode === 429 }
            );
            if (retryAfter && err.retryable) err.retryAfter = retryAfter;
            errCallback(err);
          }
        });
      }, errCallback);
    };

    AWS.util.defer(sendRequest);
  },

  /**
   * @api private
   */
  uuid: {
    v4: function uuidV4() {
      return require('uuid').v4();
    }
  },

  /**
   * @api private
   */
  convertPayloadToString: function convertPayloadToString(resp) {
    var req = resp.request;
    var operation = req.operation;
    var rules = req.service.api.operations[operation].output || {};
    if (rules.payload && resp.data[rules.payload]) {
      resp.data[rules.payload] = resp.data[rules.payload].toString();
    }
  },

  /**
   * @api private
   */
  defer: function defer(callback) {
    if (typeof process === 'object' && typeof process.nextTick === 'function') {
      process.nextTick(callback);
    } else if (typeof setImmediate === 'function') {
      setImmediate(callback);
    } else {
      setTimeout(callback, 0);
    }
  },

  /**
   * @api private
   */
  defaultProfile: 'default',

  /**
   * @api private
   */
  configOptInEnv: 'AWS_SDK_LOAD_CONFIG',

  /**
   * @api private
   */
  sharedCredentialsFileEnv: 'AWS_SHARED_CREDENTIALS_FILE',

  /**
   * @api private
   */
  sharedConfigFileEnv: 'AWS_CONFIG_FILE',

  /**
   * @api private
   */
  imdsDisabledEnv: 'AWS_EC2_METADATA_DISABLED'
};

/**
 * @api private
 */
module.exports = util;

}).call(this,require('_process'),require("timers").setImmediate)
},{"../apis/metadata.json":14,"./core":29,"_process":113,"fs":100,"timers":138,"uuid":143}],91:[function(require,module,exports){
var util = require('../util');
var Shape = require('../model/shape');

function DomXmlParser() { }

DomXmlParser.prototype.parse = function(xml, shape) {
  if (xml.replace(/^\s+/, '') === '') return {};

  var result, error;
  try {
    if (window.DOMParser) {
      try {
        var parser = new DOMParser();
        result = parser.parseFromString(xml, 'text/xml');
      } catch (syntaxError) {
        throw util.error(new Error('Parse error in document'),
          {
            originalError: syntaxError,
            code: 'XMLParserError',
            retryable: true
          });
      }

      if (result.documentElement === null) {
        throw util.error(new Error('Cannot parse empty document.'),
          {
            code: 'XMLParserError',
            retryable: true
          });
      }

      var isError = result.getElementsByTagName('parsererror')[0];
      if (isError && (isError.parentNode === result ||
          isError.parentNode.nodeName === 'body' ||
          isError.parentNode.parentNode === result ||
          isError.parentNode.parentNode.nodeName === 'body')) {
        var errorElement = isError.getElementsByTagName('div')[0] || isError;
        throw util.error(new Error(errorElement.textContent || 'Parser error in document'),
          {
            code: 'XMLParserError',
            retryable: true
          });
      }
    } else if (window.ActiveXObject) {
      result = new window.ActiveXObject('Microsoft.XMLDOM');
      result.async = false;

      if (!result.loadXML(xml)) {
        throw util.error(new Error('Parse error in document'),
          {
            code: 'XMLParserError',
            retryable: true
          });
      }
    } else {
      throw new Error('Cannot load XML parser');
    }
  } catch (e) {
    error = e;
  }

  if (result && result.documentElement && !error) {
    var data = parseXml(result.documentElement, shape);
    var metadata = getElementByTagName(result.documentElement, 'ResponseMetadata');
    if (metadata) {
      data.ResponseMetadata = parseXml(metadata, {});
    }
    return data;
  } else if (error) {
    throw util.error(error || new Error(), {code: 'XMLParserError', retryable: true});
  } else { // empty xml document
    return {};
  }
};

function getElementByTagName(xml, tag) {
  var elements = xml.getElementsByTagName(tag);
  for (var i = 0, iLen = elements.length; i < iLen; i++) {
    if (elements[i].parentNode === xml) {
      return elements[i];
    }
  }
}

function parseXml(xml, shape) {
  if (!shape) shape = {};
  switch (shape.type) {
    case 'structure': return parseStructure(xml, shape);
    case 'map': return parseMap(xml, shape);
    case 'list': return parseList(xml, shape);
    case undefined: case null: return parseUnknown(xml);
    default: return parseScalar(xml, shape);
  }
}

function parseStructure(xml, shape) {
  var data = {};
  if (xml === null) return data;

  util.each(shape.members, function(memberName, memberShape) {
    if (memberShape.isXmlAttribute) {
      if (Object.prototype.hasOwnProperty.call(xml.attributes, memberShape.name)) {
        var value = xml.attributes[memberShape.name].value;
        data[memberName] = parseXml({textContent: value}, memberShape);
      }
    } else {
      var xmlChild = memberShape.flattened ? xml :
        getElementByTagName(xml, memberShape.name);
      if (xmlChild) {
        data[memberName] = parseXml(xmlChild, memberShape);
      } else if (!memberShape.flattened && memberShape.type === 'list') {
        data[memberName] = memberShape.defaultValue;
      }
    }
  });

  return data;
}

function parseMap(xml, shape) {
  var data = {};
  var xmlKey = shape.key.name || 'key';
  var xmlValue = shape.value.name || 'value';
  var tagName = shape.flattened ? shape.name : 'entry';

  var child = xml.firstElementChild;
  while (child) {
    if (child.nodeName === tagName) {
      var key = getElementByTagName(child, xmlKey).textContent;
      var value = getElementByTagName(child, xmlValue);
      data[key] = parseXml(value, shape.value);
    }
    child = child.nextElementSibling;
  }
  return data;
}

function parseList(xml, shape) {
  var data = [];
  var tagName = shape.flattened ? shape.name : (shape.member.name || 'member');

  var child = xml.firstElementChild;
  while (child) {
    if (child.nodeName === tagName) {
      data.push(parseXml(child, shape.member));
    }
    child = child.nextElementSibling;
  }
  return data;
}

function parseScalar(xml, shape) {
  if (xml.getAttribute) {
    var encoding = xml.getAttribute('encoding');
    if (encoding === 'base64') {
      shape = new Shape.create({type: encoding});
    }
  }

  var text = xml.textContent;
  if (text === '') text = null;
  if (typeof shape.toType === 'function') {
    return shape.toType(text);
  } else {
    return text;
  }
}

function parseUnknown(xml) {
  if (xml === undefined || xml === null) return '';

  // empty object
  if (!xml.firstElementChild) {
    if (xml.parentNode.parentNode === null) return {};
    if (xml.childNodes.length === 0) return '';
    else return xml.textContent;
  }

  // object, parse as structure
  var shape = {type: 'structure', members: {}};
  var child = xml.firstElementChild;
  while (child) {
    var tag = child.nodeName;
    if (Object.prototype.hasOwnProperty.call(shape.members, tag)) {
      // multiple tags of the same name makes it a list
      shape.members[tag].type = 'list';
    } else {
      shape.members[tag] = {name: tag};
    }
    child = child.nextElementSibling;
  }
  return parseStructure(xml, shape);
}

/**
 * @api private
 */
module.exports = DomXmlParser;

},{"../model/shape":61,"../util":90}],92:[function(require,module,exports){
var util = require('../util');
var XmlNode = require('./xml-node').XmlNode;
var XmlText = require('./xml-text').XmlText;

function XmlBuilder() { }

XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {
  var xml = new XmlNode(rootElement);
  applyNamespaces(xml, shape, true);
  serialize(xml, params, shape);
  return xml.children.length > 0 || noEmpty ? xml.toString() : '';
};

function serialize(xml, value, shape) {
  switch (shape.type) {
    case 'structure': return serializeStructure(xml, value, shape);
    case 'map': return serializeMap(xml, value, shape);
    case 'list': return serializeList(xml, value, shape);
    default: return serializeScalar(xml, value, shape);
  }
}

function serializeStructure(xml, params, shape) {
  util.arrayEach(shape.memberNames, function(memberName) {
    var memberShape = shape.members[memberName];
    if (memberShape.location !== 'body') return;

    var value = params[memberName];
    var name = memberShape.name;
    if (value !== undefined && value !== null) {
      if (memberShape.isXmlAttribute) {
        xml.addAttribute(name, value);
      } else if (memberShape.flattened) {
        serialize(xml, value, memberShape);
      } else {
        var element = new XmlNode(name);
        xml.addChildNode(element);
        applyNamespaces(element, memberShape);
        serialize(element, value, memberShape);
      }
    }
  });
}

function serializeMap(xml, map, shape) {
  var xmlKey = shape.key.name || 'key';
  var xmlValue = shape.value.name || 'value';

  util.each(map, function(key, value) {
    var entry = new XmlNode(shape.flattened ? shape.name : 'entry');
    xml.addChildNode(entry);

    var entryKey = new XmlNode(xmlKey);
    var entryValue = new XmlNode(xmlValue);
    entry.addChildNode(entryKey);
    entry.addChildNode(entryValue);

    serialize(entryKey, key, shape.key);
    serialize(entryValue, value, shape.value);
  });
}

function serializeList(xml, list, shape) {
  if (shape.flattened) {
    util.arrayEach(list, function(value) {
      var name = shape.member.name || shape.name;
      var element = new XmlNode(name);
      xml.addChildNode(element);
      serialize(element, value, shape.member);
    });
  } else {
    util.arrayEach(list, function(value) {
      var name = shape.member.name || 'member';
      var element = new XmlNode(name);
      xml.addChildNode(element);
      serialize(element, value, shape.member);
    });
  }
}

function serializeScalar(xml, value, shape) {
  xml.addChildNode(
    new XmlText(shape.toWireFormat(value))
  );
}

function applyNamespaces(xml, shape, isRoot) {
  var uri, prefix = 'xmlns';
  if (shape.xmlNamespaceUri) {
    uri = shape.xmlNamespaceUri;
    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;
  } else if (isRoot && shape.api.xmlNamespaceUri) {
    uri = shape.api.xmlNamespaceUri;
  }

  if (uri) xml.addAttribute(prefix, uri);
}

/**
 * @api private
 */
module.exports = XmlBuilder;

},{"../util":90,"./xml-node":95,"./xml-text":96}],93:[function(require,module,exports){
/**
 * Escapes characters that can not be in an XML attribute.
 */
function escapeAttribute(value) {
    return value.replace(/&/g, '&amp;').replace(/'/g, '&apos;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

/**
 * @api private
 */
module.exports = {
    escapeAttribute: escapeAttribute
};

},{}],94:[function(require,module,exports){
/**
 * Escapes characters that can not be in an XML element.
 */
function escapeElement(value) {
    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

/**
 * @api private
 */
module.exports = {
    escapeElement: escapeElement
};

},{}],95:[function(require,module,exports){
var escapeAttribute = require('./escape-attribute').escapeAttribute;

/**
 * Represents an XML node.
 * @api private
 */
function XmlNode(name, children) {
    if (children === void 0) { children = []; }
    this.name = name;
    this.children = children;
    this.attributes = {};
}
XmlNode.prototype.addAttribute = function (name, value) {
    this.attributes[name] = value;
    return this;
};
XmlNode.prototype.addChildNode = function (child) {
    this.children.push(child);
    return this;
};
XmlNode.prototype.removeAttribute = function (name) {
    delete this.attributes[name];
    return this;
};
XmlNode.prototype.toString = function () {
    var hasChildren = Boolean(this.children.length);
    var xmlText = '<' + this.name;
    // add attributes
    var attributes = this.attributes;
    for (var i = 0, attributeNames = Object.keys(attributes); i < attributeNames.length; i++) {
        var attributeName = attributeNames[i];
        var attribute = attributes[attributeName];
        if (typeof attribute !== 'undefined' && attribute !== null) {
            xmlText += ' ' + attributeName + '=\"' + escapeAttribute('' + attribute) + '\"';
        }
    }
    return xmlText += !hasChildren ? '/>' : '>' + this.children.map(function (c) { return c.toString(); }).join('') + '</' + this.name + '>';
};

/**
 * @api private
 */
module.exports = {
    XmlNode: XmlNode
};

},{"./escape-attribute":93}],96:[function(require,module,exports){
var escapeElement = require('./escape-element').escapeElement;

/**
 * Represents an XML text value.
 * @api private
 */
function XmlText(value) {
    this.value = value;
}

XmlText.prototype.toString = function () {
    return escapeElement('' + this.value);
};

/**
 * @api private
 */
module.exports = {
    XmlText: XmlText
};

},{"./escape-element":94}],97:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LRU_1 = require("./utils/LRU");
var CACHE_SIZE = 1000;
/**
 * Inspired node-lru-cache[https://github.com/isaacs/node-lru-cache]
 */
var EndpointCache = /** @class */ (function () {
    function EndpointCache(maxSize) {
        if (maxSize === void 0) { maxSize = CACHE_SIZE; }
        this.maxSize = maxSize;
        this.cache = new LRU_1.LRUCache(maxSize);
    }
    ;
    Object.defineProperty(EndpointCache.prototype, "size", {
        get: function () {
            return this.cache.length;
        },
        enumerable: true,
        configurable: true
    });
    EndpointCache.prototype.put = function (key, value) {
      var keyString = typeof key !== 'string' ? EndpointCache.getKeyString(key) : key;
        var endpointRecord = this.populateValue(value);
        this.cache.put(keyString, endpointRecord);
    };
    EndpointCache.prototype.get = function (key) {
      var keyString = typeof key !== 'string' ? EndpointCache.getKeyString(key) : key;
        var now = Date.now();
        var records = this.cache.get(keyString);
        if (records) {
            for (var i = 0; i < records.length; i++) {
                var record = records[i];
                if (record.Expire < now) {
                    this.cache.remove(keyString);
                    return undefined;
                }
            }
        }
        return records;
    };
    EndpointCache.getKeyString = function (key) {
        var identifiers = [];
        var identifierNames = Object.keys(key).sort();
        for (var i = 0; i < identifierNames.length; i++) {
            var identifierName = identifierNames[i];
            if (key[identifierName] === undefined)
                continue;
            identifiers.push(key[identifierName]);
        }
        return identifiers.join(' ');
    };
    EndpointCache.prototype.populateValue = function (endpoints) {
        var now = Date.now();
        return endpoints.map(function (endpoint) { return ({
            Address: endpoint.Address || '',
            Expire: now + (endpoint.CachePeriodInMinutes || 1) * 60 * 1000
        }); });
    };
    EndpointCache.prototype.empty = function () {
        this.cache.empty();
    };
    EndpointCache.prototype.remove = function (key) {
      var keyString = typeof key !== 'string' ? EndpointCache.getKeyString(key) : key;
        this.cache.remove(keyString);
    };
    return EndpointCache;
}());
exports.EndpointCache = EndpointCache;
},{"./utils/LRU":98}],98:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LinkedListNode = /** @class */ (function () {
    function LinkedListNode(key, value) {
        this.key = key;
        this.value = value;
    }
    return LinkedListNode;
}());
var LRUCache = /** @class */ (function () {
    function LRUCache(size) {
        this.nodeMap = {};
        this.size = 0;
        if (typeof size !== 'number' || size < 1) {
            throw new Error('Cache size can only be positive number');
        }
        this.sizeLimit = size;
    }
    Object.defineProperty(LRUCache.prototype, "length", {
        get: function () {
            return this.size;
        },
        enumerable: true,
        configurable: true
    });
    LRUCache.prototype.prependToList = function (node) {
        if (!this.headerNode) {
            this.tailNode = node;
        }
        else {
            this.headerNode.prev = node;
            node.next = this.headerNode;
        }
        this.headerNode = node;
        this.size++;
    };
    LRUCache.prototype.removeFromTail = function () {
        if (!this.tailNode) {
            return undefined;
        }
        var node = this.tailNode;
        var prevNode = node.prev;
        if (prevNode) {
            prevNode.next = undefined;
        }
        node.prev = undefined;
        this.tailNode = prevNode;
        this.size--;
        return node;
    };
    LRUCache.prototype.detachFromList = function (node) {
        if (this.headerNode === node) {
            this.headerNode = node.next;
        }
        if (this.tailNode === node) {
            this.tailNode = node.prev;
        }
        if (node.prev) {
            node.prev.next = node.next;
        }
        if (node.next) {
            node.next.prev = node.prev;
        }
        node.next = undefined;
        node.prev = undefined;
        this.size--;
    };
    LRUCache.prototype.get = function (key) {
        if (this.nodeMap[key]) {
            var node = this.nodeMap[key];
            this.detachFromList(node);
            this.prependToList(node);
            return node.value;
        }
    };
    LRUCache.prototype.remove = function (key) {
        if (this.nodeMap[key]) {
            var node = this.nodeMap[key];
            this.detachFromList(node);
            delete this.nodeMap[key];
        }
    };
    LRUCache.prototype.put = function (key, value) {
        if (this.nodeMap[key]) {
            this.remove(key);
        }
        else if (this.size === this.sizeLimit) {
            var tailNode = this.removeFromTail();
            var key_1 = tailNode.key;
            delete this.nodeMap[key_1];
        }
        var newNode = new LinkedListNode(key, value);
        this.nodeMap[key] = newNode;
        this.prependToList(newNode);
    };
    LRUCache.prototype.empty = function () {
        var keys = Object.keys(this.nodeMap);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var node = this.nodeMap[key];
            this.detachFromList(node);
            delete this.nodeMap[key];
        }
    };
    return LRUCache;
}());
exports.LRUCache = LRUCache;
},{}],99:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],100:[function(require,module,exports){

},{}],101:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"dup":100}],102:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('nodejs.util.inspect.custom')
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef'
  var table = new Array(256)
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

}).call(this,require("buffer").Buffer)
},{"base64-js":99,"buffer":102,"ieee754":106}],103:[function(require,module,exports){
(function (global,Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"base64-js":99,"buffer":102,"ieee754":106,"isarray":109}],104:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":108}],105:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],106:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],107:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],108:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],109:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],110:[function(require,module,exports){
(function(exports) {
  "use strict";

  function isArray(obj) {
    if (obj !== null) {
      return Object.prototype.toString.call(obj) === "[object Array]";
    } else {
      return false;
    }
  }

  function isObject(obj) {
    if (obj !== null) {
      return Object.prototype.toString.call(obj) === "[object Object]";
    } else {
      return false;
    }
  }

  function strictDeepEqual(first, second) {
    // Check the scalar case first.
    if (first === second) {
      return true;
    }

    // Check if they are the same type.
    var firstType = Object.prototype.toString.call(first);
    if (firstType !== Object.prototype.toString.call(second)) {
      return false;
    }
    // We know that first and second have the same type so we can just check the
    // first type from now on.
    if (isArray(first) === true) {
      // Short circuit if they're not the same length;
      if (first.length !== second.length) {
        return false;
      }
      for (var i = 0; i < first.length; i++) {
        if (strictDeepEqual(first[i], second[i]) === false) {
          return false;
        }
      }
      return true;
    }
    if (isObject(first) === true) {
      // An object is equal if it has the same key/value pairs.
      var keysSeen = {};
      for (var key in first) {
        if (hasOwnProperty.call(first, key)) {
          if (strictDeepEqual(first[key], second[key]) === false) {
            return false;
          }
          keysSeen[key] = true;
        }
      }
      // Now check that there aren't any keys in second that weren't
      // in first.
      for (var key2 in second) {
        if (hasOwnProperty.call(second, key2)) {
          if (keysSeen[key2] !== true) {
            return false;
          }
        }
      }
      return true;
    }
    return false;
  }

  function isFalse(obj) {
    // From the spec:
    // A false value corresponds to the following values:
    // Empty list
    // Empty object
    // Empty string
    // False boolean
    // null value

    // First check the scalar values.
    if (obj === "" || obj === false || obj === null) {
        return true;
    } else if (isArray(obj) && obj.length === 0) {
        // Check for an empty array.
        return true;
    } else if (isObject(obj)) {
        // Check for an empty object.
        for (var key in obj) {
            // If there are any keys, then
            // the object is not empty so the object
            // is not false.
            if (obj.hasOwnProperty(key)) {
              return false;
            }
        }
        return true;
    } else {
        return false;
    }
  }

  function objValues(obj) {
    var keys = Object.keys(obj);
    var values = [];
    for (var i = 0; i < keys.length; i++) {
      values.push(obj[keys[i]]);
    }
    return values;
  }

  function merge(a, b) {
      var merged = {};
      for (var key in a) {
          merged[key] = a[key];
      }
      for (var key2 in b) {
          merged[key2] = b[key2];
      }
      return merged;
  }

  var trimLeft;
  if (typeof String.prototype.trimLeft === "function") {
    trimLeft = function(str) {
      return str.trimLeft();
    };
  } else {
    trimLeft = function(str) {
      return str.match(/^\s*(.*)/)[1];
    };
  }

  // Type constants used to define functions.
  var TYPE_NUMBER = 0;
  var TYPE_ANY = 1;
  var TYPE_STRING = 2;
  var TYPE_ARRAY = 3;
  var TYPE_OBJECT = 4;
  var TYPE_BOOLEAN = 5;
  var TYPE_EXPREF = 6;
  var TYPE_NULL = 7;
  var TYPE_ARRAY_NUMBER = 8;
  var TYPE_ARRAY_STRING = 9;

  var TOK_EOF = "EOF";
  var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
  var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
  var TOK_RBRACKET = "Rbracket";
  var TOK_RPAREN = "Rparen";
  var TOK_COMMA = "Comma";
  var TOK_COLON = "Colon";
  var TOK_RBRACE = "Rbrace";
  var TOK_NUMBER = "Number";
  var TOK_CURRENT = "Current";
  var TOK_EXPREF = "Expref";
  var TOK_PIPE = "Pipe";
  var TOK_OR = "Or";
  var TOK_AND = "And";
  var TOK_EQ = "EQ";
  var TOK_GT = "GT";
  var TOK_LT = "LT";
  var TOK_GTE = "GTE";
  var TOK_LTE = "LTE";
  var TOK_NE = "NE";
  var TOK_FLATTEN = "Flatten";
  var TOK_STAR = "Star";
  var TOK_FILTER = "Filter";
  var TOK_DOT = "Dot";
  var TOK_NOT = "Not";
  var TOK_LBRACE = "Lbrace";
  var TOK_LBRACKET = "Lbracket";
  var TOK_LPAREN= "Lparen";
  var TOK_LITERAL= "Literal";

  // The "&", "[", "<", ">" tokens
  // are not in basicToken because
  // there are two token variants
  // ("&&", "[?", "<=", ">=").  This is specially handled
  // below.

  var basicTokens = {
    ".": TOK_DOT,
    "*": TOK_STAR,
    ",": TOK_COMMA,
    ":": TOK_COLON,
    "{": TOK_LBRACE,
    "}": TOK_RBRACE,
    "]": TOK_RBRACKET,
    "(": TOK_LPAREN,
    ")": TOK_RPAREN,
    "@": TOK_CURRENT
  };

  var operatorStartToken = {
      "<": true,
      ">": true,
      "=": true,
      "!": true
  };

  var skipChars = {
      " ": true,
      "\t": true,
      "\n": true
  };


  function isAlpha(ch) {
      return (ch >= "a" && ch <= "z") ||
             (ch >= "A" && ch <= "Z") ||
             ch === "_";
  }

  function isNum(ch) {
      return (ch >= "0" && ch <= "9") ||
             ch === "-";
  }
  function isAlphaNum(ch) {
      return (ch >= "a" && ch <= "z") ||
             (ch >= "A" && ch <= "Z") ||
             (ch >= "0" && ch <= "9") ||
             ch === "_";
  }

  function Lexer() {
  }
  Lexer.prototype = {
      tokenize: function(stream) {
          var tokens = [];
          this._current = 0;
          var start;
          var identifier;
          var token;
          while (this._current < stream.length) {
              if (isAlpha(stream[this._current])) {
                  start = this._current;
                  identifier = this._consumeUnquotedIdentifier(stream);
                  tokens.push({type: TOK_UNQUOTEDIDENTIFIER,
                               value: identifier,
                               start: start});
              } else if (basicTokens[stream[this._current]] !== undefined) {
                  tokens.push({type: basicTokens[stream[this._current]],
                              value: stream[this._current],
                              start: this._current});
                  this._current++;
              } else if (isNum(stream[this._current])) {
                  token = this._consumeNumber(stream);
                  tokens.push(token);
              } else if (stream[this._current] === "[") {
                  // No need to increment this._current.  This happens
                  // in _consumeLBracket
                  token = this._consumeLBracket(stream);
                  tokens.push(token);
              } else if (stream[this._current] === "\"") {
                  start = this._current;
                  identifier = this._consumeQuotedIdentifier(stream);
                  tokens.push({type: TOK_QUOTEDIDENTIFIER,
                               value: identifier,
                               start: start});
              } else if (stream[this._current] === "'") {
                  start = this._current;
                  identifier = this._consumeRawStringLiteral(stream);
                  tokens.push({type: TOK_LITERAL,
                               value: identifier,
                               start: start});
              } else if (stream[this._current] === "`") {
                  start = this._current;
                  var literal = this._consumeLiteral(stream);
                  tokens.push({type: TOK_LITERAL,
                               value: literal,
                               start: start});
              } else if (operatorStartToken[stream[this._current]] !== undefined) {
                  tokens.push(this._consumeOperator(stream));
              } else if (skipChars[stream[this._current]] !== undefined) {
                  // Ignore whitespace.
                  this._current++;
              } else if (stream[this._current] === "&") {
                  start = this._current;
                  this._current++;
                  if (stream[this._current] === "&") {
                      this._current++;
                      tokens.push({type: TOK_AND, value: "&&", start: start});
                  } else {
                      tokens.push({type: TOK_EXPREF, value: "&", start: start});
                  }
              } else if (stream[this._current] === "|") {
                  start = this._current;
                  this._current++;
                  if (stream[this._current] === "|") {
                      this._current++;
                      tokens.push({type: TOK_OR, value: "||", start: start});
                  } else {
                      tokens.push({type: TOK_PIPE, value: "|", start: start});
                  }
              } else {
                  var error = new Error("Unknown character:" + stream[this._current]);
                  error.name = "LexerError";
                  throw error;
              }
          }
          return tokens;
      },

      _consumeUnquotedIdentifier: function(stream) {
          var start = this._current;
          this._current++;
          while (this._current < stream.length && isAlphaNum(stream[this._current])) {
              this._current++;
          }
          return stream.slice(start, this._current);
      },

      _consumeQuotedIdentifier: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (stream[this._current] !== "\"" && this._current < maxLength) {
              // You can escape a double quote and you can escape an escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "\"")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          this._current++;
          return JSON.parse(stream.slice(start, this._current));
      },

      _consumeRawStringLiteral: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (stream[this._current] !== "'" && this._current < maxLength) {
              // You can escape a single quote and you can escape an escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "'")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          this._current++;
          var literal = stream.slice(start + 1, this._current - 1);
          return literal.replace("\\'", "'");
      },

      _consumeNumber: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (isNum(stream[this._current]) && this._current < maxLength) {
              this._current++;
          }
          var value = parseInt(stream.slice(start, this._current));
          return {type: TOK_NUMBER, value: value, start: start};
      },

      _consumeLBracket: function(stream) {
          var start = this._current;
          this._current++;
          if (stream[this._current] === "?") {
              this._current++;
              return {type: TOK_FILTER, value: "[?", start: start};
          } else if (stream[this._current] === "]") {
              this._current++;
              return {type: TOK_FLATTEN, value: "[]", start: start};
          } else {
              return {type: TOK_LBRACKET, value: "[", start: start};
          }
      },

      _consumeOperator: function(stream) {
          var start = this._current;
          var startingChar = stream[start];
          this._current++;
          if (startingChar === "!") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_NE, value: "!=", start: start};
              } else {
                return {type: TOK_NOT, value: "!", start: start};
              }
          } else if (startingChar === "<") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_LTE, value: "<=", start: start};
              } else {
                  return {type: TOK_LT, value: "<", start: start};
              }
          } else if (startingChar === ">") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_GTE, value: ">=", start: start};
              } else {
                  return {type: TOK_GT, value: ">", start: start};
              }
          } else if (startingChar === "=") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_EQ, value: "==", start: start};
              }
          }
      },

      _consumeLiteral: function(stream) {
          this._current++;
          var start = this._current;
          var maxLength = stream.length;
          var literal;
          while(stream[this._current] !== "`" && this._current < maxLength) {
              // You can escape a literal char or you can escape the escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "`")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          var literalString = trimLeft(stream.slice(start, this._current));
          literalString = literalString.replace("\\`", "`");
          if (this._looksLikeJSON(literalString)) {
              literal = JSON.parse(literalString);
          } else {
              // Try to JSON parse it as "<literal>"
              literal = JSON.parse("\"" + literalString + "\"");
          }
          // +1 gets us to the ending "`", +1 to move on to the next char.
          this._current++;
          return literal;
      },

      _looksLikeJSON: function(literalString) {
          var startingChars = "[{\"";
          var jsonLiterals = ["true", "false", "null"];
          var numberLooking = "-0123456789";

          if (literalString === "") {
              return false;
          } else if (startingChars.indexOf(literalString[0]) >= 0) {
              return true;
          } else if (jsonLiterals.indexOf(literalString) >= 0) {
              return true;
          } else if (numberLooking.indexOf(literalString[0]) >= 0) {
              try {
                  JSON.parse(literalString);
                  return true;
              } catch (ex) {
                  return false;
              }
          } else {
              return false;
          }
      }
  };

      var bindingPower = {};
      bindingPower[TOK_EOF] = 0;
      bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
      bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
      bindingPower[TOK_RBRACKET] = 0;
      bindingPower[TOK_RPAREN] = 0;
      bindingPower[TOK_COMMA] = 0;
      bindingPower[TOK_RBRACE] = 0;
      bindingPower[TOK_NUMBER] = 0;
      bindingPower[TOK_CURRENT] = 0;
      bindingPower[TOK_EXPREF] = 0;
      bindingPower[TOK_PIPE] = 1;
      bindingPower[TOK_OR] = 2;
      bindingPower[TOK_AND] = 3;
      bindingPower[TOK_EQ] = 5;
      bindingPower[TOK_GT] = 5;
      bindingPower[TOK_LT] = 5;
      bindingPower[TOK_GTE] = 5;
      bindingPower[TOK_LTE] = 5;
      bindingPower[TOK_NE] = 5;
      bindingPower[TOK_FLATTEN] = 9;
      bindingPower[TOK_STAR] = 20;
      bindingPower[TOK_FILTER] = 21;
      bindingPower[TOK_DOT] = 40;
      bindingPower[TOK_NOT] = 45;
      bindingPower[TOK_LBRACE] = 50;
      bindingPower[TOK_LBRACKET] = 55;
      bindingPower[TOK_LPAREN] = 60;

  function Parser() {
  }

  Parser.prototype = {
      parse: function(expression) {
          this._loadTokens(expression);
          this.index = 0;
          var ast = this.expression(0);
          if (this._lookahead(0) !== TOK_EOF) {
              var t = this._lookaheadToken(0);
              var error = new Error(
                  "Unexpected token type: " + t.type + ", value: " + t.value);
              error.name = "ParserError";
              throw error;
          }
          return ast;
      },

      _loadTokens: function(expression) {
          var lexer = new Lexer();
          var tokens = lexer.tokenize(expression);
          tokens.push({type: TOK_EOF, value: "", start: expression.length});
          this.tokens = tokens;
      },

      expression: function(rbp) {
          var leftToken = this._lookaheadToken(0);
          this._advance();
          var left = this.nud(leftToken);
          var currentToken = this._lookahead(0);
          while (rbp < bindingPower[currentToken]) {
              this._advance();
              left = this.led(currentToken, left);
              currentToken = this._lookahead(0);
          }
          return left;
      },

      _lookahead: function(number) {
          return this.tokens[this.index + number].type;
      },

      _lookaheadToken: function(number) {
          return this.tokens[this.index + number];
      },

      _advance: function() {
          this.index++;
      },

      nud: function(token) {
        var left;
        var right;
        var expression;
        switch (token.type) {
          case TOK_LITERAL:
            return {type: "Literal", value: token.value};
          case TOK_UNQUOTEDIDENTIFIER:
            return {type: "Field", name: token.value};
          case TOK_QUOTEDIDENTIFIER:
            var node = {type: "Field", name: token.value};
            if (this._lookahead(0) === TOK_LPAREN) {
                throw new Error("Quoted identifier not allowed for function names.");
            } else {
                return node;
            }
            break;
          case TOK_NOT:
            right = this.expression(bindingPower.Not);
            return {type: "NotExpression", children: [right]};
          case TOK_STAR:
            left = {type: "Identity"};
            right = null;
            if (this._lookahead(0) === TOK_RBRACKET) {
                // This can happen in a multiselect,
                // [a, b, *]
                right = {type: "Identity"};
            } else {
                right = this._parseProjectionRHS(bindingPower.Star);
            }
            return {type: "ValueProjection", children: [left, right]};
          case TOK_FILTER:
            return this.led(token.type, {type: "Identity"});
          case TOK_LBRACE:
            return this._parseMultiselectHash();
          case TOK_FLATTEN:
            left = {type: TOK_FLATTEN, children: [{type: "Identity"}]};
            right = this._parseProjectionRHS(bindingPower.Flatten);
            return {type: "Projection", children: [left, right]};
          case TOK_LBRACKET:
            if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
                right = this._parseIndexExpression();
                return this._projectIfSlice({type: "Identity"}, right);
            } else if (this._lookahead(0) === TOK_STAR &&
                       this._lookahead(1) === TOK_RBRACKET) {
                this._advance();
                this._advance();
                right = this._parseProjectionRHS(bindingPower.Star);
                return {type: "Projection",
                        children: [{type: "Identity"}, right]};
            } else {
                return this._parseMultiselectList();
            }
            break;
          case TOK_CURRENT:
            return {type: TOK_CURRENT};
          case TOK_EXPREF:
            expression = this.expression(bindingPower.Expref);
            return {type: "ExpressionReference", children: [expression]};
          case TOK_LPAREN:
            var args = [];
            while (this._lookahead(0) !== TOK_RPAREN) {
              if (this._lookahead(0) === TOK_CURRENT) {
                expression = {type: TOK_CURRENT};
                this._advance();
              } else {
                expression = this.expression(0);
              }
              args.push(expression);
            }
            this._match(TOK_RPAREN);
            return args[0];
          default:
            this._errorToken(token);
        }
      },

      led: function(tokenName, left) {
        var right;
        switch(tokenName) {
          case TOK_DOT:
            var rbp = bindingPower.Dot;
            if (this._lookahead(0) !== TOK_STAR) {
                right = this._parseDotRHS(rbp);
                return {type: "Subexpression", children: [left, right]};
            } else {
                // Creating a projection.
                this._advance();
                right = this._parseProjectionRHS(rbp);
                return {type: "ValueProjection", children: [left, right]};
            }
            break;
          case TOK_PIPE:
            right = this.expression(bindingPower.Pipe);
            return {type: TOK_PIPE, children: [left, right]};
          case TOK_OR:
            right = this.expression(bindingPower.Or);
            return {type: "OrExpression", children: [left, right]};
          case TOK_AND:
            right = this.expression(bindingPower.And);
            return {type: "AndExpression", children: [left, right]};
          case TOK_LPAREN:
            var name = left.name;
            var args = [];
            var expression, node;
            while (this._lookahead(0) !== TOK_RPAREN) {
              if (this._lookahead(0) === TOK_CURRENT) {
                expression = {type: TOK_CURRENT};
                this._advance();
              } else {
                expression = this.expression(0);
              }
              if (this._lookahead(0) === TOK_COMMA) {
                this._match(TOK_COMMA);
              }
              args.push(expression);
            }
            this._match(TOK_RPAREN);
            node = {type: "Function", name: name, children: args};
            return node;
          case TOK_FILTER:
            var condition = this.expression(0);
            this._match(TOK_RBRACKET);
            if (this._lookahead(0) === TOK_FLATTEN) {
              right = {type: "Identity"};
            } else {
              right = this._parseProjectionRHS(bindingPower.Filter);
            }
            return {type: "FilterProjection", children: [left, right, condition]};
          case TOK_FLATTEN:
            var leftNode = {type: TOK_FLATTEN, children: [left]};
            var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
            return {type: "Projection", children: [leftNode, rightNode]};
          case TOK_EQ:
          case TOK_NE:
          case TOK_GT:
          case TOK_GTE:
          case TOK_LT:
          case TOK_LTE:
            return this._parseComparator(left, tokenName);
          case TOK_LBRACKET:
            var token = this._lookaheadToken(0);
            if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
                right = this._parseIndexExpression();
                return this._projectIfSlice(left, right);
            } else {
                this._match(TOK_STAR);
                this._match(TOK_RBRACKET);
                right = this._parseProjectionRHS(bindingPower.Star);
                return {type: "Projection", children: [left, right]};
            }
            break;
          default:
            this._errorToken(this._lookaheadToken(0));
        }
      },

      _match: function(tokenType) {
          if (this._lookahead(0) === tokenType) {
              this._advance();
          } else {
              var t = this._lookaheadToken(0);
              var error = new Error("Expected " + tokenType + ", got: " + t.type);
              error.name = "ParserError";
              throw error;
          }
      },

      _errorToken: function(token) {
          var error = new Error("Invalid token (" +
                                token.type + "): \"" +
                                token.value + "\"");
          error.name = "ParserError";
          throw error;
      },


      _parseIndexExpression: function() {
          if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
              return this._parseSliceExpression();
          } else {
              var node = {
                  type: "Index",
                  value: this._lookaheadToken(0).value};
              this._advance();
              this._match(TOK_RBRACKET);
              return node;
          }
      },

      _projectIfSlice: function(left, right) {
          var indexExpr = {type: "IndexExpression", children: [left, right]};
          if (right.type === "Slice") {
              return {
                  type: "Projection",
                  children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]
              };
          } else {
              return indexExpr;
          }
      },

      _parseSliceExpression: function() {
          // [start:end:step] where each part is optional, as well as the last
          // colon.
          var parts = [null, null, null];
          var index = 0;
          var currentToken = this._lookahead(0);
          while (currentToken !== TOK_RBRACKET && index < 3) {
              if (currentToken === TOK_COLON) {
                  index++;
                  this._advance();
              } else if (currentToken === TOK_NUMBER) {
                  parts[index] = this._lookaheadToken(0).value;
                  this._advance();
              } else {
                  var t = this._lookahead(0);
                  var error = new Error("Syntax error, unexpected token: " +
                                        t.value + "(" + t.type + ")");
                  error.name = "Parsererror";
                  throw error;
              }
              currentToken = this._lookahead(0);
          }
          this._match(TOK_RBRACKET);
          return {
              type: "Slice",
              children: parts
          };
      },

      _parseComparator: function(left, comparator) {
        var right = this.expression(bindingPower[comparator]);
        return {type: "Comparator", name: comparator, children: [left, right]};
      },

      _parseDotRHS: function(rbp) {
          var lookahead = this._lookahead(0);
          var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];
          if (exprTokens.indexOf(lookahead) >= 0) {
              return this.expression(rbp);
          } else if (lookahead === TOK_LBRACKET) {
              this._match(TOK_LBRACKET);
              return this._parseMultiselectList();
          } else if (lookahead === TOK_LBRACE) {
              this._match(TOK_LBRACE);
              return this._parseMultiselectHash();
          }
      },

      _parseProjectionRHS: function(rbp) {
          var right;
          if (bindingPower[this._lookahead(0)] < 10) {
              right = {type: "Identity"};
          } else if (this._lookahead(0) === TOK_LBRACKET) {
              right = this.expression(rbp);
          } else if (this._lookahead(0) === TOK_FILTER) {
              right = this.expression(rbp);
          } else if (this._lookahead(0) === TOK_DOT) {
              this._match(TOK_DOT);
              right = this._parseDotRHS(rbp);
          } else {
              var t = this._lookaheadToken(0);
              var error = new Error("Sytanx error, unexpected token: " +
                                    t.value + "(" + t.type + ")");
              error.name = "ParserError";
              throw error;
          }
          return right;
      },

      _parseMultiselectList: function() {
          var expressions = [];
          while (this._lookahead(0) !== TOK_RBRACKET) {
              var expression = this.expression(0);
              expressions.push(expression);
              if (this._lookahead(0) === TOK_COMMA) {
                  this._match(TOK_COMMA);
                  if (this._lookahead(0) === TOK_RBRACKET) {
                    throw new Error("Unexpected token Rbracket");
                  }
              }
          }
          this._match(TOK_RBRACKET);
          return {type: "MultiSelectList", children: expressions};
      },

      _parseMultiselectHash: function() {
        var pairs = [];
        var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];
        var keyToken, keyName, value, node;
        for (;;) {
          keyToken = this._lookaheadToken(0);
          if (identifierTypes.indexOf(keyToken.type) < 0) {
            throw new Error("Expecting an identifier token, got: " +
                            keyToken.type);
          }
          keyName = keyToken.value;
          this._advance();
          this._match(TOK_COLON);
          value = this.expression(0);
          node = {type: "KeyValuePair", name: keyName, value: value};
          pairs.push(node);
          if (this._lookahead(0) === TOK_COMMA) {
            this._match(TOK_COMMA);
          } else if (this._lookahead(0) === TOK_RBRACE) {
            this._match(TOK_RBRACE);
            break;
          }
        }
        return {type: "MultiSelectHash", children: pairs};
      }
  };


  function TreeInterpreter(runtime) {
    this.runtime = runtime;
  }

  TreeInterpreter.prototype = {
      search: function(node, value) {
          return this.visit(node, value);
      },

      visit: function(node, value) {
          var matched, current, result, first, second, field, left, right, collected, i;
          switch (node.type) {
            case "Field":
              if (value === null ) {
                  return null;
              } else if (isObject(value)) {
                  field = value[node.name];
                  if (field === undefined) {
                      return null;
                  } else {
                      return field;
                  }
              } else {
                return null;
              }
              break;
            case "Subexpression":
              result = this.visit(node.children[0], value);
              for (i = 1; i < node.children.length; i++) {
                  result = this.visit(node.children[1], result);
                  if (result === null) {
                      return null;
                  }
              }
              return result;
            case "IndexExpression":
              left = this.visit(node.children[0], value);
              right = this.visit(node.children[1], left);
              return right;
            case "Index":
              if (!isArray(value)) {
                return null;
              }
              var index = node.value;
              if (index < 0) {
                index = value.length + index;
              }
              result = value[index];
              if (result === undefined) {
                result = null;
              }
              return result;
            case "Slice":
              if (!isArray(value)) {
                return null;
              }
              var sliceParams = node.children.slice(0);
              var computed = this.computeSliceParams(value.length, sliceParams);
              var start = computed[0];
              var stop = computed[1];
              var step = computed[2];
              result = [];
              if (step > 0) {
                  for (i = start; i < stop; i += step) {
                      result.push(value[i]);
                  }
              } else {
                  for (i = start; i > stop; i += step) {
                      result.push(value[i]);
                  }
              }
              return result;
            case "Projection":
              // Evaluate left child.
              var base = this.visit(node.children[0], value);
              if (!isArray(base)) {
                return null;
              }
              collected = [];
              for (i = 0; i < base.length; i++) {
                current = this.visit(node.children[1], base[i]);
                if (current !== null) {
                  collected.push(current);
                }
              }
              return collected;
            case "ValueProjection":
              // Evaluate left child.
              base = this.visit(node.children[0], value);
              if (!isObject(base)) {
                return null;
              }
              collected = [];
              var values = objValues(base);
              for (i = 0; i < values.length; i++) {
                current = this.visit(node.children[1], values[i]);
                if (current !== null) {
                  collected.push(current);
                }
              }
              return collected;
            case "FilterProjection":
              base = this.visit(node.children[0], value);
              if (!isArray(base)) {
                return null;
              }
              var filtered = [];
              var finalResults = [];
              for (i = 0; i < base.length; i++) {
                matched = this.visit(node.children[2], base[i]);
                if (!isFalse(matched)) {
                  filtered.push(base[i]);
                }
              }
              for (var j = 0; j < filtered.length; j++) {
                current = this.visit(node.children[1], filtered[j]);
                if (current !== null) {
                  finalResults.push(current);
                }
              }
              return finalResults;
            case "Comparator":
              first = this.visit(node.children[0], value);
              second = this.visit(node.children[1], value);
              switch(node.name) {
                case TOK_EQ:
                  result = strictDeepEqual(first, second);
                  break;
                case TOK_NE:
                  result = !strictDeepEqual(first, second);
                  break;
                case TOK_GT:
                  result = first > second;
                  break;
                case TOK_GTE:
                  result = first >= second;
                  break;
                case TOK_LT:
                  result = first < second;
                  break;
                case TOK_LTE:
                  result = first <= second;
                  break;
                default:
                  throw new Error("Unknown comparator: " + node.name);
              }
              return result;
            case TOK_FLATTEN:
              var original = this.visit(node.children[0], value);
              if (!isArray(original)) {
                return null;
              }
              var merged = [];
              for (i = 0; i < original.length; i++) {
                current = original[i];
                if (isArray(current)) {
                  merged.push.apply(merged, current);
                } else {
                  merged.push(current);
                }
              }
              return merged;
            case "Identity":
              return value;
            case "MultiSelectList":
              if (value === null) {
                return null;
              }
              collected = [];
              for (i = 0; i < node.children.length; i++) {
                  collected.push(this.visit(node.children[i], value));
              }
              return collected;
            case "MultiSelectHash":
              if (value === null) {
                return null;
              }
              collected = {};
              var child;
              for (i = 0; i < node.children.length; i++) {
                child = node.children[i];
                collected[child.name] = this.visit(child.value, value);
              }
              return collected;
            case "OrExpression":
              matched = this.visit(node.children[0], value);
              if (isFalse(matched)) {
                  matched = this.visit(node.children[1], value);
              }
              return matched;
            case "AndExpression":
              first = this.visit(node.children[0], value);

              if (isFalse(first) === true) {
                return first;
              }
              return this.visit(node.children[1], value);
            case "NotExpression":
              first = this.visit(node.children[0], value);
              return isFalse(first);
            case "Literal":
              return node.value;
            case TOK_PIPE:
              left = this.visit(node.children[0], value);
              return this.visit(node.children[1], left);
            case TOK_CURRENT:
              return value;
            case "Function":
              var resolvedArgs = [];
              for (i = 0; i < node.children.length; i++) {
                  resolvedArgs.push(this.visit(node.children[i], value));
              }
              return this.runtime.callFunction(node.name, resolvedArgs);
            case "ExpressionReference":
              var refNode = node.children[0];
              // Tag the node with a specific attribute so the type
              // checker verify the type.
              refNode.jmespathType = TOK_EXPREF;
              return refNode;
            default:
              throw new Error("Unknown node type: " + node.type);
          }
      },

      computeSliceParams: function(arrayLength, sliceParams) {
        var start = sliceParams[0];
        var stop = sliceParams[1];
        var step = sliceParams[2];
        var computed = [null, null, null];
        if (step === null) {
          step = 1;
        } else if (step === 0) {
          var error = new Error("Invalid slice, step cannot be 0");
          error.name = "RuntimeError";
          throw error;
        }
        var stepValueNegative = step < 0 ? true : false;

        if (start === null) {
            start = stepValueNegative ? arrayLength - 1 : 0;
        } else {
            start = this.capSliceRange(arrayLength, start, step);
        }

        if (stop === null) {
            stop = stepValueNegative ? -1 : arrayLength;
        } else {
            stop = this.capSliceRange(arrayLength, stop, step);
        }
        computed[0] = start;
        computed[1] = stop;
        computed[2] = step;
        return computed;
      },

      capSliceRange: function(arrayLength, actualValue, step) {
          if (actualValue < 0) {
              actualValue += arrayLength;
              if (actualValue < 0) {
                  actualValue = step < 0 ? -1 : 0;
              }
          } else if (actualValue >= arrayLength) {
              actualValue = step < 0 ? arrayLength - 1 : arrayLength;
          }
          return actualValue;
      }

  };

  function Runtime(interpreter) {
    this._interpreter = interpreter;
    this.functionTable = {
        // name: [function, <signature>]
        // The <signature> can be:
        //
        // {
        //   args: [[type1, type2], [type1, type2]],
        //   variadic: true|false
        // }
        //
        // Each arg in the arg list is a list of valid types
        // (if the function is overloaded and supports multiple
        // types.  If the type is "any" then no type checking
        // occurs on the argument.  Variadic is optional
        // and if not provided is assumed to be false.
        abs: {_func: this._functionAbs, _signature: [{types: [TYPE_NUMBER]}]},
        avg: {_func: this._functionAvg, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
        ceil: {_func: this._functionCeil, _signature: [{types: [TYPE_NUMBER]}]},
        contains: {
            _func: this._functionContains,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]},
                        {types: [TYPE_ANY]}]},
        "ends_with": {
            _func: this._functionEndsWith,
            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
        floor: {_func: this._functionFloor, _signature: [{types: [TYPE_NUMBER]}]},
        length: {
            _func: this._functionLength,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT]}]},
        map: {
            _func: this._functionMap,
            _signature: [{types: [TYPE_EXPREF]}, {types: [TYPE_ARRAY]}]},
        max: {
            _func: this._functionMax,
            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
        "merge": {
            _func: this._functionMerge,
            _signature: [{types: [TYPE_OBJECT], variadic: true}]
        },
        "max_by": {
          _func: this._functionMaxBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        sum: {_func: this._functionSum, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
        "starts_with": {
            _func: this._functionStartsWith,
            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
        min: {
            _func: this._functionMin,
            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
        "min_by": {
          _func: this._functionMinBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        type: {_func: this._functionType, _signature: [{types: [TYPE_ANY]}]},
        keys: {_func: this._functionKeys, _signature: [{types: [TYPE_OBJECT]}]},
        values: {_func: this._functionValues, _signature: [{types: [TYPE_OBJECT]}]},
        sort: {_func: this._functionSort, _signature: [{types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER]}]},
        "sort_by": {
          _func: this._functionSortBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        join: {
            _func: this._functionJoin,
            _signature: [
                {types: [TYPE_STRING]},
                {types: [TYPE_ARRAY_STRING]}
            ]
        },
        reverse: {
            _func: this._functionReverse,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]}]},
        "to_array": {_func: this._functionToArray, _signature: [{types: [TYPE_ANY]}]},
        "to_string": {_func: this._functionToString, _signature: [{types: [TYPE_ANY]}]},
        "to_number": {_func: this._functionToNumber, _signature: [{types: [TYPE_ANY]}]},
        "not_null": {
            _func: this._functionNotNull,
            _signature: [{types: [TYPE_ANY], variadic: true}]
        }
    };
  }

  Runtime.prototype = {
    callFunction: function(name, resolvedArgs) {
      var functionEntry = this.functionTable[name];
      if (functionEntry === undefined) {
          throw new Error("Unknown function: " + name + "()");
      }
      this._validateArgs(name, resolvedArgs, functionEntry._signature);
      return functionEntry._func.call(this, resolvedArgs);
    },

    _validateArgs: function(name, args, signature) {
        // Validating the args requires validating
        // the correct arity and the correct type of each arg.
        // If the last argument is declared as variadic, then we need
        // a minimum number of args to be required.  Otherwise it has to
        // be an exact amount.
        var pluralized;
        if (signature[signature.length - 1].variadic) {
            if (args.length < signature.length) {
                pluralized = signature.length === 1 ? " argument" : " arguments";
                throw new Error("ArgumentError: " + name + "() " +
                                "takes at least" + signature.length + pluralized +
                                " but received " + args.length);
            }
        } else if (args.length !== signature.length) {
            pluralized = signature.length === 1 ? " argument" : " arguments";
            throw new Error("ArgumentError: " + name + "() " +
                            "takes " + signature.length + pluralized +
                            " but received " + args.length);
        }
        var currentSpec;
        var actualType;
        var typeMatched;
        for (var i = 0; i < signature.length; i++) {
            typeMatched = false;
            currentSpec = signature[i].types;
            actualType = this._getTypeName(args[i]);
            for (var j = 0; j < currentSpec.length; j++) {
                if (this._typeMatches(actualType, currentSpec[j], args[i])) {
                    typeMatched = true;
                    break;
                }
            }
            if (!typeMatched) {
                throw new Error("TypeError: " + name + "() " +
                                "expected argument " + (i + 1) +
                                " to be type " + currentSpec +
                                " but received type " + actualType +
                                " instead.");
            }
        }
    },

    _typeMatches: function(actual, expected, argValue) {
        if (expected === TYPE_ANY) {
            return true;
        }
        if (expected === TYPE_ARRAY_STRING ||
            expected === TYPE_ARRAY_NUMBER ||
            expected === TYPE_ARRAY) {
            // The expected type can either just be array,
            // or it can require a specific subtype (array of numbers).
            //
            // The simplest case is if "array" with no subtype is specified.
            if (expected === TYPE_ARRAY) {
                return actual === TYPE_ARRAY;
            } else if (actual === TYPE_ARRAY) {
                // Otherwise we need to check subtypes.
                // I think this has potential to be improved.
                var subtype;
                if (expected === TYPE_ARRAY_NUMBER) {
                  subtype = TYPE_NUMBER;
                } else if (expected === TYPE_ARRAY_STRING) {
                  subtype = TYPE_STRING;
                }
                for (var i = 0; i < argValue.length; i++) {
                    if (!this._typeMatches(
                            this._getTypeName(argValue[i]), subtype,
                                             argValue[i])) {
                        return false;
                    }
                }
                return true;
            }
        } else {
            return actual === expected;
        }
    },
    _getTypeName: function(obj) {
        switch (Object.prototype.toString.call(obj)) {
            case "[object String]":
              return TYPE_STRING;
            case "[object Number]":
              return TYPE_NUMBER;
            case "[object Array]":
              return TYPE_ARRAY;
            case "[object Boolean]":
              return TYPE_BOOLEAN;
            case "[object Null]":
              return TYPE_NULL;
            case "[object Object]":
              // Check if it's an expref.  If it has, it's been
              // tagged with a jmespathType attr of 'Expref';
              if (obj.jmespathType === TOK_EXPREF) {
                return TYPE_EXPREF;
              } else {
                return TYPE_OBJECT;
              }
        }
    },

    _functionStartsWith: function(resolvedArgs) {
        return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
    },

    _functionEndsWith: function(resolvedArgs) {
        var searchStr = resolvedArgs[0];
        var suffix = resolvedArgs[1];
        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
    },

    _functionReverse: function(resolvedArgs) {
        var typeName = this._getTypeName(resolvedArgs[0]);
        if (typeName === TYPE_STRING) {
          var originalStr = resolvedArgs[0];
          var reversedStr = "";
          for (var i = originalStr.length - 1; i >= 0; i--) {
              reversedStr += originalStr[i];
          }
          return reversedStr;
        } else {
          var reversedArray = resolvedArgs[0].slice(0);
          reversedArray.reverse();
          return reversedArray;
        }
    },

    _functionAbs: function(resolvedArgs) {
      return Math.abs(resolvedArgs[0]);
    },

    _functionCeil: function(resolvedArgs) {
        return Math.ceil(resolvedArgs[0]);
    },

    _functionAvg: function(resolvedArgs) {
        var sum = 0;
        var inputArray = resolvedArgs[0];
        for (var i = 0; i < inputArray.length; i++) {
            sum += inputArray[i];
        }
        return sum / inputArray.length;
    },

    _functionContains: function(resolvedArgs) {
        return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
    },

    _functionFloor: function(resolvedArgs) {
        return Math.floor(resolvedArgs[0]);
    },

    _functionLength: function(resolvedArgs) {
       if (!isObject(resolvedArgs[0])) {
         return resolvedArgs[0].length;
       } else {
         // As far as I can tell, there's no way to get the length
         // of an object without O(n) iteration through the object.
         return Object.keys(resolvedArgs[0]).length;
       }
    },

    _functionMap: function(resolvedArgs) {
      var mapped = [];
      var interpreter = this._interpreter;
      var exprefNode = resolvedArgs[0];
      var elements = resolvedArgs[1];
      for (var i = 0; i < elements.length; i++) {
          mapped.push(interpreter.visit(exprefNode, elements[i]));
      }
      return mapped;
    },

    _functionMerge: function(resolvedArgs) {
      var merged = {};
      for (var i = 0; i < resolvedArgs.length; i++) {
        var current = resolvedArgs[i];
        for (var key in current) {
          merged[key] = current[key];
        }
      }
      return merged;
    },

    _functionMax: function(resolvedArgs) {
      if (resolvedArgs[0].length > 0) {
        var typeName = this._getTypeName(resolvedArgs[0][0]);
        if (typeName === TYPE_NUMBER) {
          return Math.max.apply(Math, resolvedArgs[0]);
        } else {
          var elements = resolvedArgs[0];
          var maxElement = elements[0];
          for (var i = 1; i < elements.length; i++) {
              if (maxElement.localeCompare(elements[i]) < 0) {
                  maxElement = elements[i];
              }
          }
          return maxElement;
        }
      } else {
          return null;
      }
    },

    _functionMin: function(resolvedArgs) {
      if (resolvedArgs[0].length > 0) {
        var typeName = this._getTypeName(resolvedArgs[0][0]);
        if (typeName === TYPE_NUMBER) {
          return Math.min.apply(Math, resolvedArgs[0]);
        } else {
          var elements = resolvedArgs[0];
          var minElement = elements[0];
          for (var i = 1; i < elements.length; i++) {
              if (elements[i].localeCompare(minElement) < 0) {
                  minElement = elements[i];
              }
          }
          return minElement;
        }
      } else {
        return null;
      }
    },

    _functionSum: function(resolvedArgs) {
      var sum = 0;
      var listToSum = resolvedArgs[0];
      for (var i = 0; i < listToSum.length; i++) {
        sum += listToSum[i];
      }
      return sum;
    },

    _functionType: function(resolvedArgs) {
        switch (this._getTypeName(resolvedArgs[0])) {
          case TYPE_NUMBER:
            return "number";
          case TYPE_STRING:
            return "string";
          case TYPE_ARRAY:
            return "array";
          case TYPE_OBJECT:
            return "object";
          case TYPE_BOOLEAN:
            return "boolean";
          case TYPE_EXPREF:
            return "expref";
          case TYPE_NULL:
            return "null";
        }
    },

    _functionKeys: function(resolvedArgs) {
        return Object.keys(resolvedArgs[0]);
    },

    _functionValues: function(resolvedArgs) {
        var obj = resolvedArgs[0];
        var keys = Object.keys(obj);
        var values = [];
        for (var i = 0; i < keys.length; i++) {
            values.push(obj[keys[i]]);
        }
        return values;
    },

    _functionJoin: function(resolvedArgs) {
        var joinChar = resolvedArgs[0];
        var listJoin = resolvedArgs[1];
        return listJoin.join(joinChar);
    },

    _functionToArray: function(resolvedArgs) {
        if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
            return resolvedArgs[0];
        } else {
            return [resolvedArgs[0]];
        }
    },

    _functionToString: function(resolvedArgs) {
        if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
            return resolvedArgs[0];
        } else {
            return JSON.stringify(resolvedArgs[0]);
        }
    },

    _functionToNumber: function(resolvedArgs) {
        var typeName = this._getTypeName(resolvedArgs[0]);
        var convertedValue;
        if (typeName === TYPE_NUMBER) {
            return resolvedArgs[0];
        } else if (typeName === TYPE_STRING) {
            convertedValue = +resolvedArgs[0];
            if (!isNaN(convertedValue)) {
                return convertedValue;
            }
        }
        return null;
    },

    _functionNotNull: function(resolvedArgs) {
        for (var i = 0; i < resolvedArgs.length; i++) {
            if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
                return resolvedArgs[i];
            }
        }
        return null;
    },

    _functionSort: function(resolvedArgs) {
        var sortedArray = resolvedArgs[0].slice(0);
        sortedArray.sort();
        return sortedArray;
    },

    _functionSortBy: function(resolvedArgs) {
        var sortedArray = resolvedArgs[0].slice(0);
        if (sortedArray.length === 0) {
            return sortedArray;
        }
        var interpreter = this._interpreter;
        var exprefNode = resolvedArgs[1];
        var requiredType = this._getTypeName(
            interpreter.visit(exprefNode, sortedArray[0]));
        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {
            throw new Error("TypeError");
        }
        var that = this;
        // In order to get a stable sort out of an unstable
        // sort algorithm, we decorate/sort/undecorate (DSU)
        // by creating a new list of [index, element] pairs.
        // In the cmp function, if the evaluated elements are
        // equal, then the index will be used as the tiebreaker.
        // After the decorated list has been sorted, it will be
        // undecorated to extract the original elements.
        var decorated = [];
        for (var i = 0; i < sortedArray.length; i++) {
          decorated.push([i, sortedArray[i]]);
        }
        decorated.sort(function(a, b) {
          var exprA = interpreter.visit(exprefNode, a[1]);
          var exprB = interpreter.visit(exprefNode, b[1]);
          if (that._getTypeName(exprA) !== requiredType) {
              throw new Error(
                  "TypeError: expected " + requiredType + ", received " +
                  that._getTypeName(exprA));
          } else if (that._getTypeName(exprB) !== requiredType) {
              throw new Error(
                  "TypeError: expected " + requiredType + ", received " +
                  that._getTypeName(exprB));
          }
          if (exprA > exprB) {
            return 1;
          } else if (exprA < exprB) {
            return -1;
          } else {
            // If they're equal compare the items by their
            // order to maintain relative order of equal keys
            // (i.e. to get a stable sort).
            return a[0] - b[0];
          }
        });
        // Undecorate: extract out the original list elements.
        for (var j = 0; j < decorated.length; j++) {
          sortedArray[j] = decorated[j][1];
        }
        return sortedArray;
    },

    _functionMaxBy: function(resolvedArgs) {
      var exprefNode = resolvedArgs[1];
      var resolvedArray = resolvedArgs[0];
      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
      var maxNumber = -Infinity;
      var maxRecord;
      var current;
      for (var i = 0; i < resolvedArray.length; i++) {
        current = keyFunction(resolvedArray[i]);
        if (current > maxNumber) {
          maxNumber = current;
          maxRecord = resolvedArray[i];
        }
      }
      return maxRecord;
    },

    _functionMinBy: function(resolvedArgs) {
      var exprefNode = resolvedArgs[1];
      var resolvedArray = resolvedArgs[0];
      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
      var minNumber = Infinity;
      var minRecord;
      var current;
      for (var i = 0; i < resolvedArray.length; i++) {
        current = keyFunction(resolvedArray[i]);
        if (current < minNumber) {
          minNumber = current;
          minRecord = resolvedArray[i];
        }
      }
      return minRecord;
    },

    createKeyFunction: function(exprefNode, allowedTypes) {
      var that = this;
      var interpreter = this._interpreter;
      var keyFunc = function(x) {
        var current = interpreter.visit(exprefNode, x);
        if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
          var msg = "TypeError: expected one of " + allowedTypes +
                    ", received " + that._getTypeName(current);
          throw new Error(msg);
        }
        return current;
      };
      return keyFunc;
    }

  };

  function compile(stream) {
    var parser = new Parser();
    var ast = parser.parse(stream);
    return ast;
  }

  function tokenize(stream) {
      var lexer = new Lexer();
      return lexer.tokenize(stream);
  }

  function search(data, expression) {
      var parser = new Parser();
      // This needs to be improved.  Both the interpreter and runtime depend on
      // each other.  The runtime needs the interpreter to support exprefs.
      // There's likely a clean way to avoid the cyclic dependency.
      var runtime = new Runtime();
      var interpreter = new TreeInterpreter(runtime);
      runtime._interpreter = interpreter;
      var node = parser.parse(expression);
      return interpreter.search(node, data);
  }

  exports.tokenize = tokenize;
  exports.compile = compile;
  exports.search = search;
  exports.strictDeepEqual = strictDeepEqual;
})(typeof exports === "undefined" ? this.jmespath = {} : exports);

},{}],111:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":113}],112:[function(require,module,exports){
(function (process){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,require('_process'))
},{"_process":113}],113:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],114:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],115:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],116:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],117:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":115,"./encode":116}],118:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

},{}],119:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return Object.keys(obj).map(function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

},{}],120:[function(require,module,exports){
arguments[4][117][0].apply(exports,arguments)
},{"./decode":118,"./encode":119,"dup":117}],121:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":122}],122:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":124,"./_stream_writable":126,"core-util-is":104,"inherits":130,"process-nextick-args":112}],123:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":125,"core-util-is":104,"inherits":130}],124:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":122,"./internal/streams/BufferList":127,"./internal/streams/destroy":128,"./internal/streams/stream":129,"_process":113,"core-util-is":104,"events":105,"inherits":130,"isarray":109,"process-nextick-args":112,"safe-buffer":131,"string_decoder/":132,"util":100}],125:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":122,"core-util-is":104,"inherits":130}],126:[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"./_stream_duplex":122,"./internal/streams/destroy":128,"./internal/streams/stream":129,"_process":113,"core-util-is":104,"inherits":130,"process-nextick-args":112,"safe-buffer":131,"timers":138,"util-deprecate":140}],127:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":131,"util":100}],128:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":112}],129:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":105}],130:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],131:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":102}],132:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":131}],133:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":134}],134:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":122,"./lib/_stream_passthrough.js":123,"./lib/_stream_readable.js":124,"./lib/_stream_transform.js":125,"./lib/_stream_writable.js":126}],135:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":134}],136:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":126}],137:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":105,"inherits":107,"readable-stream/duplex.js":121,"readable-stream/passthrough.js":133,"readable-stream/readable.js":134,"readable-stream/transform.js":135,"readable-stream/writable.js":136}],138:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":113,"timers":138}],139:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var punycode = require('punycode');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a puny coded representation of "domain".
      // It only converts the part of the domain name that
      // has non ASCII characters. I.e. it dosent matter if
      // you call it with a domain that already is in ASCII.
      var domainArray = this.hostname.split('.');
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s = domainArray[i];
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
            'xn--' + punycode.encode(s) : s);
      }
      this.hostname = newOut.join('.');
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  Object.keys(this).forEach(function(k) {
    result[k] = this[k];
  }, this);

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    Object.keys(relative).forEach(function(k) {
      if (k !== 'protocol')
        result[k] = relative[k];
    });

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      Object.keys(relative).forEach(function(k) {
        result[k] = relative[k];
      });
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

function isString(arg) {
  return typeof arg === "string";
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return  arg == null;
}

},{"punycode":114,"querystring":117}],140:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],141:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],142:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":141,"_process":113,"inherits":107}],143:[function(require,module,exports){
var v1 = require('./v1');
var v4 = require('./v4');

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;

},{"./v1":146,"./v4":147}],144:[function(require,module,exports){
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]]]).join('');
}

module.exports = bytesToUuid;

},{}],145:[function(require,module,exports){
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

},{}],146:[function(require,module,exports){
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;

},{"./lib/bytesToUuid":144,"./lib/rng":145}],147:[function(require,module,exports){
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

},{"./lib/bytesToUuid":144,"./lib/rng":145}]},{},[1]);
